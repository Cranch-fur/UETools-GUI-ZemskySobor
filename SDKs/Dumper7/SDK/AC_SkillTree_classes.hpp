#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_SkillTree

#include "Basic.hpp"

#include "E_SkillTree_YuriAppearance_structs.hpp"
#include "E_SkillTree_Category_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "STR_SkillTree_InventoryItem_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AC_SkillTree.AC_SkillTree_C
// 0x0208 (0x02A8 - 0x00A0)
class UAC_SkillTree_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         XP_Point;                                          // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              D_XP_PointUpdate;                                  // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Spent_XP_Points;                                   // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDA_SkillTree_Unit_Base_C*>      Items;                                             // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, SaveGame)
	TMulticastInlineDelegate<void(class UDA_SkillTree_Unit_Base_C* Item)> D_InstallItem;             // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UUI_Menu_SkillTree_C*                   SkillTree;                                         // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSTR_SkillTree_InventoryItem>   InventorySlots;                                    // 0x00F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, SaveGame)
	class FText                                   messageText;                                       // 0x0100(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              D_uninstallItem;                                   // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UBaseAbilitiesComponent*                AbilityComponent;                                  // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMap<class UClass*, struct FGameplayAbilitySpecHandle> AbilityMap;                               // 0x0130(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_SkillTree_YuriAppearance                    YuriAppearance;                                    // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SkillTree_YuriAppearance                    OldAppearance;                                     // 0x0181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         GE_Map;                                            // 0x0188(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, TSoftObjectPtr<class UDA_SkillTree_Unit_Base_C>> CodexIdItemBinding;           // 0x0198(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class UDA_SkillTree_Unit_Base_C>> TrainingCampDefaultItems;                // 0x01E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FString, bool>                     SlotsIDStatusMap;                                  // 0x01F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class UClass*, struct FActiveGameplayEffectHandle> GEClassToHandle;                         // 0x0248(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(E_SkillTree_YuriAppearance NewAppearance)> D_UpdateAppearance;     // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void AddItem(const class UDA_SkillTree_Unit_Base_C*& NewItem);
	void AddPoints(int32 Amount);
	void AddSpentPoints(int32 AddPoints);
	void Changed_Appearance(class UAppearanceItem* NewAppearance);
	void CheckTrainingCamp();
	void ClearCurrentInventorySlot();
	void ComponentLoaded();
	void ComponentPreSave();
	void DebugPrintEffect();
	void E_OnSpellPointsChanged(int32 StatValue);
	void ExecuteUbergraph_AC_SkillTree(int32 EntryPoint);
	void get_Inventory_Slot(const class FString& l_Slot_ID, struct FSTR_SkillTree_InventoryItem* Output, bool* Success);
	void GetBusySlot(int32 ItemId, struct FSTR_SkillTree_InventoryItem* Array_Element);
	void getInventorySlots(TArray<struct FSTR_SkillTree_InventoryItem>* InventorySlots_0);
	void getItems(TArray<class UDA_SkillTree_Unit_Base_C*>* Items_0);
	void getMessageText(class FText* messageText_0);
	void getSkillTree(class UUI_Menu_SkillTree_C** SkillTree_0);
	void getXP_Point(int32* Point);
	void getYuriAppearance(E_SkillTree_YuriAppearance* CurrentYuriAppearance, E_SkillTree_YuriAppearance* OldAppearance_0);
	void HandleItemEffect(class UDA_SkillTree_Unit_Base_C* l_item, bool l_apply, E_SkillTree_Category SlotCategory);
	void InitItemEffects();
	void Install_Item(class UDA_SkillTree_Unit_Base_C* l_item, int32 ItemId);
	void Is_Item_In_Inventory(int32 ItemId, bool* Success);
	void Is_Stone(class UClass* Class_0, bool* Result);
	bool IsContainEffect(const class UClass* EffectClass);
	bool IsItemSkillEnable(E_SkillTree_Category l_Category);
	bool IsRightTree(E_SkillTree_Category Category);
	void ReceiveBeginPlay();
	void ReinstallForYuriCategory();
	void Set_Inventory_Slot(const struct FSTR_SkillTree_InventoryItem& l_Slot);
	void setMessageText(const class FText& messageText_0);
	void setSkillTree(class UUI_Menu_SkillTree_C* SkillTree_0);
	void SetSlotParametrFromQuest(const TMap<class FString, bool>& SlotsIDStatusMap_0);
	void setXP_Point(int32 Point);
	void ShowMessage(const class FText& messageText_0);
	void thereItemToInstall(bool* Success);
	void UnInstall_Item(class UDA_SkillTree_Unit_Base_C* l_item, bool CheckCurrentSlot, E_SkillTree_Category SkillCategory);
	void Uninstall_Items();

public:
	static class UClass* StaticClass()
	{
		BP_STATIC_CLASS_IMPL("AC_SkillTree_C")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AC_SkillTree_C")
	}
	static class UAC_SkillTree_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAC_SkillTree_C>();
	}
};
DUMPER7_ASSERTS_UAC_SkillTree_C;

}

