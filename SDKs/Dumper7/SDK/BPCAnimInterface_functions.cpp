#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPCAnimInterface

#include "Basic.hpp"

#include "BPCAnimInterface_classes.hpp"
#include "BPCAnimInterface_parameters.hpp"


namespace SDK
{

// Function BPCAnimInterface.BPCAnimInterface_C.ActionsAllowedNotify
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    End                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::ActionsAllowedNotify(bool Start, bool End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "ActionsAllowedNotify");

	Params::BPCAnimInterface_C_ActionsAllowedNotify Parms{};

	Parms.Start = Start;
	Parms.End = End;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCAnimInterface.BPCAnimInterface_C.AttackBlocked
// (BlueprintCallable, BlueprintEvent)

void UBPCAnimInterface_C::AttackBlocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "AttackBlocked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCAnimInterface.BPCAnimInterface_C.AttackHappen
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EAttackState                            AttackType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAttackLevel                            AttackLevel_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAttackSide                             AttackSide_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::AttackHappen(class AActor* Object, EAttackState AttackType, EAttackLevel AttackLevel_0, EAttackSide AttackSide_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "AttackHappen");

	Params::BPCAnimInterface_C_AttackHappen Parms{};

	Parms.Object = Object;
	Parms.AttackType = AttackType;
	Parms.AttackLevel_0 = AttackLevel_0;
	Parms.AttackSide_0 = AttackSide_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCAnimInterface.BPCAnimInterface_C.BlockBlock
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bLock                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::BlockBlock(bool bLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "BlockBlock");

	Params::BPCAnimInterface_C_BlockBlock Parms{};

	Parms.bLock = bLock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCAnimInterface.BPCAnimInterface_C.BlockLock
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bLock                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::BlockLock(bool bLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "BlockLock");

	Params::BPCAnimInterface_C_BlockLock Parms{};

	Parms.bLock = bLock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCAnimInterface.BPCAnimInterface_C.BlockMove
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bLock                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::BlockMove(bool bLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "BlockMove");

	Params::BPCAnimInterface_C_BlockMove Parms{};

	Parms.bLock = bLock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCAnimInterface.BPCAnimInterface_C.BlockRotate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bLock                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::BlockRotate(bool bLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "BlockRotate");

	Params::BPCAnimInterface_C_BlockRotate Parms{};

	Parms.bLock = bLock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCAnimInterface.BPCAnimInterface_C.CanLeaveAnimation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanLeave                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::CanLeaveAnimation(bool CanLeave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "CanLeaveAnimation");

	Params::BPCAnimInterface_C_CanLeaveAnimation Parms{};

	Parms.CanLeave = CanLeave;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCAnimInterface.BPCAnimInterface_C.ComboNotify
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    End                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::ComboNotify(bool Start, bool End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "ComboNotify");

	Params::BPCAnimInterface_C_ComboNotify Parms{};

	Parms.Start = Start;
	Parms.End = End;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCAnimInterface.BPCAnimInterface_C.Die
// (BlueprintCallable, BlueprintEvent)

void UBPCAnimInterface_C::Die()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "Die");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCAnimInterface.BPCAnimInterface_C.DieEvent
// (BlueprintCallable, BlueprintEvent)

void UBPCAnimInterface_C::DieEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "DieEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCAnimInterface.BPCAnimInterface_C.DodgeRequest
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::DodgeRequest(const struct FVector2D& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "DodgeRequest");

	Params::BPCAnimInterface_C_DodgeRequest Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCAnimInterface.BPCAnimInterface_C.ExecuteUbergraph_BPCAnimInterface
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::ExecuteUbergraph_BPCAnimInterface(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "ExecuteUbergraph_BPCAnimInterface");

	Params::BPCAnimInterface_C_ExecuteUbergraph_BPCAnimInterface Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCAnimInterface.BPCAnimInterface_C.FootStep
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Left                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Right                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::FootStep(bool Left, bool Right)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "FootStep");

	Params::BPCAnimInterface_C_FootStep Parms{};

	Parms.Left = Left;
	Parms.Right = Right;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCAnimInterface.BPCAnimInterface_C.ForceAction
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ENPCAction::ENPCAction                  ForceAction_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::ForceAction(ENPCAction::ENPCAction ForceAction_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "ForceAction");

	Params::BPCAnimInterface_C_ForceAction Parms{};

	Parms.ForceAction_0 = ForceAction_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCAnimInterface.BPCAnimInterface_C.GetCanLeaveAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   CanLeave                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::GetCanLeaveAnimation(bool* CanLeave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "GetCanLeaveAnimation");

	Params::BPCAnimInterface_C_GetCanLeaveAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanLeave != nullptr)
		*CanLeave = Parms.CanLeave;
}


// Function BPCAnimInterface.BPCAnimInterface_C.GetIsBlocking
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   isBlocking_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::GetIsBlocking(bool* isBlocking_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "GetIsBlocking");

	Params::BPCAnimInterface_C_GetIsBlocking Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (isBlocking_0 != nullptr)
		*isBlocking_0 = Parms.isBlocking_0;
}


// Function BPCAnimInterface.BPCAnimInterface_C.GetIsBlockLocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Locked                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::GetIsBlockLocked(bool* Locked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "GetIsBlockLocked");

	Params::BPCAnimInterface_C_GetIsBlockLocked Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Locked != nullptr)
		*Locked = Parms.Locked;
}


// Function BPCAnimInterface.BPCAnimInterface_C.GetIsBlockRotate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bLocked                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::GetIsBlockRotate(bool* bLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "GetIsBlockRotate");

	Params::BPCAnimInterface_C_GetIsBlockRotate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bLocked != nullptr)
		*bLocked = Parms.bLocked;
}


// Function BPCAnimInterface.BPCAnimInterface_C.GetIsMooving
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   isMooving                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::GetIsMooving(bool* isMooving)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "GetIsMooving");

	Params::BPCAnimInterface_C_GetIsMooving Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (isMooving != nullptr)
		*isMooving = Parms.isMooving;
}


// Function BPCAnimInterface.BPCAnimInterface_C.HeavyAttack
// (BlueprintCallable, BlueprintEvent)

void UBPCAnimInterface_C::HeavyAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "HeavyAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCAnimInterface.BPCAnimInterface_C.HitReact
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Attacker                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EAttackState                            AttackState_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAttackLevel                            AttackLevel_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAttackSide                             AttackSide_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::HitReact(class AActor* Attacker, EAttackState AttackState_0, EAttackLevel AttackLevel_0, EAttackSide AttackSide_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "HitReact");

	Params::BPCAnimInterface_C_HitReact Parms{};

	Parms.Attacker = Attacker;
	Parms.AttackState_0 = AttackState_0;
	Parms.AttackLevel_0 = AttackLevel_0;
	Parms.AttackSide_0 = AttackSide_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCAnimInterface.BPCAnimInterface_C.HitReactInt
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Attacker                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EAttackState                            AttackState_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAttackLevel                            AttackLevel_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAttackSide                             AttackSide_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::HitReactInt(class AActor* Attacker, EAttackState AttackState_0, EAttackLevel AttackLevel_0, EAttackSide AttackSide_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "HitReactInt");

	Params::BPCAnimInterface_C_HitReactInt Parms{};

	Parms.Attacker = Attacker;
	Parms.AttackState_0 = AttackState_0;
	Parms.AttackLevel_0 = AttackLevel_0;
	Parms.AttackSide_0 = AttackSide_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCAnimInterface.BPCAnimInterface_C.InvulnerableNotify
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    End                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::InvulnerableNotify(bool Start, bool End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "InvulnerableNotify");

	Params::BPCAnimInterface_C_InvulnerableNotify Parms{};

	Parms.Start = Start;
	Parms.End = End;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCAnimInterface.BPCAnimInterface_C.LightAttack
// (BlueprintCallable, BlueprintEvent)

void UBPCAnimInterface_C::LightAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "LightAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCAnimInterface.BPCAnimInterface_C.Parried
// (BlueprintCallable, BlueprintEvent)

void UBPCAnimInterface_C::Parried()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "Parried");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPCAnimInterface.BPCAnimInterface_C.RequestAction
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EAnimCommands                           Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::RequestAction(EAnimCommands Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "RequestAction");

	Params::BPCAnimInterface_C_RequestAction Parms{};

	Parms.Action = Action;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPCAnimInterface.BPCAnimInterface_C.SetInputVector
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  X                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Y                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPCAnimInterface_C::SetInputVector(double X, double Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPCAnimInterface_C", "SetInputVector");

	Params::BPCAnimInterface_C_SetInputVector Parms{};

	Parms.X = X;
	Parms.Y = Y;

	UObject::ProcessEvent(Func, &Parms);
}

}

