#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_TargetLock

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_TargetLock.BPC_TargetLock_C
// 0x0268 (0x0308 - 0x00A0)
class UBPC_TargetLock_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         TargetSearchRadius;                                // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AutoTargetDistance;                                // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HardLockDisableDistanceMod;                        // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HardLockTargetDistanceMod;                         // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OneLineTolerance;                                  // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADefaultCharacter*                      OwnerCharacter;                                    // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         TargetsInRadius;                                   // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         TargetsOnScreen;                                   // 0x00E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class AActor*                                 ClosestToCenterTarget;                             // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ANPC_CH_NewBattleSystem_C*              CurrentAttackTarget;                               // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HardLock;                                          // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTargetedCharacterMovementComponent*    OwnerMovementComponent;                            // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBaseAbilitiesComponent*                OwnerASC;                                          // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       OwnerCameraComponent;                              // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                ClosestTargetASC;                                  // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CanChangeHardLockTarget;                           // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            LookAtFriendlyTargetEffectHandle;                  // 0x0134(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            AttackTagetEffectHandle;                           // 0x013C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CurrentAttackTargetASC;                            // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            OwnerBattleStateEffectHandle;                      // 0x0150(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            HardLockCameraEffectHandle;                        // 0x0158(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TargetTracingTimerHandle;                          // 0x0160(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        BehindBackMaxAngle;                                // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HardLockMaxDistance;                               // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             LastRangeAttackCharacter;                          // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HardLockForCamera;                                 // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SoftLockRadius;                                    // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SoftLockEnabled;                                   // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SoftLockTarget;                                    // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            SoftlockCameraEffectHandle;                        // 0x01A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SoftLockDetectEnabled;                             // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  SoftlockBlockedTags;                               // 0x01B0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        CameraSpeedMulitplier;                             // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADefaultCharacter*                      LastHitTarget;                                     // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ADefaultCharacter*                      LastHitInstigator;                                 // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        AttackCameraSpeed;                                 // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitCameraSpeed;                                    // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADefaultCharacter*                      LastHitCharacter;                                  // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SoftLockConeAngle;                                 // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputDrivenChangeLockTime;                         // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MovementTargetChangeTimerHandle;                   // 0x0210(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        InputDrivenChangeLockRadius;                       // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputDrivenChangeLockAngle;                        // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentHorizInterpSpeed;                           // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VerticalTimer;                                     // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentVertInterpSpeed;                            // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DodgeCameraSpeed;                                  // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ParryCameraSpeed;                                  // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebug;                                            // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HitActorResetRadius;                               // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HorizCameraRotation;                               // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CameraTimerEnd;                                    // 0x0261(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_262[0x6];                                      // 0x0262(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           HorizTimerHandle;                                  // 0x0268(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        AttackTargetChangeCooldown;                        // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           AttackTargetChangeTimerHandle;                     // 0x0278(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        InputDrivenChangeIgnoreDeltaAngle;                 // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<struct FVector2D, double>                InputDrivenChangeLockAnglesOverride;               // 0x0288(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        HitActorResetCooldown;                             // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HitActorResetCooldownTimerHandle;                  // 0x02E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentSoftlockCameraSpeed;                        // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SoftlockCameraRotationCooldownTimerHandle;         // 0x02F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SoftlockCameraInputCoolodwn;                       // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DodgeTargetChangeRadius;                           // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AllowChangeHardLockTarget();
	void BlockHardLockTargetSwitch(float Time);
	void CameraTimerHandle();
	void CanEnableHardLock(bool* Return);
	void CanEnableSoftLock(bool* Result);
	void CheckForResetHitActor();
	void CheckTargetsToUpdateByAttack();
	void CheckTargetsToUpdateByDodge();
	void CheckTraceBetweenActor(class AActor* ActorToCheck, bool* Result);
	void ExecuteUbergraph_BPC_TargetLock(int32 EntryPoint);
	void FilterActorsByCone(TArray<class AActor*>& Actors, const struct FVector& ConeDirection, double Angle, const struct FVector& ConeLocation, double ConeRadius, bool Debug, const struct FLinearColor& DebugColor, double DebugDuration, TArray<class AActor*>* ActorsInCone);
	void FilterTargetsInView();
	void FindAnyHardlockTarget(class AActor** Result);
	void FindCenteredTarget(class AActor** ClosestTarget);
	void FindClosestTarget(TArray<class AActor*>& Targets, class AActor** Output);
	void FindClosestTargetToDirection(TArray<class AActor*>& Targets, const struct FVector& Direction, class AActor** Output);
	void Get_Current_Target_Location(struct FVector* TargetLocation, bool* Result);
	void GetAttackingTargets(TArray<class AActor*>& Targets, TArray<class AActor*>* AttackingTargets);
	void GetHostileActorsAround(TArray<class AActor*>* HostileActors);
	void GetMiddleLocationOfActors(TArray<class AActor*>& Actors, struct FVector* Location);
	void GetRangeAttackTarget(class AActor** Target);
	void Handle_Owner_Deal_Hit(class ADefaultCharacter* HitInstigator, class ADefaultCharacter* HitTarget);
	void Handle_Owner_Receive_Hit(class ADefaultCharacter* HitInstigator, class ADefaultCharacter* HitTarget);
	void HandleMovementInputChanged();
	bool HasTagOnPlayer(const struct FGameplayTag& TagToCheck);
	void HorizontalCameraRotate(double DeltaTime, double RotateSpeedFR, double RotateSpeedR, double RotateSpeedRB);
	void IsAttacking(bool* Result);
	void IsHardLockEnabled_(bool* Result);
	bool IsHostileActor_(const class AActor* OwnerActor, const class AActor* EnemyActor);
	void IsInOneLine_(TArray<class AActor*>& Targets, double MaxDeltaDistance, bool* Result);
	bool IsMoving();
	bool IsNotTrackingMode();
	void IsSoftLockEnabled(bool* Result);
	void NeedToUpdateTargetByAttack(class AActor* NewTarget, bool* Result);
	void OnHitActorResetCooldownFinished();
	void OnLevelsChanged_Event();
	void OnMovementTargetChangeTimeEnded();
	void OnSoftlockCameraRotationCooldownFinished();
	void OnTagChanged(const struct FGameplayTag& UpdatedTag, bool Exists);
	void OnTargetChangeCooldownFinished();
	void OnTargetDie(class ADefaultCharacter* DiedCharacter);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RemoveCurrentTarget();
	void SearchNextHardLockTarget(bool SearchLeft, class AActor** Result);
	void Set_NewSoftlockTarget(class AActor* NewTarget);
	void SetCurrentAttackTarget(class ANPC_CH_NewBattleSystem_C* CurrentAttackTarget_0, class UAbilitySystemComponent* CurrentAttackTargetASC_0);
	void SetEnabledHardLockCamera(bool NewValue);
	void SetHardLockEnabled(bool Value);
	void SetLastHitCharacter(class ADefaultCharacter* Character);
	void SetSoftLockEnabled(bool Enable);
	void StartCameraInputTracking();
	void StopCameraInputTracking(float Time);
	void SwitchHardLockTarget(bool LeftDirection);
	void TraceForTargets();
	void UpdateClosestToCenterTarget(class AActor* Target);
	void UpdateCurrentAttackTarget(class AActor* AttackTarget);
	void UpdateFriendlyTarget();
	void UpdateHardlock();
	void UpdateSoftlock(double DeltaSeconds);
	void UpdateSoftlockCamera(double DeltaSeconds);
	void UpdateSoftlockTarget();
	void VerticalCameraRotate(double DeltaTime, double RotateSpeed);

public:
	static class UClass* StaticClass()
	{
		BP_STATIC_CLASS_IMPL("BPC_TargetLock_C")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BPC_TargetLock_C")
	}
	static class UBPC_TargetLock_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_TargetLock_C>();
	}
};
DUMPER7_ASSERTS_UBPC_TargetLock_C;

}

