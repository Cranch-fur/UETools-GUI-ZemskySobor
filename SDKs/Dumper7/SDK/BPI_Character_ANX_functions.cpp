#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Character_ANX

#include "Basic.hpp"

#include "BPI_Character_ANX_classes.hpp"
#include "BPI_Character_ANX_parameters.hpp"


namespace SDK
{

// Function BPI_Character_ANX.BPI_Character_ANX_C.BPI_Get_Animation_Info
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 Aim_Alpha                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Aim_Yaw                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Aim_Pitch                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Play_Breathe                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Lean_Drink                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Play_Random_Idle                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Play_Blink                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Play_Ears_Twitch                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Index___Ears                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Index___Idle                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  index___Attack                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_ANX_C::BPI_Get_Animation_Info(double* Aim_Alpha, double* Aim_Yaw, double* Aim_Pitch, double* Play_Breathe, double* Lean_Drink, bool* Play_Random_Idle, bool* Play_Blink, bool* Play_Ears_Twitch, int32* Index___Ears, int32* Index___Idle, int32* index___Attack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Character_ANX_C", "BPI_Get_Animation_Info");

	Params::BPI_Character_ANX_C_BPI_Get_Animation_Info Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Aim_Alpha != nullptr)
		*Aim_Alpha = Parms.Aim_Alpha;

	if (Aim_Yaw != nullptr)
		*Aim_Yaw = Parms.Aim_Yaw;

	if (Aim_Pitch != nullptr)
		*Aim_Pitch = Parms.Aim_Pitch;

	if (Play_Breathe != nullptr)
		*Play_Breathe = Parms.Play_Breathe;

	if (Lean_Drink != nullptr)
		*Lean_Drink = Parms.Lean_Drink;

	if (Play_Random_Idle != nullptr)
		*Play_Random_Idle = Parms.Play_Random_Idle;

	if (Play_Blink != nullptr)
		*Play_Blink = Parms.Play_Blink;

	if (Play_Ears_Twitch != nullptr)
		*Play_Ears_Twitch = Parms.Play_Ears_Twitch;

	if (Index___Ears != nullptr)
		*Index___Ears = Parms.Index___Ears;

	if (Index___Idle != nullptr)
		*Index___Idle = Parms.Index___Idle;

	if (index___Attack != nullptr)
		*index___Attack = Parms.index___Attack;
}


// Function BPI_Character_ANX.BPI_Character_ANX_C.BPI_Get_Movement_Info
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 Output_X                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Output_Y                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Play_Rate                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Turn_Rate                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Has_Move_Input                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Jump_in_Place                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Go_Jump                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Go_Swim                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Go_Turn                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Go_Fall                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   go_Land                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_ANX_C::BPI_Get_Movement_Info(double* Output_X, double* Output_Y, double* Play_Rate, double* Turn_Rate, bool* Has_Move_Input, bool* Jump_in_Place, bool* Go_Jump, bool* Go_Swim, bool* Go_Turn, bool* Go_Fall, bool* go_Land)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Character_ANX_C", "BPI_Get_Movement_Info");

	Params::BPI_Character_ANX_C_BPI_Get_Movement_Info Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Output_X != nullptr)
		*Output_X = Parms.Output_X;

	if (Output_Y != nullptr)
		*Output_Y = Parms.Output_Y;

	if (Play_Rate != nullptr)
		*Play_Rate = Parms.Play_Rate;

	if (Turn_Rate != nullptr)
		*Turn_Rate = Parms.Turn_Rate;

	if (Has_Move_Input != nullptr)
		*Has_Move_Input = Parms.Has_Move_Input;

	if (Jump_in_Place != nullptr)
		*Jump_in_Place = Parms.Jump_in_Place;

	if (Go_Jump != nullptr)
		*Go_Jump = Parms.Go_Jump;

	if (Go_Swim != nullptr)
		*Go_Swim = Parms.Go_Swim;

	if (Go_Turn != nullptr)
		*Go_Turn = Parms.Go_Turn;

	if (Go_Fall != nullptr)
		*Go_Fall = Parms.Go_Fall;

	if (go_Land != nullptr)
		*go_Land = Parms.go_Land;
}


// Function BPI_Character_ANX.BPI_Character_ANX_C.BPI_Get_States
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_MovementStage*                        Movement_Stage                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MoveType*                             Move_Type                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_ControlMode*                          Control_Mode                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BaseAction*                           Base_Action                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Action*                               Action                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Rest*                                 Rest                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Damage*                               Damage                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_TurnInPlace*                          Turn                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Aim*                                  Aim                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_AnimBSMode*                           AnimBS_Mode                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_ANX_C::BPI_Get_States(E_MovementStage* Movement_Stage, E_MoveType* Move_Type, E_ControlMode* Control_Mode, E_BaseAction* Base_Action, E_Action* Action, E_Rest* Rest, E_Damage* Damage, E_TurnInPlace* Turn, E_Aim* Aim, E_AnimBSMode* AnimBS_Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Character_ANX_C", "BPI_Get_States");

	Params::BPI_Character_ANX_C_BPI_Get_States Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Movement_Stage != nullptr)
		*Movement_Stage = Parms.Movement_Stage;

	if (Move_Type != nullptr)
		*Move_Type = Parms.Move_Type;

	if (Control_Mode != nullptr)
		*Control_Mode = Parms.Control_Mode;

	if (Base_Action != nullptr)
		*Base_Action = Parms.Base_Action;

	if (Action != nullptr)
		*Action = Parms.Action;

	if (Rest != nullptr)
		*Rest = Parms.Rest;

	if (Damage != nullptr)
		*Damage = Parms.Damage;

	if (Turn != nullptr)
		*Turn = Parms.Turn;

	if (Aim != nullptr)
		*Aim = Parms.Aim;

	if (AnimBS_Mode != nullptr)
		*AnimBS_Mode = Parms.AnimBS_Mode;
}

}

