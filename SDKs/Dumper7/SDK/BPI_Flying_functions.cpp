#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Flying

#include "Basic.hpp"

#include "BPI_Flying_classes.hpp"
#include "BPI_Flying_parameters.hpp"


namespace SDK
{

// Function BPI_Flying.BPI_Flying_C.Fly
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Flying_C::Fly(const struct FVector& TargetLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Flying_C", "Fly");

	Params::BPI_Flying_C_Fly Parms{};

	Parms.TargetLocation = std::move(TargetLocation);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Flying.BPI_Flying_C.IsFlying
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Flying                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Flying_C::IsFlying(bool* Flying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Flying_C", "IsFlying");

	Params::BPI_Flying_C_IsFlying Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Flying != nullptr)
		*Flying = Parms.Flying;
}

}

