#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_IK_ANX

#include "Basic.hpp"

#include "BPI_IK_ANX_classes.hpp"
#include "BPI_IK_ANX_parameters.hpp"


namespace SDK
{

// Function BPI_IK_ANX.BPI_IK_ANX_C.BPI_IK_Variables
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Loc___Hand__L_                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Loc___Hand__R_                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Loc___Foot__L_                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Loc___Foot__R_                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Loc___Pelvis                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Loc___Chest                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rot___Hand__L_                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator*                        Rot___Hand__R_                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator*                        Rot___Foot__L_                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator*                        Rot___Foot__R_                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double*                                 IK_Alpha___Hand                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 IK_Alpha___Foot                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 IK_Alpha___Spine                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Spine_Incline_F                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Spine_Incline_S                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_IK_ANX_C::BPI_IK_Variables(struct FVector* Loc___Hand__L_, struct FVector* Loc___Hand__R_, struct FVector* Loc___Foot__L_, struct FVector* Loc___Foot__R_, struct FVector* Loc___Pelvis, struct FVector* Loc___Chest, struct FRotator* Rot___Hand__L_, struct FRotator* Rot___Hand__R_, struct FRotator* Rot___Foot__L_, struct FRotator* Rot___Foot__R_, double* IK_Alpha___Hand, double* IK_Alpha___Foot, double* IK_Alpha___Spine, double* Spine_Incline_F, double* Spine_Incline_S)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_IK_ANX_C", "BPI_IK_Variables");

	Params::BPI_IK_ANX_C_BPI_IK_Variables Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Loc___Hand__L_ != nullptr)
		*Loc___Hand__L_ = std::move(Parms.Loc___Hand__L_);

	if (Loc___Hand__R_ != nullptr)
		*Loc___Hand__R_ = std::move(Parms.Loc___Hand__R_);

	if (Loc___Foot__L_ != nullptr)
		*Loc___Foot__L_ = std::move(Parms.Loc___Foot__L_);

	if (Loc___Foot__R_ != nullptr)
		*Loc___Foot__R_ = std::move(Parms.Loc___Foot__R_);

	if (Loc___Pelvis != nullptr)
		*Loc___Pelvis = std::move(Parms.Loc___Pelvis);

	if (Loc___Chest != nullptr)
		*Loc___Chest = std::move(Parms.Loc___Chest);

	if (Rot___Hand__L_ != nullptr)
		*Rot___Hand__L_ = std::move(Parms.Rot___Hand__L_);

	if (Rot___Hand__R_ != nullptr)
		*Rot___Hand__R_ = std::move(Parms.Rot___Hand__R_);

	if (Rot___Foot__L_ != nullptr)
		*Rot___Foot__L_ = std::move(Parms.Rot___Foot__L_);

	if (Rot___Foot__R_ != nullptr)
		*Rot___Foot__R_ = std::move(Parms.Rot___Foot__R_);

	if (IK_Alpha___Hand != nullptr)
		*IK_Alpha___Hand = Parms.IK_Alpha___Hand;

	if (IK_Alpha___Foot != nullptr)
		*IK_Alpha___Foot = Parms.IK_Alpha___Foot;

	if (IK_Alpha___Spine != nullptr)
		*IK_Alpha___Spine = Parms.IK_Alpha___Spine;

	if (Spine_Incline_F != nullptr)
		*Spine_Incline_F = Parms.Spine_Incline_F;

	if (Spine_Incline_S != nullptr)
		*Spine_Incline_S = Parms.Spine_Incline_S;
}

}

