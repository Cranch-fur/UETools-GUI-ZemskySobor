#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_NPC

#include "Basic.hpp"

#include "BPI_NPC_classes.hpp"
#include "BPI_NPC_parameters.hpp"


namespace SDK
{

// Function BPI_NPC.BPI_NPC_C.AddAggro
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_NPC_C::AddAggro(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPC_C", "AddAggro");

	Params::BPI_NPC_C_AddAggro Parms{};

	Parms.Target = Target;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NPC.BPI_NPC_C.GetDamageTargets
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FriendlyFire                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>*                  ActorsHit                                              (Parm, OutParm)

void IBPI_NPC_C::GetDamageTargets(bool FriendlyFire, TArray<class AActor*>* ActorsHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPC_C", "GetDamageTargets");

	Params::BPI_NPC_C_GetDamageTargets Parms{};

	Parms.FriendlyFire = FriendlyFire;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (ActorsHit != nullptr)
		*ActorsHit = std::move(Parms.ActorsHit);
}


// Function BPI_NPC.BPI_NPC_C.Interrupt
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NPC_C::Interrupt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPC_C", "Interrupt");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NPC.BPI_NPC_C.RemoveAggro
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_NPC_C::RemoveAggro(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPC_C", "RemoveAggro");

	Params::BPI_NPC_C_RemoveAggro Parms{};

	Parms.Target = Target;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NPC.BPI_NPC_C.WidgetHighlight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NPC_C::WidgetHighlight(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPC_C", "WidgetHighlight");

	Params::BPI_NPC_C_WidgetHighlight Parms{};

	Parms.Color = std::move(Color);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NPC.BPI_NPC_C.WidgetScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NPC_C::WidgetScale(double Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPC_C", "WidgetScale");

	Params::BPI_NPC_C_WidgetScale Parms{};

	Parms.Scale = Scale;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NPC.BPI_NPC_C.WidgetText
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)

void IBPI_NPC_C::WidgetText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPC_C", "WidgetText");

	Params::BPI_NPC_C_WidgetText Parms{};

	Parms.Text = std::move(Text);

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

