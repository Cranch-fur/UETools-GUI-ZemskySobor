#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_TrackingCamera

#include "Basic.hpp"

#include "BPI_TrackingCamera_classes.hpp"
#include "BPI_TrackingCamera_parameters.hpp"


namespace SDK
{

// Function BPI_TrackingCamera.BPI_TrackingCamera_C.InvestigationCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           FocusToActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  TrackingTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayAbilitySpecHandle&AbilityHandle                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// EInvestigationTrackingMode              TrackingMode                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_TrackingCamera_C::InvestigationCamera(class AActor* FocusToActor, double TrackingTime, const struct FGameplayAbilitySpecHandle& AbilityHandle, EInvestigationTrackingMode TrackingMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_TrackingCamera_C", "InvestigationCamera");

	Params::BPI_TrackingCamera_C_InvestigationCamera Parms{};

	Parms.FocusToActor = FocusToActor;
	Parms.TrackingTime = TrackingTime;
	Parms.AbilityHandle = std::move(AbilityHandle);
	Parms.TrackingMode = TrackingMode;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_TrackingCamera.BPI_TrackingCamera_C.TrackingCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           FocusToActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  TrackingTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayAbilitySpecHandle&AbilityHandle                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// double                                  StartPitchOffset                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  StartYawOffset                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InPitchOffset                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InYawOffset                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_TrackingCamera_C::TrackingCamera(class AActor* FocusToActor, double TrackingTime, const struct FGameplayAbilitySpecHandle& AbilityHandle, double StartPitchOffset, double StartYawOffset, double InPitchOffset, double InYawOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_TrackingCamera_C", "TrackingCamera");

	Params::BPI_TrackingCamera_C_TrackingCamera Parms{};

	Parms.FocusToActor = FocusToActor;
	Parms.TrackingTime = TrackingTime;
	Parms.AbilityHandle = std::move(AbilityHandle);
	Parms.StartPitchOffset = StartPitchOffset;
	Parms.StartYawOffset = StartYawOffset;
	Parms.InPitchOffset = InPitchOffset;
	Parms.InYawOffset = InYawOffset;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

