#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GD_Library

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "InventorySystemModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GD_Library.BP_GD_Library_C
// 0x0000 (0x0028 - 0x0028)
class UBP_GD_Library_C final : public UBlueprintFunctionLibrary
{
public:
	static void CheckForRealObjects(TArray<struct FHitResult>& Hits, bool Hited, class UObject* __WorldContext, bool* IsBlocked);
	static void CheckZDelta(class ACharacter* InPlayer, class ACharacter* Enemy, class UObject* __WorldContext, bool* CanFinish);
	static void ClearAllQuestMarkers(class UObject* __WorldContext);
	static void GetBPGameMode(class UObject* __WorldContext, class ABP_GameMode_C** AsBP_Game_Mode);
	static void GetDlgComponent(class UObject* __WorldContext, class UBPC_Dialogues_C** BPC_Dialogues, bool* Success);
	static void GetParticipantBoolValue(class UObject* Participant, class FName Variable_Name, class UObject* __WorldContext, bool* Value);
	static void GetParticipantIntValue(class UObject* Participant, class FName Variable_Name, class UObject* __WorldContext, int32* Value);
	static void GetPlayerBoolValue(class FName Variable_Name, class UObject* __WorldContext, bool* Value);
	static void GetPlayerIntValue(class FName Variable_Name, class UObject* __WorldContext, int32* Value);
	static void GetQuestIntVar(const class FString& VariableName, class UObject* __WorldContext, int32* Int_Var, bool* Valid);
	static void GetSmutaInstance(class UObject* __WorldContext, class UBP_SmutaInstance_C** AsBP_Smuta_Instance);
	static void HasDialogueData(class UObject* __WorldContext, bool* Has);
	static void ModifyParticipantBoolValue(class UObject* Participiant, class FName VariableName, bool Value, class UObject* __WorldContext, bool* NewValue);
	static void ModifyParticipantIntValue(class UObject* Participiant, class FName VariableName, int32 Value, bool Add, class UObject* __WorldContext, int32* NewValue);
	static void ModifyPlayerBoolValue(class FName VariableName, bool Value, class UObject* __WorldContext, bool* NewValue);
	static void ModifyPlayerIntValue(class FName VariableName, int32 Value, bool Add, class UObject* __WorldContext, int32* NewValue);
	static void Open_Level(const TSoftObjectPtr<class UWorld> Level, class UObject* __WorldContext);
	static void PlaySequence(class ULevelSequence* Sequence, float PlayRate, class UObject* __WorldContext, class ULevelSequencePlayer** Player);
	static void PlaySequenceWithEvent(class ULevelSequence* Sequence, float PlayRate, const TDelegate<void()>& OnFinished, class UObject* __WorldContext, class ULevelSequencePlayer** Player);
	static void ResetDialogueData(class UObject* __WorldContext);
	static void Rotate_Actor_1_To_Actor_2(class AActor* Actor1, class AActor* Actor2, class UObject* __WorldContext);
	static void RotateActorToPlayer(class AActor* Actor, class UObject* __WorldContext);
	static void SendQuestEvent(const class FString& Param, class FName IntVarName, class UObject* __WorldContext);
	static void SetGlobalIntVar(const class FString& VarName, int32 VarValue, class UObject* __WorldContext, bool* Success);
	static void SetHidden(class AActor* Actor, bool Hidden, class UObject* __WorldContext);
	static void SetInkStoryIntVar(const class FString& VarName, int32 VarValue, class UObject* __WorldContext, bool* Success);
	static void SetPlayerCameraRotation(const struct FRotator& NewRotation, class UObject* __WorldContext);
	static void SetQuestProgress(class FName QuestProgressVariable, int32 Value, bool Add, bool NotifyTracker, class UObject* __WorldContext, int32* NewValue);
	static void ShowLevel(class FName LevelName, bool Should_be_Visible, class UObject* __WorldContext, class ULevelStreaming** Level, bool* IsVisible);
	static void ShowLevels(TArray<class FName>& LevelName, bool Should_be_Visible, class UObject* __WorldContext);
	static void ShowStory(class UObject* __WorldContext);
	static void StartDialogue(class ANPC_CH_C* NPC, class UObject* __WorldContext);
	static void StartQuest(class UDlgDialogue* QuestDialogueAsset, class UObject* __WorldContext);
	static void StartQuestAtProgress(class UDlgDialogue* QuestDialogueAsset, class FName ProgressVariable, int32 ProgressValue, class UObject* __WorldContext);
	static void Teleport(class AActor* Actor, class AActor* Target, class UObject* __WorldContext);
	static void TeleportPlayer(class AActor* Target, bool IsRestart, class UObject* __WorldContext);
	static void TeleportPlayerToTransform(const struct FTransform& Target, class UObject* __WorldContext);
	static void ToggleMarker(class FName MarkerID, bool Enable, class UObject* __WorldContext);
	static void UpdateLevelVisited(const class FString& Level, class UObject* __WorldContext, bool* prevVisited);
	static void UpdateQuestJournal(class UObject* __WorldContext);
	static void UpdateQuestMarker(class FName MarkerID, bool Enabled, bool ShowOnMinimap, class UObject* __WorldContext);

	void Check_and_Start_Finisher(class AActor* Instigator, class AActor* Corpse, class UObject* __WorldContext, bool* Success);
	void CheckPlaceForFinishAndTeleport(class AActor* InPlayer, class AActor* Enemy, class UObject* __WorldContext, bool* CanFinish);
	void No_More_Enemies_in_Radius(class AActor* Player, double Radius, class UObject* __WorldContext, bool* IsLast);

public:
	static class UClass* StaticClass()
	{
		BP_STATIC_CLASS_IMPL("BP_GD_Library_C")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BP_GD_Library_C")
	}
	static class UBP_GD_Library_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GD_Library_C>();
	}
};
DUMPER7_ASSERTS_UBP_GD_Library_C;

}

