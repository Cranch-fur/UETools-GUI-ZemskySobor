#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineVolumeBase

#include "Basic.hpp"

#include "BP_SplineVolumeBase_classes.hpp"
#include "BP_SplineVolumeBase_parameters.hpp"


namespace SDK
{

// Function BP_SplineVolumeBase.BP_SplineVolumeBase_C.BeginOverlapEvent
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_SplineVolumeBase_C::BeginOverlapEvent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeBase_C", "BeginOverlapEvent");

	Params::BP_SplineVolumeBase_C_BeginOverlapEvent Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineVolumeBase.BP_SplineVolumeBase_C.BindOverlapEvent
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeBase_C::BindOverlapEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeBase_C", "BindOverlapEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeBase.BP_SplineVolumeBase_C.CalcRotation Offset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FQuat&                     RVector                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ABP_SplineVolumeBase_C::CalcRotation_Offset(const struct FVector& Location, const struct FQuat& RVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeBase_C", "CalcRotation Offset");

	Params::BP_SplineVolumeBase_C_CalcRotation_Offset Parms{};

	Parms.Location = std::move(Location);
	Parms.RVector = std::move(RVector);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SplineVolumeBase.BP_SplineVolumeBase_C.ChangeTagEventOnOverlap
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              UpdatedTag                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// bool                                    Exists                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineVolumeBase_C::ChangeTagEventOnOverlap(const struct FGameplayTag& UpdatedTag, bool Exists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeBase_C", "ChangeTagEventOnOverlap");

	Params::BP_SplineVolumeBase_C_ChangeTagEventOnOverlap Parms{};

	Parms.UpdatedTag = std::move(UpdatedTag);
	Parms.Exists = Exists;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineVolumeBase.BP_SplineVolumeBase_C.Check Actor Inside
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Inside                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineVolumeBase_C::Check_Actor_Inside(class AActor* Target, bool* Inside)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeBase_C", "Check Actor Inside");

	Params::BP_SplineVolumeBase_C_Check_Actor_Inside Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	if (Inside != nullptr)
		*Inside = Parms.Inside;
}


// Function BP_SplineVolumeBase.BP_SplineVolumeBase_C.CheckPlayerInside
// (BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeBase_C::CheckPlayerInside()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeBase_C", "CheckPlayerInside");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeBase.BP_SplineVolumeBase_C.CheckValidTag
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeBase_C::CheckValidTag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeBase_C", "CheckValidTag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeBase.BP_SplineVolumeBase_C.ExecuteUbergraph_BP_SplineVolumeBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineVolumeBase_C::ExecuteUbergraph_BP_SplineVolumeBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeBase_C", "ExecuteUbergraph_BP_SplineVolumeBase");

	Params::BP_SplineVolumeBase_C_ExecuteUbergraph_BP_SplineVolumeBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineVolumeBase.BP_SplineVolumeBase_C.GetSplineCollision
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeBase_C::GetSplineCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeBase_C", "GetSplineCollision");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeBase.BP_SplineVolumeBase_C.OnLevelChanged
// (BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeBase_C::OnLevelChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeBase_C", "OnLevelChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeBase.BP_SplineVolumeBase_C.OutOverlap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineVolumeBase_C::OutOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeBase_C", "OutOverlap");

	Params::BP_SplineVolumeBase_C_OutOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineVolumeBase.BP_SplineVolumeBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_SplineVolumeBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeBase.BP_SplineVolumeBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineVolumeBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeBase_C", "ReceiveTick");

	Params::BP_SplineVolumeBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineVolumeBase.BP_SplineVolumeBase_C.SetSprite
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeBase_C::SetSprite()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeBase_C", "SetSprite");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeBase.BP_SplineVolumeBase_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeBase_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeBase_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

