#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTD_CheckIsSplineAvailable

#include "Basic.hpp"

#include "BTD_CheckIsSplineAvailable_classes.hpp"
#include "BTD_CheckIsSplineAvailable_parameters.hpp"


namespace SDK
{

// Function BTD_CheckIsSplineAvailable.BTD_CheckIsSplineAvailable_C.ExecuteUbergraph_BTD_CheckIsSplineAvailable
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTD_CheckIsSplineAvailable_C::ExecuteUbergraph_BTD_CheckIsSplineAvailable(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTD_CheckIsSplineAvailable_C", "ExecuteUbergraph_BTD_CheckIsSplineAvailable");

	Params::BTD_CheckIsSplineAvailable_C_ExecuteUbergraph_BTD_CheckIsSplineAvailable Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTD_CheckIsSplineAvailable.BTD_CheckIsSplineAvailable_C.OnSplineFinished
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ASplineActor*                     CurrentSplineActor                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTD_CheckIsSplineAvailable_C::OnSplineFinished(class AAIController* OwnerController, class ASplineActor* CurrentSplineActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTD_CheckIsSplineAvailable_C", "OnSplineFinished");

	Params::BTD_CheckIsSplineAvailable_C_OnSplineFinished Parms{};

	Parms.OwnerController = OwnerController;
	Parms.CurrentSplineActor = CurrentSplineActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTD_CheckIsSplineAvailable.BTD_CheckIsSplineAvailable_C.OnSplineStarted
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ASplineActor*                     CurrentSplineActor                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTD_CheckIsSplineAvailable_C::OnSplineStarted(class AAIController* OwnerController, class ASplineActor* CurrentSplineActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTD_CheckIsSplineAvailable_C", "OnSplineStarted");

	Params::BTD_CheckIsSplineAvailable_C_OnSplineStarted Parms{};

	Parms.OwnerController = OwnerController;
	Parms.CurrentSplineActor = CurrentSplineActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTD_CheckIsSplineAvailable.BTD_CheckIsSplineAvailable_C.PerformConditionCheckAI
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBTD_CheckIsSplineAvailable_C::PerformConditionCheckAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTD_CheckIsSplineAvailable_C", "PerformConditionCheckAI");

	Params::BTD_CheckIsSplineAvailable_C_PerformConditionCheckAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BTD_CheckIsSplineAvailable.BTD_CheckIsSplineAvailable_C.ReceiveExecutionStartAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTD_CheckIsSplineAvailable_C::ReceiveExecutionStartAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTD_CheckIsSplineAvailable_C", "ReceiveExecutionStartAI");

	Params::BTD_CheckIsSplineAvailable_C_ReceiveExecutionStartAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}

}

