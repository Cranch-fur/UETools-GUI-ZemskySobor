#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommandExtention

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class CommandExtention.HourglassMechanism
// 0x0028 (0x0050 - 0x0028)
class UHourglassMechanism final : public UObject
{
public:
	float                                         TimePassed;                                        // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Ratio;                                             // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              TimeChangingFinishedDelegate;                      // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeRatio(const float NewRatio);
	void ChangeTime(float NewTime);
	void ChangeValue(bool bNewValue);
	void ForceFinishValueChangingInstantly();
	void Update(const float InDeltaTime);

	bool IsChangingState() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HourglassMechanism")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HourglassMechanism")
	}
	static class UHourglassMechanism* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHourglassMechanism>();
	}
};
DUMPER7_ASSERTS_UHourglassMechanism;

// Class CommandExtention.PlayMontageCallbackProxyBase
// 0x0080 (0x00A8 - 0x0028)
class UPlayMontageCallbackProxyBase final : public UObject
{
public:
	TMulticastInlineDelegate<void(class FName NotifyName, const class UAnimNotifyState* AnimNotifyState)> OnCompleted; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName NotifyName, const class UAnimNotifyState* AnimNotifyState)> OnBlendOut; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName NotifyName, const class UAnimNotifyState* AnimNotifyState)> OnInterrupted; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName NotifyName, const class UAnimNotifyState* AnimNotifyState)> OnNotifyBegin; // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName NotifyName, const class UAnimNotifyState* AnimNotifyState)> OnNotifyEnd; // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x30];                                      // 0x0078(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPlayMontageCallbackProxyBase* CreateProxyObjectForPlayMontage(class USkeletalMeshComponent* InSkeletalMeshComponent, class UAnimMontage* MontageToPlay, float PlayRate, float StartingPosition, class FName StartingSection);

	void OnMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OnNotifyBeginReceived(class FName NotifyName, const struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload);
	void OnNotifyEndReceived(class FName NotifyName, const struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlayMontageCallbackProxyBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlayMontageCallbackProxyBase")
	}
	static class UPlayMontageCallbackProxyBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayMontageCallbackProxyBase>();
	}
};
DUMPER7_ASSERTS_UPlayMontageCallbackProxyBase;

// Class CommandExtention.RandomSequencePlayerLibrary
// 0x0000 (0x0028 - 0x0028)
class URandomSequencePlayerLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FRandomSequencePlayerReference ConvertToRandomPlayer(const struct FAnimNodeReference& Node, EAnimNodeReferenceConversionResult* Result);
	static void ConvertToRandomPlayerPure(const struct FAnimNodeReference& Node, struct FRandomSequencePlayerReference* SequencePlayer, bool* Result);
	static float GetAccumulatedTime(const struct FRandomSequencePlayerReference& SequencePlayer);
	static struct FRandomAnimPlayDataExt GetPlayData(const struct FRandomSequencePlayerReference& SequencePlayer);
	static float GetPlayTime(const struct FRandomSequencePlayerReference& SequencePlayer);
	static struct FRandomSequencePlayerReference GetSequence(const struct FRandomSequencePlayerReference& SequencePlayer, class UAnimSequenceBase*& SequenceBase);
	static class UAnimSequenceBase* GetSequencePure(const struct FRandomSequencePlayerReference& SequencePlayer);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RandomSequencePlayerLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RandomSequencePlayerLibrary")
	}
	static class URandomSequencePlayerLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<URandomSequencePlayerLibrary>();
	}
};
DUMPER7_ASSERTS_URandomSequencePlayerLibrary;

}

