#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CompBP_IK_ANX

#include "Basic.hpp"

#include "CompBP_IK_ANX_classes.hpp"
#include "CompBP_IK_ANX_parameters.hpp"


namespace SDK
{

// Function CompBP_IK_ANX.CompBP_IK_ANX_C.BPI_Get_Animation_Info
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 Aim_Alpha                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Aim_Yaw                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Aim_Pitch                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Play_Breathe                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Lean_Drink                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Play_Random_Idle                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Play_Blink                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Play_Ears_Twitch                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Index___Ears                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Index___Idle                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  index___Attack                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCompBP_IK_ANX_C::BPI_Get_Animation_Info(double* Aim_Alpha, double* Aim_Yaw, double* Aim_Pitch, double* Play_Breathe, double* Lean_Drink, bool* Play_Random_Idle, bool* Play_Blink, bool* Play_Ears_Twitch, int32* Index___Ears, int32* Index___Idle, int32* index___Attack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompBP_IK_ANX_C", "BPI_Get_Animation_Info");

	Params::CompBP_IK_ANX_C_BPI_Get_Animation_Info Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Aim_Alpha != nullptr)
		*Aim_Alpha = Parms.Aim_Alpha;

	if (Aim_Yaw != nullptr)
		*Aim_Yaw = Parms.Aim_Yaw;

	if (Aim_Pitch != nullptr)
		*Aim_Pitch = Parms.Aim_Pitch;

	if (Play_Breathe != nullptr)
		*Play_Breathe = Parms.Play_Breathe;

	if (Lean_Drink != nullptr)
		*Lean_Drink = Parms.Lean_Drink;

	if (Play_Random_Idle != nullptr)
		*Play_Random_Idle = Parms.Play_Random_Idle;

	if (Play_Blink != nullptr)
		*Play_Blink = Parms.Play_Blink;

	if (Play_Ears_Twitch != nullptr)
		*Play_Ears_Twitch = Parms.Play_Ears_Twitch;

	if (Index___Ears != nullptr)
		*Index___Ears = Parms.Index___Ears;

	if (Index___Idle != nullptr)
		*Index___Idle = Parms.Index___Idle;

	if (index___Attack != nullptr)
		*index___Attack = Parms.index___Attack;
}


// Function CompBP_IK_ANX.CompBP_IK_ANX_C.BPI_Get_Movement_Info
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 Output_X                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Output_Y                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Play_Rate                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Turn_Rate                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Has_Move_Input                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Jump_in_Place                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Go_Jump                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Go_Swim                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Go_Turn                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Go_Fall                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   go_Land                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCompBP_IK_ANX_C::BPI_Get_Movement_Info(double* Output_X, double* Output_Y, double* Play_Rate, double* Turn_Rate, bool* Has_Move_Input, bool* Jump_in_Place, bool* Go_Jump, bool* Go_Swim, bool* Go_Turn, bool* Go_Fall, bool* go_Land)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompBP_IK_ANX_C", "BPI_Get_Movement_Info");

	Params::CompBP_IK_ANX_C_BPI_Get_Movement_Info Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Output_X != nullptr)
		*Output_X = Parms.Output_X;

	if (Output_Y != nullptr)
		*Output_Y = Parms.Output_Y;

	if (Play_Rate != nullptr)
		*Play_Rate = Parms.Play_Rate;

	if (Turn_Rate != nullptr)
		*Turn_Rate = Parms.Turn_Rate;

	if (Has_Move_Input != nullptr)
		*Has_Move_Input = Parms.Has_Move_Input;

	if (Jump_in_Place != nullptr)
		*Jump_in_Place = Parms.Jump_in_Place;

	if (Go_Jump != nullptr)
		*Go_Jump = Parms.Go_Jump;

	if (Go_Swim != nullptr)
		*Go_Swim = Parms.Go_Swim;

	if (Go_Turn != nullptr)
		*Go_Turn = Parms.Go_Turn;

	if (Go_Fall != nullptr)
		*Go_Fall = Parms.Go_Fall;

	if (go_Land != nullptr)
		*go_Land = Parms.go_Land;
}


// Function CompBP_IK_ANX.CompBP_IK_ANX_C.BPI_Get_States
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_MovementStage*                        Movement_Stage                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MoveType*                             Move_Type                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_ControlMode*                          Control_Mode                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BaseAction*                           Base_Action                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Action*                               Action                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Rest*                                 Rest                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Damage*                               Damage                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_TurnInPlace*                          Turn                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Aim*                                  Aim                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_AnimBSMode*                           AnimBS_Mode                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCompBP_IK_ANX_C::BPI_Get_States(E_MovementStage* Movement_Stage, E_MoveType* Move_Type, E_ControlMode* Control_Mode, E_BaseAction* Base_Action, E_Action* Action, E_Rest* Rest, E_Damage* Damage, E_TurnInPlace* Turn, E_Aim* Aim, E_AnimBSMode* AnimBS_Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompBP_IK_ANX_C", "BPI_Get_States");

	Params::CompBP_IK_ANX_C_BPI_Get_States Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Movement_Stage != nullptr)
		*Movement_Stage = Parms.Movement_Stage;

	if (Move_Type != nullptr)
		*Move_Type = Parms.Move_Type;

	if (Control_Mode != nullptr)
		*Control_Mode = Parms.Control_Mode;

	if (Base_Action != nullptr)
		*Base_Action = Parms.Base_Action;

	if (Action != nullptr)
		*Action = Parms.Action;

	if (Rest != nullptr)
		*Rest = Parms.Rest;

	if (Damage != nullptr)
		*Damage = Parms.Damage;

	if (Turn != nullptr)
		*Turn = Parms.Turn;

	if (Aim != nullptr)
		*Aim = Parms.Aim;

	if (AnimBS_Mode != nullptr)
		*AnimBS_Mode = Parms.AnimBS_Mode;
}


// Function CompBP_IK_ANX.CompBP_IK_ANX_C.BPI_IK_Variables
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Loc___Hand__L__0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Loc___Hand__R__0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Loc___Foot__L__0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Loc___Foot__R__0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Loc___Pelvis_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Loc___Chest_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rot___Hand__L__0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator*                        Rot___Hand__R__0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator*                        Rot___Foot__L__0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator*                        Rot___Foot__R__0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double*                                 IK_Alpha___Hand_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 IK_Alpha___Foot_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 IK_Alpha___Spine_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Spine_Incline_F_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Spine_Incline_S_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCompBP_IK_ANX_C::BPI_IK_Variables(struct FVector* Loc___Hand__L__0, struct FVector* Loc___Hand__R__0, struct FVector* Loc___Foot__L__0, struct FVector* Loc___Foot__R__0, struct FVector* Loc___Pelvis_0, struct FVector* Loc___Chest_0, struct FRotator* Rot___Hand__L__0, struct FRotator* Rot___Hand__R__0, struct FRotator* Rot___Foot__L__0, struct FRotator* Rot___Foot__R__0, double* IK_Alpha___Hand_0, double* IK_Alpha___Foot_0, double* IK_Alpha___Spine_0, double* Spine_Incline_F_0, double* Spine_Incline_S_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompBP_IK_ANX_C", "BPI_IK_Variables");

	Params::CompBP_IK_ANX_C_BPI_IK_Variables Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Loc___Hand__L__0 != nullptr)
		*Loc___Hand__L__0 = std::move(Parms.Loc___Hand__L__0);

	if (Loc___Hand__R__0 != nullptr)
		*Loc___Hand__R__0 = std::move(Parms.Loc___Hand__R__0);

	if (Loc___Foot__L__0 != nullptr)
		*Loc___Foot__L__0 = std::move(Parms.Loc___Foot__L__0);

	if (Loc___Foot__R__0 != nullptr)
		*Loc___Foot__R__0 = std::move(Parms.Loc___Foot__R__0);

	if (Loc___Pelvis_0 != nullptr)
		*Loc___Pelvis_0 = std::move(Parms.Loc___Pelvis_0);

	if (Loc___Chest_0 != nullptr)
		*Loc___Chest_0 = std::move(Parms.Loc___Chest_0);

	if (Rot___Hand__L__0 != nullptr)
		*Rot___Hand__L__0 = std::move(Parms.Rot___Hand__L__0);

	if (Rot___Hand__R__0 != nullptr)
		*Rot___Hand__R__0 = std::move(Parms.Rot___Hand__R__0);

	if (Rot___Foot__L__0 != nullptr)
		*Rot___Foot__L__0 = std::move(Parms.Rot___Foot__L__0);

	if (Rot___Foot__R__0 != nullptr)
		*Rot___Foot__R__0 = std::move(Parms.Rot___Foot__R__0);

	if (IK_Alpha___Hand_0 != nullptr)
		*IK_Alpha___Hand_0 = Parms.IK_Alpha___Hand_0;

	if (IK_Alpha___Foot_0 != nullptr)
		*IK_Alpha___Foot_0 = Parms.IK_Alpha___Foot_0;

	if (IK_Alpha___Spine_0 != nullptr)
		*IK_Alpha___Spine_0 = Parms.IK_Alpha___Spine_0;

	if (Spine_Incline_F_0 != nullptr)
		*Spine_Incline_F_0 = Parms.Spine_Incline_F_0;

	if (Spine_Incline_S_0 != nullptr)
		*Spine_Incline_S_0 = Parms.Spine_Incline_S_0;
}


// Function CompBP_IK_ANX.CompBP_IK_ANX_C.ExecuteUbergraph_CompBP_IK_ANX
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCompBP_IK_ANX_C::ExecuteUbergraph_CompBP_IK_ANX(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompBP_IK_ANX_C", "ExecuteUbergraph_CompBP_IK_ANX");

	Params::CompBP_IK_ANX_C_ExecuteUbergraph_CompBP_IK_ANX Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CompBP_IK_ANX.CompBP_IK_ANX_C.Interp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InterpSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double&                                 Current                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCompBP_IK_ANX_C::Interp(double InterpSpeed, double& Current, double Target, double* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompBP_IK_ANX_C", "Interp");

	Params::CompBP_IK_ANX_C_Interp Parms{};

	Parms.InterpSpeed = InterpSpeed;
	Parms.Current = Current;
	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	Current = Parms.Current;

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function CompBP_IK_ANX.CompBP_IK_ANX_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UCompBP_IK_ANX_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompBP_IK_ANX_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CompBP_IK_ANX.CompBP_IK_ANX_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCompBP_IK_ANX_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompBP_IK_ANX_C", "ReceiveTick");

	Params::CompBP_IK_ANX_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CompBP_IK_ANX.CompBP_IK_ANX_C.SetFootOffset
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             IKFootBone                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector&                         Offset_Loc__target_                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector&                         Offset_Loc                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator&                        Offset_Rot                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// bool                                    Foot                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCompBP_IK_ANX_C::SetFootOffset(class FName IKFootBone, struct FVector& Offset_Loc__target_, struct FVector& Offset_Loc, struct FRotator& Offset_Rot, bool Foot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompBP_IK_ANX_C", "SetFootOffset");

	Params::CompBP_IK_ANX_C_SetFootOffset Parms{};

	Parms.IKFootBone = IKFootBone;
	Parms.Offset_Loc__target_ = std::move(Offset_Loc__target_);
	Parms.Offset_Loc = std::move(Offset_Loc);
	Parms.Offset_Rot = std::move(Offset_Rot);
	Parms.Foot = Foot;

	UObject::ProcessEvent(Func, &Parms);

	Offset_Loc__target_ = std::move(Parms.Offset_Loc__target_);
	Offset_Loc = std::move(Parms.Offset_Loc);
	Offset_Rot = std::move(Parms.Offset_Rot);
}


// Function CompBP_IK_ANX.CompBP_IK_ANX_C.SetPelvisOffset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector&                         CurrentPelvisOffset                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Offset_Loc_L_Target                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Offset_Loc_R_Target                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCompBP_IK_ANX_C::SetPelvisOffset(struct FVector& CurrentPelvisOffset, const struct FVector& Offset_Loc_L_Target, const struct FVector& Offset_Loc_R_Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompBP_IK_ANX_C", "SetPelvisOffset");

	Params::CompBP_IK_ANX_C_SetPelvisOffset Parms{};

	Parms.CurrentPelvisOffset = std::move(CurrentPelvisOffset);
	Parms.Offset_Loc_L_Target = std::move(Offset_Loc_L_Target);
	Parms.Offset_Loc_R_Target = std::move(Offset_Loc_R_Target);

	UObject::ProcessEvent(Func, &Parms);

	CurrentPelvisOffset = std::move(Parms.CurrentPelvisOffset);
}


// Function CompBP_IK_ANX.CompBP_IK_ANX_C.SetToeRot
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             IKFootBone                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Offset_Rot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCompBP_IK_ANX_C::SetToeRot(class FName IKFootBone, const struct FRotator& Offset_Rot, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompBP_IK_ANX_C", "SetToeRot");

	Params::CompBP_IK_ANX_C_SetToeRot Parms{};

	Parms.IKFootBone = IKFootBone;
	Parms.Offset_Rot = std::move(Offset_Rot);
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}

}

