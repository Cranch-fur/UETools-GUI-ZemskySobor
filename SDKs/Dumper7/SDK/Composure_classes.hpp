#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Composure

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "MovieScene_structs.hpp"
#include "MovieScene_classes.hpp"
#include "Composure_structs.hpp"
#include "OpenColorIO_structs.hpp"
#include "MovieSceneTracks_classes.hpp"


namespace SDK
{

// Class Composure.CompEditorImagePreviewInterface
// 0x0000 (0x0000 - 0x0000)
class ICompEditorImagePreviewInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompEditorImagePreviewInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompEditorImagePreviewInterface")
	}
	static class ICompEditorImagePreviewInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICompEditorImagePreviewInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ICompEditorImagePreviewInterface;

// Class Composure.CompImageColorPickerInterface
// 0x0000 (0x0000 - 0x0000)
class ICompImageColorPickerInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompImageColorPickerInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompImageColorPickerInterface")
	}
	static class ICompImageColorPickerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICompImageColorPickerInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ICompImageColorPickerInterface;

// Class Composure.ComposurePipelineBaseActor
// 0x0018 (0x02B0 - 0x0298)
class AComposurePipelineBaseActor : public AActor
{
public:
	bool                                          bAutoRun;                                          // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoRunChildElementsAndSelf;                      // 0x0299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29A[0x16];                                     // 0x029A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnqueueRendering(bool bCameraCutThisFrame);
	void SetAutoRun(bool bNewAutoRunVal);
	void SetAutoRunChildrenAndSelf(bool bAutoRunChildAndSelf);

	bool AreChildrenAndSelfAutoRun() const;
	bool IsActivelyRunning() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComposurePipelineBaseActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComposurePipelineBaseActor")
	}
	static class AComposurePipelineBaseActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AComposurePipelineBaseActor>();
	}
};
DUMPER7_ASSERTS_AComposurePipelineBaseActor;

// Class Composure.CompositingElement
// 0x02D8 (0x0588 - 0x02B0)
class ACompositingElement : public AComposurePipelineBaseActor
{
public:
	uint8                                         Pad_2B0[0x8];                                      // 0x02B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UComposureCompositingTargetComponent*   CompositingTarget;                                 // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UComposurePostProcessingPassProxy*      PostProcessProxy;                                  // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UCompositingElementInput*>       Inputs;                                            // 0x02C8(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UCompositingElementTransform*>   TransformPasses;                                   // 0x02D8(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UCompositingElementOutput*>      Outputs;                                           // 0x02E8(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	ESceneCameraLinkType                          CameraSource;                                      // 0x02F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TLazyObjectPtr<class ACameraActor>            TargetCameraActor;                                 // 0x02FC(0x0018)(Edit, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInheritedSourceType                          ResolutionSource;                                  // 0x0314(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              RenderResolution;                                  // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextureRenderTargetFormat                    RenderFormat;                                      // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSharedTargetPool;                              // 0x0321(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_322[0x36];                                     // 0x0322(0x0036)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FreezeFrameMask;                                   // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ACompositingElement* CompElement, class UTexture* Texture, class FName PassName)> OnTransformPassRendered_BP; // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ACompositingElement* CompElement, class UTexture* Texture)> OnFinalPassRendered_BP; // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class FName                                   CompShotIdName;                                    // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ACompositingElement*                    Parent;                                            // 0x0388(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ACompositingElement*>            ChildLayers;                                       // 0x0390(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A0[0x4];                                      // 0x03A0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutputOpacity;                                     // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class UCompositingElementInput*, ECompPassConstructionType> UserConstructedInputs;          // 0x03A8(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class UCompositingElementTransform*, ECompPassConstructionType> UserConstructedTransforms;  // 0x03F8(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class UCompositingElementOutput*, ECompPassConstructionType> UserConstructedOutputs;        // 0x0448(0x0050)(NativeAccessSpecifierPrivate)
	TArray<class UCompositingElementInput*>       InternalInputs;                                    // 0x0498(0x0010)(ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UCompositingElementTransform*>   InternalTransformPasses;                           // 0x04A8(0x0010)(ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UCompositingElementOutput*>      InternalOutputs;                                   // 0x04B8(0x0010)(ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UAlphaTransformPass*                    InternalAlphaPass;                                 // 0x04C8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4D0[0xB8];                                     // 0x04D0(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UCompositingElementInput* AddNewInputPass(class FName PassName, TSubclassOf<class UCompositingElementInput> InputType);
	class UCompositingElementOutput* AddNewOutputPass(class FName PassName, TSubclassOf<class UCompositingElementOutput> OutputType);
	class UCompositingElementTransform* AddNewTransformPass(class FName PassName, TSubclassOf<class UCompositingElementTransform> TransformType);
	class UCompositingElementInput* CreateNewInputPass(class FName PassName, TSubclassOf<class UCompositingElementInput> InputType);
	class UCompositingElementOutput* CreateNewOutputPass(class FName PassName, TSubclassOf<class UCompositingElementOutput> OutputType);
	class UCompositingElementTransform* CreateNewTransformPass(class FName PassName, TSubclassOf<class UCompositingElementTransform> TransformType);
	bool DeletePass(class UCompositingElementPass* PassToDelete);
	class UCompositingElementInput* FindInputPass(TSubclassOf<class UCompositingElementInput> InputType, class UTexture** PassResult, class FName OptionalPassName);
	class UTexture* FindNamedRenderResult(class FName PassName, bool bSearchSubElements);
	class UCompositingElementOutput* FindOutputPass(TSubclassOf<class UCompositingElementOutput> OutputType, class FName OptionalPassName);
	class UCompositingElementTransform* FindTransformPass(TSubclassOf<class UCompositingElementTransform> TransformType, class UTexture** PassResult, class FName OptionalPassName);
	void RegisterPassResult(class FName ReferenceName, class UTexture* PassResult, bool bSetAsLatestRenderResult);
	bool ReleaseOwnedTarget(class UTextureRenderTarget2D* OwnedTarget);
	class UTexture* RenderCompElement(bool bCameraCutThisFrame);
	class UTexture* RenderCompositingMaterial(struct FCompositingMaterial& CompMaterial, float RenderScale, class FName ResultLookupName, ETargetUsageFlags UsageTag);
	class UTextureRenderTarget2D* RenderCompositingMaterialToTarget(struct FCompositingMaterial& CompMaterial, class UTextureRenderTarget2D* RenderTarget, class FName ResultLookupName);
	class UTextureRenderTarget2D* RequestNamedRenderTarget(const class FName ReferenceName, const float RenderPercentage, ETargetUsageFlags UsageTag);
	void SetEditorColorPickerDisplayImage(class UTexture* PickerDisplayImage);
	void SetEditorColorPickingTarget(class UTextureRenderTarget2D* PickingTarget);
	void SetElementName(const class FName NewName);
	void SetOpacity(const float NewOpacity);
	void SetRenderResolution(const struct FIntPoint& NewResolution);
	void SetTargetCamera(class ACameraActor* NewCameraActor);

	class ACameraActor* FindTargetCamera() const;
	const TArray<class ACompositingElement*> GetChildElements() const;
	class FName GetCompElementName() const;
	class ACompositingElement* GetElementParent() const;
	TArray<class UCompositingElementInput*> GetInputsList() const;
	class UTexture* GetLatestRenderResult() const;
	float GetOpacity() const;
	TArray<class UCompositingElementOutput*> GetOutputsList() const;
	int32 GetRenderPriority() const;
	struct FIntPoint GetRenderResolution() const;
	TArray<class UCompositingElementTransform*> GetTransformsList() const;
	bool IsSubElement() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompositingElement")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompositingElement")
	}
	static class ACompositingElement* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACompositingElement>();
	}
};
DUMPER7_ASSERTS_ACompositingElement;

// Class Composure.CompositingCaptureBase
// 0x0048 (0x05D0 - 0x0588)
class ACompositingCaptureBase final : public ACompositingElement
{
public:
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x0588(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyDistortion;                                  // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_591[0x7];                                      // 0x0591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComponentReference                    LensComponentPicker;                               // 0x0598(0x0028)(Edit, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	float                                         OverscanFactor;                                    // 0x05C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OriginalFocalLength;                               // 0x05C4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               LastDistortionMID;                                 // 0x05C8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void UpdateDistortion();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompositingCaptureBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompositingCaptureBase")
	}
	static class ACompositingCaptureBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACompositingCaptureBase>();
	}
};
DUMPER7_ASSERTS_ACompositingCaptureBase;

// Class Composure.CompositingPickerAsyncTask
// 0x0050 (0x0080 - 0x0030)
class UCompositingPickerAsyncTask final : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FVector2D& PickedUV, const struct FLinearColor& SampledColor)> OnPick; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FVector2D& PickedUV, const struct FLinearColor& SampledColor)> OnCancel; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FVector2D& PickedUV, const struct FLinearColor& SampledColor)> OnAccept; // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 PickerTarget;                                      // 0x0068(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTexture*                               PickerDisplayImage;                                // 0x0070(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UCompositingPickerAsyncTask* OpenCompositingPicker(class UTextureRenderTarget2D* PickerTarget_0, class UTexture* DisplayImage, const class FText& WindowTitle, const bool bAverageColorOnDrag, const bool bUseImplicitGamma);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompositingPickerAsyncTask")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompositingPickerAsyncTask")
	}
	static class UCompositingPickerAsyncTask* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompositingPickerAsyncTask>();
	}
};
DUMPER7_ASSERTS_UCompositingPickerAsyncTask;

// Class Composure.CompositingElementPass
// 0x0038 (0x0060 - 0x0028)
class UCompositingElementPass : public UObject
{
public:
	bool                                          bEnabled;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PassName;                                          // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x2C];                                      // 0x0034(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDisabled();
	void OnEnabled();
	void OnFrameBegin(bool bCameraCutThisFrame);
	void OnFrameEnd();
	bool ReleaseRenderTarget(class UTextureRenderTarget2D* AssignedTarget);
	class UTextureRenderTarget2D* RequestNativelyFormattedTarget(float RenderScale);
	class UTextureRenderTarget2D* RequestRenderTarget(const struct FIntPoint& Dimensions, ETextureRenderTargetFormat Format);
	void Reset();
	void SetPassEnabled(bool bSetEnabledTo);

	bool IsPassEnabled() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompositingElementPass")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompositingElementPass")
	}
	static class UCompositingElementPass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompositingElementPass>();
	}
};
DUMPER7_ASSERTS_UCompositingElementPass;

// Class Composure.CompositingElementInput
// 0x0008 (0x0068 - 0x0060)
class UCompositingElementInput : public UCompositingElementPass
{
public:
	bool                                          bIntermediate;                                     // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UTexture* GenerateInput();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompositingElementInput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompositingElementInput")
	}
	static class UCompositingElementInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompositingElementInput>();
	}
};
DUMPER7_ASSERTS_UCompositingElementInput;

// Class Composure.CompositingMediaInput
// 0x01C0 (0x0228 - 0x0068)
class UCompositingMediaInput : public UCompositingElementInput
{
public:
	struct FCompositingMaterial                   MediaTransformMaterial;                            // 0x0068(0x01A8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DefaultMaterial;                                   // 0x0210(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     DefaultTestPlateMaterial;                          // 0x0218(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               FallbackMID;                                       // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompositingMediaInput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompositingMediaInput")
	}
	static class UCompositingMediaInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompositingMediaInput>();
	}
};
DUMPER7_ASSERTS_UCompositingMediaInput;

// Class Composure.MediaTextureCompositingInput
// 0x0008 (0x0230 - 0x0228)
class UMediaTextureCompositingInput final : public UCompositingMediaInput
{
public:
	class UMediaTexture*                          MediaSource;                                       // 0x0228(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MediaTextureCompositingInput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MediaTextureCompositingInput")
	}
	static class UMediaTextureCompositingInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMediaTextureCompositingInput>();
	}
};
DUMPER7_ASSERTS_UMediaTextureCompositingInput;

// Class Composure.CompositingInputInterface
// 0x0000 (0x0000 - 0x0000)
class ICompositingInputInterface final
{
public:
	class UTexture* GenerateInput(class UCompositingInputInterfaceProxy* Proxy);
	void OnFrameBegin(class UCompositingInputInterfaceProxy* Proxy, bool bCameraCutThisFrame);
	void OnFrameEnd(class UCompositingInputInterfaceProxy* Proxy);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompositingInputInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompositingInputInterface")
	}
	static class ICompositingInputInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICompositingInputInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ICompositingInputInterface;

// Class Composure.CompositingInputInterfaceProxy
// 0x0010 (0x0078 - 0x0068)
class UCompositingInputInterfaceProxy final : public UCompositingElementInput
{
public:
	TScriptInterface<class ICompositingInputInterface> CompositingInput;                             // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompositingInputInterfaceProxy")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompositingInputInterfaceProxy")
	}
	static class UCompositingInputInterfaceProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompositingInputInterfaceProxy>();
	}
};
DUMPER7_ASSERTS_UCompositingInputInterfaceProxy;

// Class Composure.CompositingElementOutput
// 0x0000 (0x0060 - 0x0060)
class UCompositingElementOutput : public UCompositingElementPass
{
public:
	void RelayOutput(class UTexture* FinalResult, class UComposurePostProcessingPassProxy* PostProcessProxy);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompositingElementOutput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompositingElementOutput")
	}
	static class UCompositingElementOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompositingElementOutput>();
	}
};
DUMPER7_ASSERTS_UCompositingElementOutput;

// Class Composure.ColorConverterOutputPass
// 0x0018 (0x0078 - 0x0060)
class UColorConverterOutputPass : public UCompositingElementOutput
{
public:
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCompositingElementTransform*           ColorConverter;                                    // 0x0068(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCompositingElementTransform> DefaultConverterClass;                           // 0x0070(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ColorConverterOutputPass")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ColorConverterOutputPass")
	}
	static class UColorConverterOutputPass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UColorConverterOutputPass>();
	}
};
DUMPER7_ASSERTS_UColorConverterOutputPass;

// Class Composure.CompositingMediaCaptureOutput
// 0x0010 (0x0088 - 0x0078)
class UCompositingMediaCaptureOutput final : public UColorConverterOutputPass
{
public:
	class UMediaOutput*                           CaptureOutput;                                     // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaCapture*                          ActiveCapture;                                     // 0x0080(0x0008)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompositingMediaCaptureOutput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompositingMediaCaptureOutput")
	}
	static class UCompositingMediaCaptureOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompositingMediaCaptureOutput>();
	}
};
DUMPER7_ASSERTS_UCompositingMediaCaptureOutput;

// Class Composure.RenderTargetCompositingOutput
// 0x0008 (0x0068 - 0x0060)
class URenderTargetCompositingOutput final : public UCompositingElementOutput
{
public:
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RenderTargetCompositingOutput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RenderTargetCompositingOutput")
	}
	static class URenderTargetCompositingOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<URenderTargetCompositingOutput>();
	}
};
DUMPER7_ASSERTS_URenderTargetCompositingOutput;

// Class Composure.EXRFileCompositingOutput
// 0x0038 (0x0098 - 0x0060)
class UEXRFileCompositingOutput final : public UCompositingElementOutput
{
public:
	struct FDirectoryPath                         OutputDirectiory;                                  // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilenameFormat;                                    // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameRate                             OutputFrameRate;                                   // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EExrCompressionOptions                        Compression;                                       // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0xF];                                       // 0x0089(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EXRFileCompositingOutput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EXRFileCompositingOutput")
	}
	static class UEXRFileCompositingOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEXRFileCompositingOutput>();
	}
};
DUMPER7_ASSERTS_UEXRFileCompositingOutput;

// Class Composure.CompositingElementTransform
// 0x0010 (0x0070 - 0x0060)
class UCompositingElementTransform : public UCompositingElementPass
{
public:
	bool                                          bIntermediate;                                     // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UTexture* ApplyTransform(class UTexture* Input, class UComposurePostProcessingPassProxy* PostProcessProxy, class ACameraActor* TargetCamera);
	class UTexture* FindNamedPrePassResult(class FName PassLookupName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompositingElementTransform")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompositingElementTransform")
	}
	static class UCompositingElementTransform* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompositingElementTransform>();
	}
};
DUMPER7_ASSERTS_UCompositingElementTransform;

// Class Composure.CompositingPostProcessPass
// 0x0018 (0x0088 - 0x0070)
class UCompositingPostProcessPass : public UCompositingElementTransform
{
public:
	float                                         RenderScale;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UComposurePostProcessPassPolicy*> PostProcessPasses;                                // 0x0078(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompositingPostProcessPass")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompositingPostProcessPass")
	}
	static class UCompositingPostProcessPass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompositingPostProcessPass>();
	}
};
DUMPER7_ASSERTS_UCompositingPostProcessPass;

// Class Composure.CompositingElementMaterialPass
// 0x01A8 (0x0230 - 0x0088)
class UCompositingElementMaterialPass final : public UCompositingPostProcessPass
{
public:
	struct FCompositingMaterial                   Material;                                          // 0x0088(0x01A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void ApplyMaterialParams(class UMaterialInstanceDynamic* Mid);
	void SetMaterialInterface(class UMaterialInterface* NewMaterial);
	bool SetParameterMapping(class FName TextureParamName, class FName ComposureLayerName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompositingElementMaterialPass")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompositingElementMaterialPass")
	}
	static class UCompositingElementMaterialPass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompositingElementMaterialPass>();
	}
};
DUMPER7_ASSERTS_UCompositingElementMaterialPass;

// Class Composure.CompositingTonemapPass
// 0x02B0 (0x0320 - 0x0070)
class UCompositingTonemapPass final : public UCompositingElementTransform
{
public:
	struct FColorGradingSettings                  ColorGradingSettings;                              // 0x0070(0x0290)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FFilmStockSettings                     FilmStockSettings;                                 // 0x0300(0x0014)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ChromaticAberration;                               // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UComposureTonemapperPassPolicy*         TonemapPolicy;                                     // 0x0318(0x0008)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompositingTonemapPass")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompositingTonemapPass")
	}
	static class UCompositingTonemapPass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompositingTonemapPass>();
	}
};
DUMPER7_ASSERTS_UCompositingTonemapPass;

// Class Composure.MultiPassChromaKeyer
// 0x01C0 (0x0230 - 0x0070)
class UMultiPassChromaKeyer final : public UCompositingElementTransform
{
public:
	TArray<struct FLinearColor>                   KeyColors;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCompositingMaterial                   KeyerMaterial;                                     // 0x0080(0x01A8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UTexture*                               DefaultWhiteTexture;                               // 0x0228(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MultiPassChromaKeyer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MultiPassChromaKeyer")
	}
	static class UMultiPassChromaKeyer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiPassChromaKeyer>();
	}
};
DUMPER7_ASSERTS_UMultiPassChromaKeyer;

// Class Composure.MultiPassDespill
// 0x01C0 (0x0230 - 0x0070)
class UMultiPassDespill final : public UCompositingElementTransform
{
public:
	TArray<struct FLinearColor>                   KeyColors;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCompositingMaterial                   KeyerMaterial;                                     // 0x0080(0x01A8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UTexture*                               DefaultWhiteTexture;                               // 0x0228(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MultiPassDespill")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MultiPassDespill")
	}
	static class UMultiPassDespill* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiPassDespill>();
	}
};
DUMPER7_ASSERTS_UMultiPassDespill;

// Class Composure.AlphaTransformPass
// 0x0018 (0x0088 - 0x0070)
class UAlphaTransformPass final : public UCompositingElementTransform
{
public:
	float                                         AlphaScale;                                        // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DefaultMaterial;                                   // 0x0078(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               AlphaTransformMID;                                 // 0x0080(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AlphaTransformPass")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AlphaTransformPass")
	}
	static class UAlphaTransformPass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAlphaTransformPass>();
	}
};
DUMPER7_ASSERTS_UAlphaTransformPass;

// Class Composure.CompositingOpenColorIOPass
// 0x0098 (0x0108 - 0x0070)
class UCompositingOpenColorIOPass final : public UCompositingElementTransform
{
public:
	struct FOpenColorIOColorConversionSettings    ColorConversionSettings;                           // 0x0070(0x0098)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompositingOpenColorIOPass")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompositingOpenColorIOPass")
	}
	static class UCompositingOpenColorIOPass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompositingOpenColorIOPass>();
	}
};
DUMPER7_ASSERTS_UCompositingOpenColorIOPass;

// Class Composure.ComposureBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UComposureBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool AttachComposureElement(const class FName ParentName, const class FName ChildName);
	static void CopyCameraSettingsToSceneCapture(class UCameraComponent* SrcCamera, class USceneCaptureComponent2D* DstCaptureComponent, float OriginalFocalLength, float OverscanFactor);
	static class ACompositingElement* CreateComposureElement(const class FName ElementName, TSubclassOf<class ACompositingElement> ClassType, class AActor* LevelContext);
	static class UComposurePlayerCompositingTarget* CreatePlayerCompositingTarget(class UObject* WorldContextObject);
	static void DeleteComposureElementAndChildren(const class FName ElementToDelete);
	static class ACompositingElement* GetComposureElement(const class FName ElementName);
	static void GetCroppingUVTransformationMatrixFromPostMoveSettings(const struct FComposurePostMoveSettings& PostMoveSettings, float AspectRatio, struct FMatrix* CropingUVTransformationMatrix, struct FMatrix* UncropingUVTransformationMatrix);
	static void GetPlayerDisplayGamma(const class APlayerCameraManager* PlayerCameraManager, float* DisplayGamma);
	static void GetProjectionMatrixFromPostMoveSettings(const struct FComposurePostMoveSettings& PostMoveSettings, float HorizontalFOVAngle, float AspectRatio, struct FMatrix* ProjectionMatrix);
	static void GetRedGreenUVFactorsFromChromaticAberration(float ChromaticAberrationAmount, struct FVector2D* RedGreenUVFactors);
	static void InvertUVDisplacementMapEncodingParameters(const struct FVector2D& In, struct FVector2D* Out);
	static bool IsComposureElementDrawing(class ACompositingElement* CompElement);
	static void RefreshComposureElementList();
	static bool RenameComposureElement(const class FName OriginalElementName, const class FName NewElementName);
	static void RequestRedrawComposureViewport();
	static void SetUVMapSettingsToMaterialParameters(const struct FComposureUVMapSettings& UVMapSettings, class UMaterialInstanceDynamic* Material);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComposureBlueprintLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComposureBlueprintLibrary")
	}
	static class UComposureBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComposureBlueprintLibrary>();
	}
};
DUMPER7_ASSERTS_UComposureBlueprintLibrary;

// Class Composure.ComposureGameSettings
// 0x0050 (0x0078 - 0x0028)
class UComposureGameSettings final : public UObject
{
public:
	struct FSoftObjectPath                        StaticVideoPlateDebugImage;                        // 0x0028(0x0020)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSceneCapWarnOfMissingCam;                         // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        FallbackCompositingTexture;                        // 0x0050(0x0020)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               FallbackCompositingTextureObj;                     // 0x0070(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComposureGameSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComposureGameSettings")
	}
	static class UComposureGameSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComposureGameSettings>();
	}
};
DUMPER7_ASSERTS_UComposureGameSettings;

// Class Composure.ComposurePostProcessPass
// 0x0020 (0x02C0 - 0x02A0)
class UComposurePostProcessPass : public USceneComponent
{
public:
	class USceneCaptureComponent2D*               SceneCapture;                                      // 0x02A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NonTransactional, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UComposurePostProcessBlendable*         BlendableInterface;                                // 0x02A8(0x0008)(ZeroConstructor, Transient, NonTransactional, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     SetupMaterial;                                     // 0x02B0(0x0008)(ZeroConstructor, Transient, NonTransactional, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     TonemapperReplacement;                             // 0x02B8(0x0008)(ZeroConstructor, Transient, NonTransactional, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetOutputRenderTarget(class UTextureRenderTarget2D* RenderTarget);
	void SetSetupMaterial(class UMaterialInterface* Material);

	class UTextureRenderTarget2D* GetOutputRenderTarget() const;
	class UMaterialInterface* GetSetupMaterial() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComposurePostProcessPass")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComposurePostProcessPass")
	}
	static class UComposurePostProcessPass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComposurePostProcessPass>();
	}
};
DUMPER7_ASSERTS_UComposurePostProcessPass;

// Class Composure.ComposureLensBloomPass
// 0x00D0 (0x0390 - 0x02C0)
class UComposureLensBloomPass final : public UComposurePostProcessPass
{
public:
	struct FLensBloomSettings                     Settings;                                          // 0x02C0(0x00C0)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TonemapperReplacingMID;                            // 0x0380(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BloomToRenderTarget();
	void SetTonemapperReplacingMaterial(class UMaterialInstanceDynamic* Material);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComposureLensBloomPass")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComposureLensBloomPass")
	}
	static class UComposureLensBloomPass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComposureLensBloomPass>();
	}
};
DUMPER7_ASSERTS_UComposureLensBloomPass;

// Class Composure.ComposurePostProcessPassPolicy
// 0x0000 (0x0028 - 0x0028)
class UComposurePostProcessPassPolicy : public UObject
{
public:
	void SetupPostProcess(class USceneCaptureComponent2D* SceneCapture, class UMaterialInterface** TonemapperOverride);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComposurePostProcessPassPolicy")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComposurePostProcessPassPolicy")
	}
	static class UComposurePostProcessPassPolicy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComposurePostProcessPassPolicy>();
	}
};
DUMPER7_ASSERTS_UComposurePostProcessPassPolicy;

// Class Composure.ComposureLensBloomPassPolicy
// 0x00D8 (0x0100 - 0x0028)
class UComposureLensBloomPassPolicy final : public UComposurePostProcessPassPolicy
{
public:
	struct FLensBloomSettings                     Settings;                                          // 0x0028(0x00C0)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ReplacementMaterial;                               // 0x00E8(0x0008)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BloomIntensityParamName;                           // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TonemapperReplacmentMID;                           // 0x00F8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComposureLensBloomPassPolicy")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComposureLensBloomPassPolicy")
	}
	static class UComposureLensBloomPassPolicy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComposureLensBloomPassPolicy>();
	}
};
DUMPER7_ASSERTS_UComposureLensBloomPassPolicy;

// Class Composure.ComposurePlayerCompositingCameraModifier
// 0x0018 (0x0060 - 0x0048)
class UComposurePlayerCompositingCameraModifier final : public UCameraModifier
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IComposurePlayerCompositingInterface> Target;                             // 0x0050(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComposurePlayerCompositingCameraModifier")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComposurePlayerCompositingCameraModifier")
	}
	static class UComposurePlayerCompositingCameraModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComposurePlayerCompositingCameraModifier>();
	}
};
DUMPER7_ASSERTS_UComposurePlayerCompositingCameraModifier;

// Class Composure.ComposurePlayerCompositingInterface
// 0x0000 (0x0000 - 0x0000)
class IComposurePlayerCompositingInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComposurePlayerCompositingInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComposurePlayerCompositingInterface")
	}
	static class IComposurePlayerCompositingInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IComposurePlayerCompositingInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IComposurePlayerCompositingInterface;

// Class Composure.ComposurePlayerCompositingTarget
// 0x0050 (0x0078 - 0x0028)
class UComposurePlayerCompositingTarget final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   PlayerCameraManager;                               // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UComposurePlayerCompositingCameraModifier* PlayerCameraModifier;                           // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               ReplaceTonemapperMID;                              // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x30];                                      // 0x0048(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class APlayerCameraManager* SetPlayerCameraManager(class APlayerCameraManager* PlayerCameraManager_0);
	void SetRenderTarget(class UTextureRenderTarget2D* RenderTarget);

	class APlayerCameraManager* GetPlayerCameraManager() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComposurePlayerCompositingTarget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComposurePlayerCompositingTarget")
	}
	static class UComposurePlayerCompositingTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComposurePlayerCompositingTarget>();
	}
};
DUMPER7_ASSERTS_UComposurePlayerCompositingTarget;

// Class Composure.ComposureCompositingTargetComponent
// 0x0010 (0x00B0 - 0x00A0)
class UComposureCompositingTargetComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               DisplayTexture;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetDisplayTexture(class UTexture* DisplayTexture_0);

	class UTexture* GetDisplayTexture() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComposureCompositingTargetComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComposureCompositingTargetComponent")
	}
	static class UComposureCompositingTargetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComposureCompositingTargetComponent>();
	}
};
DUMPER7_ASSERTS_UComposureCompositingTargetComponent;

// Class Composure.ComposurePostProcessBlendable
// 0x0010 (0x0038 - 0x0028)
class UComposurePostProcessBlendable final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UComposurePostProcessPass*              Target;                                            // 0x0030(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComposurePostProcessBlendable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComposurePostProcessBlendable")
	}
	static class UComposurePostProcessBlendable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComposurePostProcessBlendable>();
	}
};
DUMPER7_ASSERTS_UComposurePostProcessBlendable;

// Class Composure.ComposurePostProcessingPassProxy
// 0x0010 (0x02D0 - 0x02C0)
class UComposurePostProcessingPassProxy final : public UComposurePostProcessPass
{
public:
	class UMaterialInstanceDynamic*               SetupMID;                                          // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C8[0x8];                                      // 0x02C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Execute(class UTexture* PrePassInput, class UComposurePostProcessPassPolicy* PostProcessPass);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComposurePostProcessingPassProxy")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComposurePostProcessingPassProxy")
	}
	static class UComposurePostProcessingPassProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComposurePostProcessingPassProxy>();
	}
};
DUMPER7_ASSERTS_UComposurePostProcessingPassProxy;

// Class Composure.ComposureTonemapperPass
// 0x02B0 (0x0570 - 0x02C0)
class UComposureTonemapperPass final : public UComposurePostProcessPass
{
public:
	struct FColorGradingSettings                  ColorGradingSettings;                              // 0x02C0(0x0290)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FFilmStockSettings                     FilmStockSettings;                                 // 0x0550(0x0014)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ChromaticAberration;                               // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_568[0x8];                                      // 0x0568(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void TonemapToRenderTarget();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComposureTonemapperPass")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComposureTonemapperPass")
	}
	static class UComposureTonemapperPass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComposureTonemapperPass>();
	}
};
DUMPER7_ASSERTS_UComposureTonemapperPass;

// Class Composure.ComposureTonemapperPassPolicy
// 0x02B8 (0x02E0 - 0x0028)
class UComposureTonemapperPassPolicy final : public UComposurePostProcessPassPolicy
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColorGradingSettings                  ColorGradingSettings;                              // 0x0030(0x0290)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FFilmStockSettings                     FilmStockSettings;                                 // 0x02C0(0x0014)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ChromaticAberration;                               // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D8[0x8];                                      // 0x02D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComposureTonemapperPassPolicy")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComposureTonemapperPassPolicy")
	}
	static class UComposureTonemapperPassPolicy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComposureTonemapperPassPolicy>();
	}
};
DUMPER7_ASSERTS_UComposureTonemapperPassPolicy;

// Class Composure.CompositingTextureLookupTable
// 0x0000 (0x0000 - 0x0000)
class ICompositingTextureLookupTable final
{
public:
	bool FindNamedPassResult(class FName LookupName, class UTexture** OutTexture) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CompositingTextureLookupTable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CompositingTextureLookupTable")
	}
	static class ICompositingTextureLookupTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICompositingTextureLookupTable>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ICompositingTextureLookupTable;

// Class Composure.MovieSceneComposureExportClient
// 0x0000 (0x0000 - 0x0000)
class IMovieSceneComposureExportClient final
{
public:
	void InitializeForExport(class UMovieSceneComposureExportInitializer* ExportInitializer);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MovieSceneComposureExportClient")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MovieSceneComposureExportClient")
	}
	static class IMovieSceneComposureExportClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMovieSceneComposureExportClient>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IMovieSceneComposureExportClient;

// Class Composure.MovieSceneComposureExportInitializer
// 0x0010 (0x0038 - 0x0028)
class UMovieSceneComposureExportInitializer final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ExportSceneCaptureBuffers(class ACompositingElement* CompShotElement, class USceneCaptureComponent2D* SceneCapture, const TArray<class FString>& BuffersToExport);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MovieSceneComposureExportInitializer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MovieSceneComposureExportInitializer")
	}
	static class UMovieSceneComposureExportInitializer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneComposureExportInitializer>();
	}
};
DUMPER7_ASSERTS_UMovieSceneComposureExportInitializer;

// Class Composure.MovieSceneComposureExportTrack
// 0x0030 (0x00C8 - 0x0098)
class UMovieSceneComposureExportTrack final : public UMovieSceneTrack
{
public:
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneComposureExportPass         Pass;                                              // 0x00A0(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x00B8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MovieSceneComposureExportTrack")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MovieSceneComposureExportTrack")
	}
	static class UMovieSceneComposureExportTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneComposureExportTrack>();
	}
};
DUMPER7_ASSERTS_UMovieSceneComposureExportTrack;

// Class Composure.MovieSceneComposureExportSection
// 0x0000 (0x00F0 - 0x00F0)
class UMovieSceneComposureExportSection final : public UMovieSceneSection
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MovieSceneComposureExportSection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MovieSceneComposureExportSection")
	}
	static class UMovieSceneComposureExportSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneComposureExportSection>();
	}
};
DUMPER7_ASSERTS_UMovieSceneComposureExportSection;

// Class Composure.MovieSceneComposurePostMoveSettingsSection
// 0x0660 (0x0750 - 0x00F0)
class UMovieSceneComposurePostMoveSettingsSection final : public UMovieSceneSection
{
public:
	struct FMovieSceneFloatChannel                Pivot[0x2];                                        // 0x00F0(0x0110)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                Translation[0x2];                                  // 0x0310(0x0110)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                RotationAngle;                                     // 0x0530(0x0110)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                Scale;                                             // 0x0640(0x0110)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MovieSceneComposurePostMoveSettingsSection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MovieSceneComposurePostMoveSettingsSection")
	}
	static class UMovieSceneComposurePostMoveSettingsSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneComposurePostMoveSettingsSection>();
	}
};
DUMPER7_ASSERTS_UMovieSceneComposurePostMoveSettingsSection;

// Class Composure.MovieSceneComposurePostMoveSettingsTrack
// 0x0008 (0x00D0 - 0x00C8)
class UMovieSceneComposurePostMoveSettingsTrack final : public UMovieScenePropertyTrack
{
public:
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MovieSceneComposurePostMoveSettingsTrack")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MovieSceneComposurePostMoveSettingsTrack")
	}
	static class UMovieSceneComposurePostMoveSettingsTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneComposurePostMoveSettingsTrack>();
	}
};
DUMPER7_ASSERTS_UMovieSceneComposurePostMoveSettingsTrack;

// Class Composure.PlayerViewportCompositingOutput
// 0x0040 (0x00B8 - 0x0078)
class UPlayerViewportCompositingOutput final : public UColorConverterOutputPass
{
public:
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerIndex;                                       // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyToneCurve;                                    // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0xB];                                       // 0x0085(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerCompOutputCameraModifier*        ActiveCamModifier;                                 // 0x0090(0x0008)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     TonemapperBaseMat;                                 // 0x0098(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     PreTonemapBaseMat;                                 // 0x00A0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               ViewportOverrideMID;                               // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B0[0x8];                                       // 0x00B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlayerViewportCompositingOutput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlayerViewportCompositingOutput")
	}
	static class UPlayerViewportCompositingOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerViewportCompositingOutput>();
	}
};
DUMPER7_ASSERTS_UPlayerViewportCompositingOutput;

// Class Composure.PlayerCompOutputCameraModifier
// 0x0008 (0x0050 - 0x0048)
class UPlayerCompOutputCameraModifier final : public UCameraModifier
{
public:
	class UPlayerViewportCompositingOutput*       Owner;                                             // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PlayerCompOutputCameraModifier")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PlayerCompOutputCameraModifier")
	}
	static class UPlayerCompOutputCameraModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerCompOutputCameraModifier>();
	}
};
DUMPER7_ASSERTS_UPlayerCompOutputCameraModifier;

}

