#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DarkForestEvents

#include "Basic.hpp"

#include "DarkForestEvents_structs.hpp"
#include "GameplayAbilities_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class DarkForestEvents.DFEffect
// 0x0070 (0x0AE0 - 0x0A70)
class UDFEffect final : public UGameplayEffect
{
public:
	uint8                                         Pad_A70[0x10];                                     // 0x0A70(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDFEventObject>             EventClass;                                        // 0x0A80(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxExecutionAmount;                                // 0x0A88(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ExecutionChance;                                   // 0x0A8C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UDFEventCondition>>  EventConditions;                                   // 0x0A90(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FDFEffectSettings                      EffectSettings;                                    // 0x0AA0(0x0040)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DFEffect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DFEffect")
	}
	static class UDFEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDFEffect>();
	}
};
DUMPER7_ASSERTS_UDFEffect;

// Class DarkForestEvents.DFEffectExecution
// 0x0000 (0x0040 - 0x0040)
class UDFEffectExecution final : public UGameplayEffectExecutionCalculation
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DFEffectExecution")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DFEffectExecution")
	}
	static class UDFEffectExecution* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDFEffectExecution>();
	}
};
DUMPER7_ASSERTS_UDFEffectExecution;

// Class DarkForestEvents.DFEventCondition
// 0x0000 (0x0028 - 0x0028)
class UDFEventCondition final : public UObject
{
public:
	bool CheckCondition(class UWorld* World) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DFEventCondition")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DFEventCondition")
	}
	static class UDFEventCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDFEventCondition>();
	}
};
DUMPER7_ASSERTS_UDFEventCondition;

// Class DarkForestEvents.DFEventObject
// 0x0008 (0x0030 - 0x0028)
class UDFEventObject final : public UObject
{
public:
	class UTexture2D*                             EventBillboardTexture;                             // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AsyncLoadClass(TSoftClassPtr<class UClass> ClassToLoad, const TDelegate<void(class UClass* Class)>& Delegate);
	void AsyncLoadObject(TSoftObjectPtr<class UObject> ObjectToLoad, const TDelegate<void(class UObject* Object)>& Delegate);
	void FinishDeferredSpawn(class AActor* ActorToFinishSpawn);
	void GetEventTransform(const struct FDFEffectSettings& Settings, TArray<struct FTransform>* OutTransform);
	void GetPlayerRelativeTransform(const struct FDFEventLocation& Location, struct FTransform* OutTransform);
	class AActor* SpawnActor(TSubclassOf<class AActor> ActorClass, const struct FTransform& Transform);
	class AActor* SpawnActorDeferred(TSubclassOf<class AActor> ActorClass, const struct FTransform& Transform);
	void TriggerEvent(class UWorld* World, const struct FDFEffectSettings& Settings);

	bool GetAllTargetPointsWithEventTag(const class FName& EventTag, TArray<struct FTransform>* OutTargetPoints) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DFEventObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DFEventObject")
	}
	static class UDFEventObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDFEventObject>();
	}
};
DUMPER7_ASSERTS_UDFEventObject;

// Class DarkForestEvents.DFEventsManager
// 0x0020 (0x02B8 - 0x0298)
class ADFEventsManager final : public AInfo
{
public:
	uint8                                         Pad_298[0x20];                                     // 0x0298(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddEffect(const struct FDFEffectSettings& Effect);
	void HandleEffectEnded(const struct FActiveGameplayEffect& Effect);
	void HandleEffectExecuted(const class UDFEffect* Effect);
	void RemoveEffect(const struct FDFEffectSettings& Effect);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DFEventsManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DFEventsManager")
	}
	static class ADFEventsManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADFEventsManager>();
	}
};
DUMPER7_ASSERTS_ADFEventsManager;

// Class DarkForestEvents.DFEventTriggerZone
// 0x0070 (0x0308 - 0x0298)
class ADFEventTriggerZone final : public AActor
{
public:
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UBillboardComponent*                    EventBillboard;                                    // 0x02A0(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDFEffectSettings                      EffectSettings;                                    // 0x02A8(0x0040)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          RemoveEffectOnEndOverlap;                          // 0x02E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DoOnce;                                            // 0x02E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2EA[0x2];                                      // 0x02EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxTriggerCount;                                   // 0x02EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EffectCooldown;                                    // 0x02F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F4[0x14];                                     // 0x02F4(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void SetEventBillboardTexture();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DFEventTriggerZone")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DFEventTriggerZone")
	}
	static class ADFEventTriggerZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADFEventTriggerZone>();
	}
};
DUMPER7_ASSERTS_ADFEventTriggerZone;

}

