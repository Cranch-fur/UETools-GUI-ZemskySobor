#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EnchancedSpline

#include "Basic.hpp"

#include "EnchancedSpline_classes.hpp"
#include "EnchancedSpline_parameters.hpp"


namespace SDK
{

// Function EnchancedSpline.BaseGameplayBehavior.CleanUp
// (Native, Protected, BlueprintCallable)

void UBaseGameplayBehavior::CleanUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGameplayBehavior", "CleanUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.BaseGameplayBehavior.FinishAbortBehavior
// (Final, Native, Public, BlueprintCallable)

void UBaseGameplayBehavior::FinishAbortBehavior()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGameplayBehavior", "FinishAbortBehavior");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.BaseGameplayBehavior.GetLoopRange
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBaseGameplayBehavior::GetLoopRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGameplayBehavior", "GetLoopRange");

	Params::BaseGameplayBehavior_GetLoopRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.BaseGameplayBehavior.GetRandomMontage
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const class USkeletalMeshComponent*     Mesh                                                   (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UBaseGameplayBehavior::GetRandomMontage(const class USkeletalMeshComponent* Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGameplayBehavior", "GetRandomMontage");

	Params::BaseGameplayBehavior_GetRandomMontage Parms{};

	Parms.Mesh = Mesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.BaseGameplayBehavior.HandleSmartItem
// (Native, Protected, BlueprintCallable)
// Parameters:
// const class FString&                    ItemName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTake                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseGameplayBehavior::HandleSmartItem(const class FString& ItemName, class FName SocketName, bool bTake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGameplayBehavior", "HandleSmartItem");

	Params::BaseGameplayBehavior_HandleSmartItem Parms{};

	Parms.ItemName = std::move(ItemName);
	Parms.SocketName = SocketName;
	Parms.bTake = bTake;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.BaseGameplayBehavior.K2_OnItemGrabbed
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class FString&                    ItemName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTake                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseGameplayBehavior::K2_OnItemGrabbed(const class FString& ItemName, class FName SocketName, bool bTake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGameplayBehavior", "K2_OnItemGrabbed");

	Params::BaseGameplayBehavior_K2_OnItemGrabbed Parms{};

	Parms.ItemName = std::move(ItemName);
	Parms.SocketName = SocketName;
	Parms.bTake = bTake;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EnchancedSpline.BaseGameplayBehavior.K2_RunAbortBehavior
// (Event, Public, BlueprintEvent)

void UBaseGameplayBehavior::K2_RunAbortBehavior()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGameplayBehavior", "K2_RunAbortBehavior");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EnchancedSpline.BaseGameplayBehavior.ModifyAvatarCapsule
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class ACharacter*                       Char                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseGameplayBehavior::ModifyAvatarCapsule(class ACharacter* Char, bool bReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGameplayBehavior", "ModifyAvatarCapsule");

	Params::BaseGameplayBehavior_ModifyAvatarCapsule Parms{};

	Parms.Char = Char;
	Parms.bReset = bReset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.BaseGameplayBehavior.OnMontageCompleted
// (Final, Native, Protected)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseGameplayBehavior::OnMontageCompleted(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGameplayBehavior", "OnMontageCompleted");

	Params::BaseGameplayBehavior_OnMontageCompleted Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.BaseGameplayBehavior.OnMontageNotifyBegin
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBranchingPointNotifyPayload&BranchingPayload                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBaseGameplayBehavior::OnMontageNotifyBegin(class FName NotifyName, const struct FBranchingPointNotifyPayload& BranchingPayload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGameplayBehavior", "OnMontageNotifyBegin");

	Params::BaseGameplayBehavior_OnMontageNotifyBegin Parms{};

	Parms.NotifyName = NotifyName;
	Parms.BranchingPayload = std::move(BranchingPayload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.BaseGameplayBehavior.OnMontageNotifyEnd
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBranchingPointNotifyPayload&BranchingPayload                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBaseGameplayBehavior::OnMontageNotifyEnd(class FName NotifyName, const struct FBranchingPointNotifyPayload& BranchingPayload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGameplayBehavior", "OnMontageNotifyEnd");

	Params::BaseGameplayBehavior_OnMontageNotifyEnd Parms{};

	Parms.NotifyName = NotifyName;
	Parms.BranchingPayload = std::move(BranchingPayload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.BaseGameplayBehavior.OnSimpleNotify
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class FString&                    NotifyName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseGameplayBehavior::OnSimpleNotify(const class FString& NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGameplayBehavior", "OnSimpleNotify");

	Params::BaseGameplayBehavior_OnSimpleNotify Parms{};

	Parms.NotifyName = std::move(NotifyName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EnchancedSpline.BaseGameplayBehavior.PlaySmartMontage
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     InMontage                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESmartMontageSection                    InSection                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseGameplayBehavior::PlaySmartMontage(class UAnimMontage* InMontage, ESmartMontageSection InSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGameplayBehavior", "PlaySmartMontage");

	Params::BaseGameplayBehavior_PlaySmartMontage Parms{};

	Parms.InMontage = InMontage;
	Parms.InSection = InSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.BaseGameplayBehavior.ResetAnimInstance
// (Event, Protected, BlueprintEvent)

void UBaseGameplayBehavior::ResetAnimInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGameplayBehavior", "ResetAnimInstance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EnchancedSpline.BaseGameplayBehavior.ResetSmartItems
// (Final, Native, Protected, BlueprintCallable)

void UBaseGameplayBehavior::ResetSmartItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGameplayBehavior", "ResetSmartItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.BaseGameplayBehavior.RunSmartBehavior
// (Native, Protected, BlueprintCallable)
// Parameters:
// class ACharacter*                       InAvatar                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           InSmartOwner                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseGameplayBehavior::RunSmartBehavior(class ACharacter* InAvatar, class AActor* InSmartOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGameplayBehavior", "RunSmartBehavior");

	Params::BaseGameplayBehavior_RunSmartBehavior Parms{};

	Parms.InAvatar = InAvatar;
	Parms.InSmartOwner = InSmartOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.BaseGameplayBehavior.SetMeshCollision
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bReset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseGameplayBehavior::SetMeshCollision(bool bReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGameplayBehavior", "SetMeshCollision");

	Params::BaseGameplayBehavior_SetMeshCollision Parms{};

	Parms.bReset = bReset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.BaseSmartObject.ApplyMeshOffsets
// (Final, Native, Protected, BlueprintCallable)

void ABaseSmartObject::ApplyMeshOffsets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSmartObject", "ApplyMeshOffsets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.BaseSmartObject.HandleResetRequest
// (Native, Protected, BlueprintCallable)
// Parameters:
// const class FString&                    ItemName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABaseSmartObject::HandleResetRequest(const class FString& ItemName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSmartObject", "HandleResetRequest");

	Params::BaseSmartObject_HandleResetRequest Parms{};

	Parms.ItemName = std::move(ItemName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.BaseSmartObject.ResetDefinitionName
// (Final, Native, Public, BlueprintCallable)

void ABaseSmartObject::ResetDefinitionName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSmartObject", "ResetDefinitionName");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.BaseSmartObject.ResetOffsets
// (Final, Native, Protected, BlueprintCallable)

void ABaseSmartObject::ResetOffsets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSmartObject", "ResetOffsets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.BaseSmartObject.GetLinkedSmartObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABaseSmartObject*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABaseSmartObject* ABaseSmartObject::GetLinkedSmartObject(int32 Slot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSmartObject", "GetLinkedSmartObject");

	Params::BaseSmartObject_GetLinkedSmartObject Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.InteractWithSmartObject.InteractWithLinkedSmartObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInteractWithSmartObject*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInteractWithSmartObject* UInteractWithSmartObject::InteractWithLinkedSmartObject(const class UObject* WorldContextObject, class ACharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InteractWithSmartObject", "InteractWithLinkedSmartObject");

	Params::InteractWithSmartObject_InteractWithLinkedSmartObject Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.InteractWithSmartObject.InteractWithPreSelectedSmartObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSmartObjectSlotHandle&    SlotHandle                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInteractWithSmartObject*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInteractWithSmartObject* UInteractWithSmartObject::InteractWithPreSelectedSmartObject(const class UObject* WorldContextObject, class ACharacter* Character, const struct FSmartObjectSlotHandle& SlotHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InteractWithSmartObject", "InteractWithPreSelectedSmartObject");

	Params::InteractWithSmartObject_InteractWithPreSelectedSmartObject Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Character = Character;
	Parms.SlotHandle = std::move(SlotHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.InteractWithSmartObject.InteractWithSplinePointSmartObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FEnchancedSplinePointParams&Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   SearAreaSize                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInteractWithSmartObject*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInteractWithSmartObject* UInteractWithSmartObject::InteractWithSplinePointSmartObject(const class UObject* WorldContextObject, class ACharacter* Character, const struct FEnchancedSplinePointParams& Params_0, float SearAreaSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InteractWithSmartObject", "InteractWithSplinePointSmartObject");

	Params::InteractWithSmartObject_InteractWithSplinePointSmartObject Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Character = Character;
	Parms.Params_0 = std::move(Params_0);
	Parms.SearAreaSize = SearAreaSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SmartObjectAnimInstance.GetOwningSmartObject
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class ABaseSmartObject*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABaseSmartObject* USmartObjectAnimInstance::GetOwningSmartObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectAnimInstance", "GetOwningSmartObject");

	Params::SmartObjectAnimInstance_GetOwningSmartObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SmartObjectAnimInstance.GetSmartObjectUser
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACharacter* USmartObjectAnimInstance::GetSmartObjectUser()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectAnimInstance", "GetSmartObjectUser");

	Params::SmartObjectAnimInstance_GetSmartObjectUser Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SmartObjectAnimInstance.InitSmartObjectAnimInstance
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class ACharacter*                       SmartObjectUser                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USmartObjectAnimInstance::InitSmartObjectAnimInstance(class ACharacter* SmartObjectUser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectAnimInstance", "InitSmartObjectAnimInstance");

	Params::SmartObjectAnimInstance_InitSmartObjectAnimInstance Parms{};

	Parms.SmartObjectUser = SmartObjectUser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SmartObjectAnimInstance.ResetSmartObjectAnimInstance
// (Final, Native, Protected, BlueprintCallable)

void USmartObjectAnimInstance::ResetSmartObjectAnimInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectAnimInstance", "ResetSmartObjectAnimInstance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SmartObjectAnimInstance.IsSmartObjectInUse
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USmartObjectAnimInstance::IsSmartObjectInUse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectAnimInstance", "IsSmartObjectInUse");

	Params::SmartObjectAnimInstance_IsSmartObjectInUse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SmartObjectHelperComponent.AbortInteraction
// (Final, Native, Public, BlueprintCallable)

void USmartObjectHelperComponent::AbortInteraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectHelperComponent", "AbortInteraction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SmartObjectHelperComponent.GetCurrentActivityTags
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTagContainer*           Tags                                                   (Parm, OutParm, NativeAccessSpecifierPublic)

void USmartObjectHelperComponent::GetCurrentActivityTags(struct FGameplayTagContainer* Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectHelperComponent", "GetCurrentActivityTags");

	Params::SmartObjectHelperComponent_GetCurrentActivityTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Tags != nullptr)
		*Tags = std::move(Parms.Tags);
}


// Function EnchancedSpline.SmartObjectHelperComponent.HandleInteractionFinished
// (Final, Native, Protected)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USmartObjectHelperComponent::HandleInteractionFinished(bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectHelperComponent", "HandleInteractionFinished");

	Params::SmartObjectHelperComponent_HandleInteractionFinished Parms{};

	Parms.bSuccess = bSuccess;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SmartObjectHelperComponent.K2_StartSmartObjectInteractionFromSpline
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FEnchancedSplinePointParams&Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   SearAreaSize                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USmartObjectHelperComponent::K2_StartSmartObjectInteractionFromSpline(const struct FEnchancedSplinePointParams& Params_0, float SearAreaSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectHelperComponent", "K2_StartSmartObjectInteractionFromSpline");

	Params::SmartObjectHelperComponent_K2_StartSmartObjectInteractionFromSpline Parms{};

	Parms.Params_0 = std::move(Params_0);
	Parms.SearAreaSize = SearAreaSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SmartObjectHelperComponent.OnSmartObjectInteractionFailed
// (Final, Native, Public)

void USmartObjectHelperComponent::OnSmartObjectInteractionFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectHelperComponent", "OnSmartObjectInteractionFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SmartObjectHelperComponent.OnSmartObjectInteractionFinished
// (Final, Native, Public)

void USmartObjectHelperComponent::OnSmartObjectInteractionFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectHelperComponent", "OnSmartObjectInteractionFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SmartObjectHelperComponent.SelectAndStartInteractSmartObject
// (Final, Native, Protected)

void USmartObjectHelperComponent::SelectAndStartInteractSmartObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectHelperComponent", "SelectAndStartInteractSmartObject");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SmartObjectHelperComponent.SelectNextSmartObject
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSmartObjectSlotHandle*          SlotHandle                                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USmartObjectHelperComponent::SelectNextSmartObject(struct FSmartObjectSlotHandle* SlotHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectHelperComponent", "SelectNextSmartObject");

	Params::SmartObjectHelperComponent_SelectNextSmartObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SlotHandle != nullptr)
		*SlotHandle = std::move(Parms.SlotHandle);
}


// Function EnchancedSpline.SmartObjectHelperComponent.SetSmartObjectInstanceValues
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBehaviorSettings&         InSettings                                             (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USmartObjectHelperComponent::SetSmartObjectInstanceValues(const struct FBehaviorSettings& InSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectHelperComponent", "SetSmartObjectInstanceValues");

	Params::SmartObjectHelperComponent_SetSmartObjectInstanceValues Parms{};

	Parms.InSettings = std::move(InSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SmartObjectHelperComponent.SetSmartObjectSplineSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDA_SmartObjectInteractionSettings*InSettings                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USmartObjectHelperComponent::SetSmartObjectSplineSettings(class UDA_SmartObjectInteractionSettings* InSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectHelperComponent", "SetSmartObjectSplineSettings");

	Params::SmartObjectHelperComponent_SetSmartObjectSplineSettings Parms{};

	Parms.InSettings = InSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SmartObjectHelperComponent.SetupInteractItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABaseSmartObject*                 InstigatorSmartObject                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EItemLifeTimeMode                       LifeTimeMode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASharedInteractItem*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASharedInteractItem* USmartObjectHelperComponent::SetupInteractItem(class UStaticMesh* Mesh, class ABaseSmartObject* InstigatorSmartObject, class FName SocketName, EItemLifeTimeMode LifeTimeMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectHelperComponent", "SetupInteractItem");

	Params::SmartObjectHelperComponent_SetupInteractItem Parms{};

	Parms.Mesh = Mesh;
	Parms.InstigatorSmartObject = InstigatorSmartObject;
	Parms.SocketName = SocketName;
	Parms.LifeTimeMode = LifeTimeMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SmartObjectHelperComponent.StartInteractWithSmartObjectsFromConfig
// (Final, Native, Public, BlueprintCallable)

void USmartObjectHelperComponent::StartInteractWithSmartObjectsFromConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectHelperComponent", "StartInteractWithSmartObjectsFromConfig");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SmartObjectHelperComponent.StartSmartObjectInteraction
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSmartObjectSlotHandle&    SlotHandle                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USmartObjectHelperComponent::StartSmartObjectInteraction(const struct FSmartObjectSlotHandle& SlotHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectHelperComponent", "StartSmartObjectInteraction");

	Params::SmartObjectHelperComponent_StartSmartObjectInteraction Parms{};

	Parms.SlotHandle = std::move(SlotHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SmartObjectHelperComponent.IsCurrentlyInteracting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USmartObjectHelperComponent::IsCurrentlyInteracting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmartObjectHelperComponent", "IsCurrentlyInteracting");

	Params::SmartObjectHelperComponent_IsCurrentlyInteracting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SmartObjectInterface.HandleCollision
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bReset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISmartObjectInterface::HandleCollision(bool bReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SmartObjectInterface", "HandleCollision");

	Params::SmartObjectInterface_HandleCollision Parms{};

	Parms.bReset = bReset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SmartObjectInterface.ResetItem
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    ItemName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISmartObjectInterface::ResetItem(const class FString& ItemName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SmartObjectInterface", "ResetItem");

	Params::SmartObjectInterface_ResetItem Parms{};

	Parms.ItemName = std::move(ItemName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SmartObjectInterface.GetLoopTime
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float*                                  Min                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  Max                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISmartObjectInterface::GetLoopTime(float* Min, float* Max) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SmartObjectInterface", "GetLoopTime");

	Params::SmartObjectInterface_GetLoopTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Min != nullptr)
		*Min = Parms.Min;

	if (Max != nullptr)
		*Max = Parms.Max;
}


// Function EnchancedSpline.SmartObjectInterface.GetNotifyData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FString*                          ItemName                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName*                            SocketName                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bNewLogic                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISmartObjectInterface::GetNotifyData(class FString* ItemName, class FName* SocketName, bool* bNewLogic) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SmartObjectInterface", "GetNotifyData");

	Params::SmartObjectInterface_GetNotifyData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ItemName != nullptr)
		*ItemName = std::move(Parms.ItemName);

	if (SocketName != nullptr)
		*SocketName = Parms.SocketName;

	if (bNewLogic != nullptr)
		*bNewLogic = Parms.bNewLogic;
}


// Function EnchancedSpline.SplineActor.GetActions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PointIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDA_ActionsSettings*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDA_ActionsSettings* ASplineActor::GetActions(int32 PointIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineActor", "GetActions");

	Params::SplineActor_GetActions Parms{};

	Parms.PointIndex = PointIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SplineActor.GetMovementMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PointIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESplineMovementMode                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESplineMovementMode ASplineActor::GetMovementMode(int32 PointIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineActor", "GetMovementMode");

	Params::SplineActor_GetMovementMode Parms{};

	Parms.PointIndex = PointIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SplineActor.GetOverrideMovementMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PointIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASplineActor::GetOverrideMovementMode(int32 PointIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineActor", "GetOverrideMovementMode");

	Params::SplineActor_GetOverrideMovementMode Parms{};

	Parms.PointIndex = PointIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SplineActor.GetStopTimeAtSplinePoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PointIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASplineActor::GetStopTimeAtSplinePoint(int32 PointIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineActor", "GetStopTimeAtSplinePoint");

	Params::SplineActor_GetStopTimeAtSplinePoint Parms{};

	Parms.PointIndex = PointIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SplineActor.GetTargetRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PointIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator ASplineActor::GetTargetRotation(int32 PointIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineActor", "GetTargetRotation");

	Params::SplineActor_GetTargetRotation Parms{};

	Parms.PointIndex = PointIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SplineActor.GetUsePointOnce
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PointIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASplineActor::GetUsePointOnce(int32 PointIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineActor", "GetUsePointOnce");

	Params::SplineActor_GetUsePointOnce Parms{};

	Parms.PointIndex = PointIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SplineActor.GetUseTargetRotation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PointIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASplineActor::GetUseTargetRotation(int32 PointIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineActor", "GetUseTargetRotation");

	Params::SplineActor_GetUseTargetRotation Parms{};

	Parms.PointIndex = PointIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SplineCrowdFollowingComponent.OnSmartObjectInteractionFinished
// (Final, Native, Protected)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineCrowdFollowingComponent::OnSmartObjectInteractionFinished(bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineCrowdFollowingComponent", "OnSmartObjectInteractionFinished");

	Params::SplineCrowdFollowingComponent_OnSmartObjectInteractionFinished Parms{};

	Parms.bSuccess = bSuccess;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SplineMovementComponent.GetSplinePath
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  LastRoutePoint                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> USplineMovementComponent::GetSplinePath(int32* LastRoutePoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMovementComponent", "GetSplinePath");

	Params::SplineMovementComponent_GetSplinePath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LastRoutePoint != nullptr)
		*LastRoutePoint = Parms.LastRoutePoint;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SplineMovementComponent.IsLastPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USplineMovementComponent::IsLastPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMovementComponent", "IsLastPoint");

	Params::SplineMovementComponent_IsLastPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SplineMovementComponent.PauseSplineMovement
// (Final, Native, Public, BlueprintCallable)

void USplineMovementComponent::PauseSplineMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMovementComponent", "PauseSplineMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SplineMovementComponent.ResetSplineMovementDirection
// (Final, Native, Public, BlueprintCallable)

void USplineMovementComponent::ResetSplineMovementDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMovementComponent", "ResetSplineMovementDirection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SplineMovementComponent.ReturnToSpline
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bFindClosestPoint                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineMovementComponent::ReturnToSpline(bool bFindClosestPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMovementComponent", "ReturnToSpline");

	Params::SplineMovementComponent_ReturnToSpline Parms{};

	Parms.bFindClosestPoint = bFindClosestPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SplineMovementComponent.SaveSplineMovementDirection
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Direction                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineMovementComponent::SaveSplineMovementDirection(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMovementComponent", "SaveSplineMovementDirection");

	Params::SplineMovementComponent_SaveSplineMovementDirection Parms{};

	Parms.Direction = std::move(Direction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SplineMovementComponent.StartSplineMovement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASplineActor*                     SplineActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFindClosestPoint                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ResetCurrentPoint                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineMovementComponent::StartSplineMovement(class ASplineActor* SplineActor, bool bFindClosestPoint, bool ResetCurrentPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMovementComponent", "StartSplineMovement");

	Params::SplineMovementComponent_StartSplineMovement Parms{};

	Parms.SplineActor = SplineActor;
	Parms.bFindClosestPoint = bFindClosestPoint;
	Parms.ResetCurrentPoint = ResetCurrentPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SplineMovementComponent.StopSplineMovement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bResetSpline                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAborted                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineMovementComponent::StopSplineMovement(bool bResetSpline, bool bAborted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMovementComponent", "StopSplineMovement");

	Params::SplineMovementComponent_StopSplineMovement Parms{};

	Parms.bResetSpline = bResetSpline;
	Parms.bAborted = bAborted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SplineMovementComponent.UpdateMovementSpeed
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FEnchancedSplinePointParams&PointParams                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USplineMovementComponent::UpdateMovementSpeed(const struct FEnchancedSplinePointParams& PointParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMovementComponent", "UpdateMovementSpeed");

	Params::SplineMovementComponent_UpdateMovementSpeed Parms{};

	Parms.PointParams = std::move(PointParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnchancedSpline.SplineMovementComponent.GetCurrentPointMetaData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FEnchancedSplinePointParams*     PointParams                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USplineMovementComponent::GetCurrentPointMetaData(struct FEnchancedSplinePointParams* PointParams) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMovementComponent", "GetCurrentPointMetaData");

	Params::SplineMovementComponent_GetCurrentPointMetaData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PointParams != nullptr)
		*PointParams = std::move(Parms.PointParams);

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SplineMovementComponent.GetNextPointMetaData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FEnchancedSplinePointParams*     PointParams                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USplineMovementComponent::GetNextPointMetaData(struct FEnchancedSplinePointParams* PointParams) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMovementComponent", "GetNextPointMetaData");

	Params::SplineMovementComponent_GetNextPointMetaData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PointParams != nullptr)
		*PointParams = std::move(Parms.PointParams);

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SplineMovementComponent.GetNextPointWorldLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool*                                   bValid                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USplineMovementComponent::GetNextPointWorldLocation(bool* bValid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMovementComponent", "GetNextPointWorldLocation");

	Params::SplineMovementComponent_GetNextPointWorldLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bValid != nullptr)
		*bValid = Parms.bValid;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SplineMovementComponent.GetPointMetadataForIndex
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PointIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEnchancedSplinePointParams*     PointParams                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USplineMovementComponent::GetPointMetadataForIndex(int32 PointIndex, struct FEnchancedSplinePointParams* PointParams) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMovementComponent", "GetPointMetadataForIndex");

	Params::SplineMovementComponent_GetPointMetadataForIndex Parms{};

	Parms.PointIndex = PointIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PointParams != nullptr)
		*PointParams = std::move(Parms.PointParams);

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SplineMovementComponent.IsCurrentlyOnSpline
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USplineMovementComponent::IsCurrentlyOnSpline() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMovementComponent", "IsCurrentlyOnSpline");

	Params::SplineMovementComponent_IsCurrentlyOnSpline Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SplineMovementComponent.IsSplineAvailable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USplineMovementComponent::IsSplineAvailable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMovementComponent", "IsSplineAvailable");

	Params::SplineMovementComponent_IsSplineAvailable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SplineMovementComponent.IsSplineSetted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USplineMovementComponent::IsSplineSetted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMovementComponent", "IsSplineSetted");

	Params::SplineMovementComponent_IsSplineSetted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SplineMovementComponent.IsTargetPointReached
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USplineMovementComponent::IsTargetPointReached() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMovementComponent", "IsTargetPointReached");

	Params::SplineMovementComponent_IsTargetPointReached Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnchancedSpline.SplinePointAsyncAction.SplinePointAsyncAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FEnchancedSplinePointParams&Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class USplinePointAsyncAction*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USplinePointAsyncAction* USplinePointAsyncAction::SplinePointAsyncAction(const class UObject* WorldContextObject, class ACharacter* Character, const struct FEnchancedSplinePointParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SplinePointAsyncAction", "SplinePointAsyncAction");

	Params::SplinePointAsyncAction_SplinePointAsyncAction Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Character = Character;
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

