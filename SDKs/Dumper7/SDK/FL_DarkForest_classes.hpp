#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FL_DarkForest

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "E_NotificationItemType_structs.hpp"
#include "AIModule_structs.hpp"
#include "E_HUDStates_structs.hpp"
#include "InventorySystemModule_structs.hpp"
#include "Smuta_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FL_DarkForest.FL_DarkForest_C
// 0x0000 (0x0028 - 0x0028)
class UFL_DarkForest_C final : public UBlueprintFunctionLibrary
{
public:
	static void Add_New_Article_to_Codex(class FName ArticleId, class UObject* __WorldContext);
	static class UWBP_StatusTest_C* Add_Status_On_Character_HUD(bool IsBuff, class UTexture2D* StatusIcon, double StartTime, double EndTime, class UObject* __WorldContext, bool* Success);
	static void ClearCharacterEffects(class UAbilitySystemComponent* AbilityComponent, class ACharacter* Character, class UObject* __WorldContext);
	static void DayNightFade(bool Today, bool InstantFade, class UObject* __WorldContext);
	static void DayNightFadeSkip(class UObject* __WorldContext);
	static void End2DCutscene(class UObject* __WorldContext);
	static void FL_Dark_Forest_Get_Day_Night_Controller(class UObject* __WorldContext, class ABP_DayNightController_C** DayNightController);
	static void FL_DarkForest_itsNight(class UObject* __WorldContext, bool* Night);
	static class UUI_fade_C* FLDark_Forest_Fade(double ShowTime, bool DirectFadeIn, class UObject* __WorldContext);
	static void FLDarkForestGetCurrentBuildVersion(class UObject* __WorldContext, class FText* Build_Version);
	static void FLDarkForestZoneNotifile(const class FText& Name_0, class UObject* __WorldContext);
	static void Get_Actor_Actions_Asset(class AActor* Actor, class UObject* __WorldContext, class UActionDataAsset** ActionsDA);
	static void Get_Actor_Is_Hostile_To_Player(class AActor* Test_Actor, class UObject* __WorldContext, bool* bIsHostile);
	static void GetPlayerXP(class UObject* __WorldContext, int32* Current_XP, int32* CurrentLevel, int32* XP_for_next_level);
	static void GiveXPToPlayer(int32 XP, class UObject* __WorldContext);
	static void GrantEquipment(class AActor* Actor, class UEquipmentSetInfo* Equipment_Set_Info, EEquipmentSlotType Slot, class UObject* __WorldContext);
	static void IsCodexCategoryOpened(const class FText& CategoryName, bool Global, class UObject* __WorldContext, bool* Opened);
	static void Item_Notification(class UTexture2D* InItemIcon, const class FText& InItemName, int32 InAmount, E_NotificationItemType Type, class UObject* __WorldContext);
	static void Play2DCutscene(class UMediaSource* MediaSource, E_HUDStates AfterCutsceneHUDState, class UObject* __WorldContext);
	static void Play2DCutscenes(TArray<class UMediaSource*>& MediaSource, E_HUDStates AfterCutsceneHUDState, class UObject* __WorldContext);
	static void Recharge_Actors_Consumables_By_Class(class AActor* Actor, class UClass* ConsumableClass, int32 Amount, class UObject* __WorldContext);
	static void Recharge_All_Actors_Consumables(class AActor* Actor, class UObject* __WorldContext);
	static void RemoveEquipment(class AActor* Actor, EEquipmentSlotType Slot, class UObject* __WorldContext);
	static void SetNPCMovementMode(class ADefaultCharacter* DefaultCharacter, class AController* Controller, EGroundMovementMode MovementMode, class UObject* __WorldContext);
	static void SetRangeWeaponCooldown(bool Show, double Cooldown, const struct FLinearColor& InColor, class UObject* __WorldContext);
	static void SetXPToPlayer(int32 XP, class UObject* __WorldContext);
	static void ShowBossBar(class ANPC_CH_NewBattleSystem_Boss_C* Boss, class UObject* __WorldContext);
	static void ShowHUDMessage(const class FText& InText, float Duration, class UObject* __WorldContext);
	static void SkipHUDMessage(bool Instant, class UObject* __WorldContext);
	static void UpdateRagneWeaponCooldown(double StartTime, double EndTime, class UObject* WorldContextObject, class UObject* __WorldContext);

	void UpdateNPCMovementModeOnSpline(class AAIController* Controller, class APawn* Pawn, const struct FEnchancedSplinePointParams& Params_0, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		BP_STATIC_CLASS_IMPL("FL_DarkForest_C")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FL_DarkForest_C")
	}
	static class UFL_DarkForest_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFL_DarkForest_C>();
	}
};
DUMPER7_ASSERTS_UFL_DarkForest_C;

}

