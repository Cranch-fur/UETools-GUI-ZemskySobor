#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FlexibleQuestsRuntime

#include "Basic.hpp"

#include "FlexibleQuestsRuntime_classes.hpp"
#include "FlexibleQuestsRuntime_parameters.hpp"


namespace SDK
{

// Function FlexibleQuestsRuntime.BaseQuest.Print
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ToConsole                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ToScreen                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseQuest::Print(bool ToConsole, bool ToScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseQuest", "Print");

	Params::BaseQuest_Print Parms{};

	Parms.ToConsole = ToConsole;
	Parms.ToScreen = ToScreen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.BaseQuest.SetIsRuntimeChangeable
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewChangeable                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseQuest::SetIsRuntimeChangeable(bool bNewChangeable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseQuest", "SetIsRuntimeChangeable");

	Params::BaseQuest_SetIsRuntimeChangeable Parms{};

	Parms.bNewChangeable = bNewChangeable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.BaseQuest.StartQuest
// (Native, Event, Public, BlueprintEvent)

void UBaseQuest::StartQuest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseQuest", "StartQuest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.BaseQuest.GetAllSteps
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UQuestStep*>*              AllSteps                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBaseQuest::GetAllSteps(TArray<class UQuestStep*>* AllSteps) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseQuest", "GetAllSteps");

	Params::BaseQuest_GetAllSteps Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AllSteps != nullptr)
		*AllSteps = std::move(Parms.AllSteps);
}


// Function FlexibleQuestsRuntime.BaseQuest.GetAssetQuestStep
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName                       QuestStepID                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UQuestStep*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UQuestStep* UBaseQuest::GetAssetQuestStep(const class FName QuestStepID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseQuest", "GetAssetQuestStep");

	Params::BaseQuest_GetAssetQuestStep Parms{};

	Parms.QuestStepID = QuestStepID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.BaseQuest.GetDebugString
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString*                          DebugString                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseQuest::GetDebugString(class FString* DebugString) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseQuest", "GetDebugString");

	Params::BaseQuest_GetDebugString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DebugString != nullptr)
		*DebugString = std::move(Parms.DebugString);
}


// Function FlexibleQuestsRuntime.BaseQuest.GetIsRuntimeChangeable
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBaseQuest::GetIsRuntimeChangeable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseQuest", "GetIsRuntimeChangeable");

	Params::BaseQuest_GetIsRuntimeChangeable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.BaseQuest.GetRootSteps
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UQuestStep*>*              RootSteps                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBaseQuest::GetRootSteps(TArray<class UQuestStep*>* RootSteps) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseQuest", "GetRootSteps");

	Params::BaseQuest_GetRootSteps Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RootSteps != nullptr)
		*RootSteps = std::move(Parms.RootSteps);
}


// Function FlexibleQuestsRuntime.BaseQuest.IsEqual
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UBaseQuest*                 Other                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBaseQuest::IsEqual(const class UBaseQuest* Other) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseQuest", "IsEqual");

	Params::BaseQuest_IsEqual Parms{};

	Parms.Other = Other;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.BaseQuest.IsMainQuest
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBaseQuest::IsMainQuest() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseQuest", "IsMainQuest");

	Params::BaseQuest_IsMainQuest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.BaseQuest.IsTechQuest
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBaseQuest::IsTechQuest() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseQuest", "IsTechQuest");

	Params::BaseQuest_IsTechQuest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestStep.EndStep
// (Native, Event, Public, BlueprintEvent)

void UQuestStep::EndStep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStep", "EndStep");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestStep.GetEdge
// (Native, Public, BlueprintCallable)
// Parameters:
// class UQuestStep*                       ChildNode                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UQuestStepTransition*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UQuestStepTransition* UQuestStep::GetEdge(class UQuestStep* ChildNode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStep", "GetEdge");

	Params::QuestStep_GetEdge Parms{};

	Parms.ChildNode = ChildNode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestStep.OnTransitionReady
// (Final, Native, Protected)
// Parameters:
// class UQuestStepTransition*             Transition                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestStep::OnTransitionReady(class UQuestStepTransition* Transition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStep", "OnTransitionReady");

	Params::QuestStep_OnTransitionReady Parms{};

	Parms.Transition = Transition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestStep.StartStep
// (Native, Event, Public, BlueprintEvent)

void UQuestStep::StartStep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStep", "StartStep");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestStep.GetDebugString
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString*                          DebugString                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestStep::GetDebugString(class FString* DebugString) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStep", "GetDebugString");

	Params::QuestStep_GetDebugString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DebugString != nullptr)
		*DebugString = std::move(Parms.DebugString);
}


// Function FlexibleQuestsRuntime.QuestStep.GetDescription
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UQuestStep::GetDescription() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStep", "GetDescription");

	Params::QuestStep_GetDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestStep.GetQuest
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGenericQuest*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGenericQuest* UQuestStep::GetQuest() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStep", "GetQuest");

	Params::QuestStep_GetQuest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestStep.GetQuestState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UQuestState*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UQuestState* UQuestStep::GetQuestState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStep", "GetQuestState");

	Params::QuestStep_GetQuestState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestStep.GetUniqueVisibleStepName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UQuestStep::GetUniqueVisibleStepName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStep", "GetUniqueVisibleStepName");

	Params::QuestStep_GetUniqueVisibleStepName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestStep.IsLeafNode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UQuestStep::IsLeafNode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStep", "IsLeafNode");

	Params::QuestStep_IsLeafNode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestStep.IsStepActive
// (Final, Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UQuestStep::IsStepActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStep", "IsStepActive");

	Params::QuestStep_IsStepActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.MarkerManager.MarkerUpdateResponse
// (Final, Native, Private)
// Parameters:
// class UQuestMarker*                     marker                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EQuestMarkerState                       NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarkerManager::MarkerUpdateResponse(class UQuestMarker* marker, EQuestMarkerState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarkerManager", "MarkerUpdateResponse");

	Params::MarkerManager_MarkerUpdateResponse Parms{};

	Parms.marker = marker;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestManager.AddGlobalTag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              TagToAdd                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestManager::AddGlobalTag(const struct FGameplayTag& TagToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager", "AddGlobalTag");

	Params::QuestManager_AddGlobalTag Parms{};

	Parms.TagToAdd = std::move(TagToAdd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestManager.BindOnQuestEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              EventTag                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FGameplayTag& Tag, const class UObject* EventCauser)>&Event                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestManager::BindOnQuestEvent(const struct FGameplayTag& EventTag, const TDelegate<void(const struct FGameplayTag& Tag, const class UObject* EventCauser)>& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager", "BindOnQuestEvent");

	Params::QuestManager_BindOnQuestEvent Parms{};

	Parms.EventTag = std::move(EventTag);
	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestManager.CallQuestEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              EventTag                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    EventCauser                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestManager::CallQuestEvent(const struct FGameplayTag& EventTag, const class UObject* EventCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager", "CallQuestEvent");

	Params::QuestManager_CallQuestEvent Parms{};

	Parms.EventTag = std::move(EventTag);
	Parms.EventCauser = EventCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestManager.FinishQuest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UGenericQuest*              Quest                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EQuestResult                            WithResult                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestManager::FinishQuest(const class UGenericQuest* Quest, EQuestResult WithResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager", "FinishQuest");

	Params::QuestManager_FinishQuest Parms{};

	Parms.Quest = Quest;
	Parms.WithResult = WithResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestManager.FinishQuestByName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Name_0                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EQuestResult                            WithResult                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestManager::FinishQuestByName(const class FText& Name_0, EQuestResult WithResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager", "FinishQuestByName");

	Params::QuestManager_FinishQuestByName Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.WithResult = WithResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestManager.QuestFinishedResponse
// (Final, Native, Protected)
// Parameters:
// class UQuestState*                      FinishedQuest                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EQuestResult                            Result                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestManager::QuestFinishedResponse(class UQuestState* FinishedQuest, EQuestResult Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager", "QuestFinishedResponse");

	Params::QuestManager_QuestFinishedResponse Parms{};

	Parms.FinishedQuest = FinishedQuest;
	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestManager.RefreshCurrentGoals
// (Final, Native, Public, BlueprintCallable)

void UQuestManager::RefreshCurrentGoals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager", "RefreshCurrentGoals");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestManager.RemoveGlobalTag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              TagToRemove                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDeferParentTags                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestManager::RemoveGlobalTag(const struct FGameplayTag& TagToRemove, bool bDeferParentTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager", "RemoveGlobalTag");

	Params::QuestManager_RemoveGlobalTag Parms{};

	Parms.TagToRemove = std::move(TagToRemove);
	Parms.bDeferParentTags = bDeferParentTags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestManager.StartQuest
// (Native, Public, BlueprintCallable)
// Parameters:
// const class UGenericQuest*              QuestToStart                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UQuestManager::StartQuest(const class UGenericQuest* QuestToStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager", "StartQuest");

	Params::QuestManager_StartQuest Parms{};

	Parms.QuestToStart = QuestToStart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestManager.TrackQuest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UGenericQuest*              QuestToTrack                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestManager::TrackQuest(const class UGenericQuest* QuestToTrack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager", "TrackQuest");

	Params::QuestManager_TrackQuest Parms{};

	Parms.QuestToTrack = QuestToTrack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestManager.UnbindOnQuestEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              EventTag                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FGameplayTag& Tag, const class UObject* EventCauser)>&Event                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestManager::UnbindOnQuestEvent(const struct FGameplayTag& EventTag, const TDelegate<void(const struct FGameplayTag& Tag, const class UObject* EventCauser)>& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager", "UnbindOnQuestEvent");

	Params::QuestManager_UnbindOnQuestEvent Parms{};

	Parms.EventTag = std::move(EventTag);
	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestManager.UntrackQuest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UBaseQuest*                 QuestToUntrack                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestManager::UntrackQuest(const class UBaseQuest* QuestToUntrack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager", "UntrackQuest");

	Params::QuestManager_UntrackQuest Parms{};

	Parms.QuestToUntrack = QuestToUntrack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestManager.GetActiveQuestState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGenericQuest*              InQuestObject                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UQuestState*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UQuestState* UQuestManager::GetActiveQuestState(const class UGenericQuest* InQuestObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager", "GetActiveQuestState");

	Params::QuestManager_GetActiveQuestState Parms{};

	Parms.InQuestObject = InQuestObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestManager.GetGlobalTags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTagContainer      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGameplayTagContainer UQuestManager::GetGlobalTags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager", "GetGlobalTags");

	Params::QuestManager_GetGlobalTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestManager.GetQuestState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGenericQuest*              InQuestObject                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UQuestState*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UQuestState* UQuestManager::GetQuestState(const class UGenericQuest* InQuestObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager", "GetQuestState");

	Params::QuestManager_GetQuestState Parms{};

	Parms.InQuestObject = InQuestObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestManager.GetTrackingQuestInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UBaseQuest*                 InQuestObject                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UQuestState*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UQuestState* UQuestManager::GetTrackingQuestInstance(const class UBaseQuest* InQuestObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager", "GetTrackingQuestInstance");

	Params::QuestManager_GetTrackingQuestInstance Parms{};

	Parms.InQuestObject = InQuestObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestManager.IsQuestActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGenericQuest*              InQuest                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UQuestManager::IsQuestActive(const class UGenericQuest* InQuest) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager", "IsQuestActive");

	Params::QuestManager_IsQuestActive Parms{};

	Parms.InQuest = InQuest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestManager.IsQuestTracking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGenericQuest*              InQuest                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UQuestManager::IsQuestTracking(const class UGenericQuest* InQuest) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager", "IsQuestTracking");

	Params::QuestManager_IsQuestTracking Parms{};

	Parms.InQuest = InQuest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestMarker.AddStatusFromObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EQuestMarkerState                       State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestMarker::AddStatusFromObject(EQuestMarkerState State, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestMarker", "AddStatusFromObject");

	Params::QuestMarker_AddStatusFromObject Parms{};

	Parms.State = State;
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestMarker.RemoveStatusFromObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EQuestMarkerState                       State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestMarker::RemoveStatusFromObject(EQuestMarkerState State, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestMarker", "RemoveStatusFromObject");

	Params::QuestMarker_RemoveStatusFromObject Parms{};

	Parms.State = State;
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestMarker.GetCurrentState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EQuestMarkerState                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EQuestMarkerState UQuestMarker::GetCurrentState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestMarker", "GetCurrentState");

	Params::QuestMarker_GetCurrentState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestMarker.GetPendingQuest
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGenericQuest*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGenericQuest* UQuestMarker::GetPendingQuest() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestMarker", "GetPendingQuest");

	Params::QuestMarker_GetPendingQuest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestMarker.GetPendingQuestState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UQuestState*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UQuestState* UQuestMarker::GetPendingQuestState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestMarker", "GetPendingQuestState");

	Params::QuestMarker_GetPendingQuestState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestStepAction.OnLoaded_K2
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UQuestStep*                       FromQuestStep                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestStepAction::OnLoaded_K2(class UQuestStep* FromQuestStep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepAction", "OnLoaded_K2");

	Params::QuestStepAction_OnLoaded_K2 Parms{};

	Parms.FromQuestStep = FromQuestStep;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FlexibleQuestsRuntime.QuestStepAction.RunAction_K2
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UQuestStep*                       FromQuestStep                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestStepAction::RunAction_K2(class UQuestStep* FromQuestStep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepAction", "RunAction_K2");

	Params::QuestStepAction_RunAction_K2 Parms{};

	Parms.FromQuestStep = FromQuestStep;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FlexibleQuestsRuntime.QuestStepCondition.ChangeStatus
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bNewStatus                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestStepCondition::ChangeStatus(bool bNewStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepCondition", "ChangeStatus");

	Params::QuestStepCondition_ChangeStatus Parms{};

	Parms.bNewStatus = bNewStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestStepCondition.EndCondition_K2
// (Event, Protected, BlueprintEvent)

void UQuestStepCondition::EndCondition_K2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepCondition", "EndCondition_K2");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FlexibleQuestsRuntime.QuestStepCondition.OnLoaded
// (Native, Event, Protected, BlueprintEvent)

void UQuestStepCondition::OnLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepCondition", "OnLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestStepCondition.PrepareForSaving
// (Native, Event, Protected, BlueprintEvent)

void UQuestStepCondition::PrepareForSaving()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepCondition", "PrepareForSaving");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestStepCondition.StartCondition_K2
// (Event, Protected, BlueprintEvent)

void UQuestStepCondition::StartCondition_K2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepCondition", "StartCondition_K2");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FlexibleQuestsRuntime.QuestStepCondition.TargetsUpdate
// (Native, Event, Protected, BlueprintEvent)

void UQuestStepCondition::TargetsUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepCondition", "TargetsUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestStepCondition.Update
// (Final, Native, Public, BlueprintCallable)

void UQuestStepCondition::Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepCondition", "Update");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestStepCondition.GetConditionText
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UQuestStepCondition::GetConditionText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepCondition", "GetConditionText");

	Params::QuestStepCondition_GetConditionText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestStepCondition.GetDebugString
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString*                          DebugString                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestStepCondition::GetDebugString(class FString* DebugString) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepCondition", "GetDebugString");

	Params::QuestStepCondition_GetDebugString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DebugString != nullptr)
		*DebugString = std::move(Parms.DebugString);
}


// Function FlexibleQuestsRuntime.QuestStepCondition.GetQuest
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGenericQuest*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGenericQuest* UQuestStepCondition::GetQuest() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepCondition", "GetQuest");

	Params::QuestStepCondition_GetQuest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestStepCondition.GetQuestMarkerType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EQuestMarkerState                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EQuestMarkerState UQuestStepCondition::GetQuestMarkerType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepCondition", "GetQuestMarkerType");

	Params::QuestStepCondition_GetQuestMarkerType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestStepCondition.GetQuestState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UQuestState*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UQuestState* UQuestStepCondition::GetQuestState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepCondition", "GetQuestState");

	Params::QuestStepCondition_GetQuestState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestStepCondition.GetTargetActors
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<class AActor*>*                  Targets                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UQuestStepCondition::GetTargetActors(TArray<class AActor*>* Targets) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepCondition", "GetTargetActors");

	Params::QuestStepCondition_GetTargetActors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Targets != nullptr)
		*Targets = std::move(Parms.Targets);
}


// Function FlexibleQuestsRuntime.QuestStepCondition.GetTransition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UQuestStepTransition*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UQuestStepTransition* UQuestStepCondition::GetTransition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepCondition", "GetTransition");

	Params::QuestStepCondition_GetTransition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestStepCondition.IsConditionMet
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UQuestStepCondition::IsConditionMet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepCondition", "IsConditionMet");

	Params::QuestStepCondition_IsConditionMet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestStepTransition.OnConditionUpdated
// (Final, Native, Private)
// Parameters:
// class UQuestStepCondition*              ChangedCondition                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewStatus                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestStepTransition::OnConditionUpdated(class UQuestStepCondition* ChangedCondition, bool bNewStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepTransition", "OnConditionUpdated");

	Params::QuestStepTransition_OnConditionUpdated Parms{};

	Parms.ChangedCondition = ChangedCondition;
	Parms.bNewStatus = bNewStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestStepTransition.GetDebugString
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString*                          DebugString                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestStepTransition::GetDebugString(class FString* DebugString) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepTransition", "GetDebugString");

	Params::QuestStepTransition_GetDebugString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DebugString != nullptr)
		*DebugString = std::move(Parms.DebugString);
}


// Function FlexibleQuestsRuntime.QuestStepTransition.GetOwningQuestStep
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UQuestStep*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UQuestStep* UQuestStepTransition::GetOwningQuestStep() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepTransition", "GetOwningQuestStep");

	Params::QuestStepTransition_GetOwningQuestStep Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestStepTransition.GetQuest
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGenericQuest*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGenericQuest* UQuestStepTransition::GetQuest() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepTransition", "GetQuest");

	Params::QuestStepTransition_GetQuest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestStepTransition.GetQuestState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UQuestState*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UQuestState* UQuestStepTransition::GetQuestState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepTransition", "GetQuestState");

	Params::QuestStepTransition_GetQuestState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestStepTransition.IsActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UQuestStepTransition::IsActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestStepTransition", "IsActive");

	Params::QuestStepTransition_IsActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestSubsystem.ClearQuests
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestSubsystem::ClearQuests(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QuestSubsystem", "ClearQuests");

	Params::QuestSubsystem_ClearQuests Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestSubsystem.GetQuestManager
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UQuestManager*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UQuestManager* UQuestSubsystem::GetQuestManager(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QuestSubsystem", "GetQuestManager");

	Params::QuestSubsystem_GetQuestManager Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestSubsystem.TrackQuest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UGenericQuest*              QuestToTrack                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestSubsystem::TrackQuest(const class UObject* WorldContext, const class UGenericQuest* QuestToTrack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QuestSubsystem", "TrackQuest");

	Params::QuestSubsystem_TrackQuest Parms{};

	Parms.WorldContext = WorldContext;
	Parms.QuestToTrack = QuestToTrack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestSubsystem.UntrackQuest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UBaseQuest*                 QuestToUntrack                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestSubsystem::UntrackQuest(const class UObject* WorldContext, const class UBaseQuest* QuestToUntrack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QuestSubsystem", "UntrackQuest");

	Params::QuestSubsystem_UntrackQuest Parms{};

	Parms.WorldContext = WorldContext;
	Parms.QuestToUntrack = QuestToUntrack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.GenericQuest.GetNodesByLevel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UQuestStep*>*              Nodes                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGenericQuest::GetNodesByLevel(int32 Level, TArray<class UQuestStep*>* Nodes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GenericQuest", "GetNodesByLevel");

	Params::GenericQuest_GetNodesByLevel Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Nodes != nullptr)
		*Nodes = std::move(Parms.Nodes);
}


// Function FlexibleQuestsRuntime.GenericQuest.GetLevelNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGenericQuest::GetLevelNum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GenericQuest", "GetLevelNum");

	Params::GenericQuest_GetLevelNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.GenericQuest.GetQuestStepLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UQuestStep*                 QuestStep                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGenericQuest::GetQuestStepLevel(const class UQuestStep* QuestStep) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GenericQuest", "GetQuestStepLevel");

	Params::GenericQuest_GetQuestStepLevel Parms{};

	Parms.QuestStep = QuestStep;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestState.MoveToStep
// (Native, Public, BlueprintCallable)
// Parameters:
// class UQuestStep*                       InStepToMove                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestState::MoveToStep(class UQuestStep* InStepToMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestState", "MoveToStep");

	Params::QuestState_MoveToStep Parms{};

	Parms.InStepToMove = InStepToMove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestState.SetIsTracking
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsTracking                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestState::SetIsTracking(bool bNewIsTracking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestState", "SetIsTracking");

	Params::QuestState_SetIsTracking Parms{};

	Parms.bNewIsTracking = bNewIsTracking;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlexibleQuestsRuntime.QuestState.GetActivatedQuestStep
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName                       QuestStepID                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UQuestStep*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UQuestStep* UQuestState::GetActivatedQuestStep(const class FName QuestStepID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestState", "GetActivatedQuestStep");

	Params::QuestState_GetActivatedQuestStep Parms{};

	Parms.QuestStepID = QuestStepID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestState.GetCurrentStep
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UQuestStep*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UQuestStep* UQuestState::GetCurrentStep() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestState", "GetCurrentStep");

	Params::QuestState_GetCurrentStep Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestState.GetCurrentStepNotHidden
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UQuestStep*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UQuestStep* UQuestState::GetCurrentStepNotHidden() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestState", "GetCurrentStepNotHidden");

	Params::QuestState_GetCurrentStepNotHidden Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestState.GetIsTracking
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UQuestState::GetIsTracking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestState", "GetIsTracking");

	Params::QuestState_GetIsTracking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestState.GetLastVisibleQuestStep
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UQuestStep*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UQuestStep* UQuestState::GetLastVisibleQuestStep() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestState", "GetLastVisibleQuestStep");

	Params::QuestState_GetLastVisibleQuestStep Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestState.GetNextVisibleQuestStep
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UQuestStep*                 ForStep                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UQuestStep*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UQuestStep* UQuestState::GetNextVisibleQuestStep(const class UQuestStep* ForStep) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestState", "GetNextVisibleQuestStep");

	Params::QuestState_GetNextVisibleQuestStep Parms{};

	Parms.ForStep = ForStep;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestState.GetQuestAsset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGenericQuest*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGenericQuest* UQuestState::GetQuestAsset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestState", "GetQuestAsset");

	Params::QuestState_GetQuestAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestState.GetQuestName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UQuestState::GetQuestName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestState", "GetQuestName");

	Params::QuestState_GetQuestName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestState.GetQuestStatus
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EQuestStatus                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EQuestStatus UQuestState::GetQuestStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestState", "GetQuestStatus");

	Params::QuestState_GetQuestStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlexibleQuestsRuntime.QuestState.GetStepsHistory
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UQuestStep*>*              HistoricalSteps                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UQuestState::GetStepsHistory(TArray<class UQuestStep*>* HistoricalSteps) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestState", "GetStepsHistory");

	Params::QuestState_GetStepsHistory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HistoricalSteps != nullptr)
		*HistoricalSteps = std::move(Parms.HistoricalSteps);
}

}

