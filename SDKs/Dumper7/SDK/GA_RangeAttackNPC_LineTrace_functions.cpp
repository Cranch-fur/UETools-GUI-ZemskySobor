#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_RangeAttackNPC_LineTrace

#include "Basic.hpp"

#include "GA_RangeAttackNPC_LineTrace_classes.hpp"
#include "GA_RangeAttackNPC_LineTrace_parameters.hpp"


namespace SDK
{

// Function GA_RangeAttackNPC_LineTrace.GA_RangeAttackNPC_LineTrace_C.CalculateAttackPositionAndRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Accuracy                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  WeaponMesh                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class URangeEquipmentSet*               RangeWeaponEquipmentSet                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         StartPosition                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UGA_RangeAttackNPC_LineTrace_C::CalculateAttackPositionAndRotation(double Accuracy, class USceneComponent* WeaponMesh, class URangeEquipmentSet* RangeWeaponEquipmentSet, struct FVector* StartPosition, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_RangeAttackNPC_LineTrace_C", "CalculateAttackPositionAndRotation");

	Params::GA_RangeAttackNPC_LineTrace_C_CalculateAttackPositionAndRotation Parms{};

	Parms.Accuracy = Accuracy;
	Parms.WeaponMesh = WeaponMesh;
	Parms.RangeWeaponEquipmentSet = RangeWeaponEquipmentSet;

	UObject::ProcessEvent(Func, &Parms);

	if (StartPosition != nullptr)
		*StartPosition = std::move(Parms.StartPosition);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);

	return Parms.ReturnValue;
}


// Function GA_RangeAttackNPC_LineTrace.GA_RangeAttackNPC_LineTrace_C.CalculateDamage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UGA_RangeAttackNPC_LineTrace_C::CalculateDamage(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_RangeAttackNPC_LineTrace_C", "CalculateDamage");

	Params::GA_RangeAttackNPC_LineTrace_C_CalculateDamage Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_RangeAttackNPC_LineTrace.GA_RangeAttackNPC_LineTrace_C.CalculateHitDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// const struct FGameplayTagContainer&     DirectionTagCont                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FGameplayTagContainer*           InstigatorTags                                         (Parm, OutParm)

void UGA_RangeAttackNPC_LineTrace_C::CalculateHitDirection(const struct FHitResult& Hit, const struct FGameplayTagContainer& DirectionTagCont, struct FGameplayTagContainer* InstigatorTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_RangeAttackNPC_LineTrace_C", "CalculateHitDirection");

	Params::GA_RangeAttackNPC_LineTrace_C_CalculateHitDirection Parms{};

	Parms.Hit = std::move(Hit);
	Parms.DirectionTagCont = std::move(DirectionTagCont);

	UObject::ProcessEvent(Func, &Parms);

	if (InstigatorTags != nullptr)
		*InstigatorTags = std::move(Parms.InstigatorTags);
}


// Function GA_RangeAttackNPC_LineTrace.GA_RangeAttackNPC_LineTrace_C.ExecuteUbergraph_GA_RangeAttackNPC_LineTrace
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_RangeAttackNPC_LineTrace_C::ExecuteUbergraph_GA_RangeAttackNPC_LineTrace(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_RangeAttackNPC_LineTrace_C", "ExecuteUbergraph_GA_RangeAttackNPC_LineTrace");

	Params::GA_RangeAttackNPC_LineTrace_C_ExecuteUbergraph_GA_RangeAttackNPC_LineTrace Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_RangeAttackNPC_LineTrace.GA_RangeAttackNPC_LineTrace_C.SendHitEvent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTagContainer&     InstigatorTags                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTagContainer&     HitTypeTags                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void UGA_RangeAttackNPC_LineTrace_C::SendHitEvent(const struct FGameplayTagContainer& InstigatorTags, class AActor* Actor, const struct FGameplayTagContainer& HitTypeTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_RangeAttackNPC_LineTrace_C", "SendHitEvent");

	Params::GA_RangeAttackNPC_LineTrace_C_SendHitEvent Parms{};

	Parms.InstigatorTags = std::move(InstigatorTags);
	Parms.Actor = Actor;
	Parms.HitTypeTags = std::move(HitTypeTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_RangeAttackNPC_LineTrace.GA_RangeAttackNPC_LineTrace_C.SetUnreloadEffect
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGA_RangeAttackNPC_LineTrace_C::SetUnreloadEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_RangeAttackNPC_LineTrace_C", "SetUnreloadEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_RangeAttackNPC_LineTrace.GA_RangeAttackNPC_LineTrace_C.UpdateShotCount
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_RangeAttackNPC_LineTrace_C::UpdateShotCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_RangeAttackNPC_LineTrace_C", "UpdateShotCount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_RangeAttackNPC_LineTrace.GA_RangeAttackNPC_LineTrace_C.K2_OnEndAbility
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bWasCancelled                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_RangeAttackNPC_LineTrace_C::K2_OnEndAbility(bool bWasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_RangeAttackNPC_LineTrace_C", "K2_OnEndAbility");

	Params::GA_RangeAttackNPC_LineTrace_C_K2_OnEndAbility Parms{};

	Parms.bWasCancelled = bWasCancelled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_RangeAttackNPC_LineTrace.GA_RangeAttackNPC_LineTrace_C.NotifyCallback
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Selection                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UAnimNotifyState*           AnimNotifyState                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    End_                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_RangeAttackNPC_LineTrace_C::NotifyCallback(class FName Selection, const class UAnimNotifyState* AnimNotifyState, bool End_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_RangeAttackNPC_LineTrace_C", "NotifyCallback");

	Params::GA_RangeAttackNPC_LineTrace_C_NotifyCallback Parms{};

	Parms.Selection = Selection;
	Parms.AnimNotifyState = AnimNotifyState;
	Parms.End_ = End_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_RangeAttackNPC_LineTrace.GA_RangeAttackNPC_LineTrace_C.PerformAttack
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   StartPosition                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_RangeAttackNPC_LineTrace_C::PerformAttack(const struct FVector& StartPosition, const struct FRotator& Rotation, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_RangeAttackNPC_LineTrace_C", "PerformAttack");

	Params::GA_RangeAttackNPC_LineTrace_C_PerformAttack Parms{};

	Parms.StartPosition = std::move(StartPosition);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}

}

