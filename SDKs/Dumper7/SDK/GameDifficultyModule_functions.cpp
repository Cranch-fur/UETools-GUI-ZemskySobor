#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameDifficultyModule

#include "Basic.hpp"

#include "GameDifficultyModule_classes.hpp"
#include "GameDifficultyModule_parameters.hpp"


namespace SDK
{

// Function GameDifficultyModule.GameDifficultyComponent.OnDifficultyChanged
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// EGameDifficulty                         NewDifficulty                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameDifficultyComponent::OnDifficultyChanged(EGameDifficulty NewDifficulty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDifficultyComponent", "OnDifficultyChanged");

	Params::GameDifficultyComponent_OnDifficultyChanged Parms{};

	Parms.NewDifficulty = NewDifficulty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDifficultyModule.GameDifficultySubsystem.GetGameDifficulty
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGameDifficulty                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGameDifficulty UGameDifficultySubsystem::GetGameDifficulty(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameDifficultySubsystem", "GetGameDifficulty");

	Params::GameDifficultySubsystem_GetGameDifficulty Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameDifficultyModule.GameDifficultySubsystem.CanChangeDifficulty
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameDifficultySubsystem::CanChangeDifficulty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDifficultySubsystem", "CanChangeDifficulty");

	Params::GameDifficultySubsystem_CanChangeDifficulty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameDifficultyModule.GameDifficultySubsystem.ChangeDifficulty
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGameDifficulty                         NewDifficulty                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameDifficultySubsystem::ChangeDifficulty(EGameDifficulty NewDifficulty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDifficultySubsystem", "ChangeDifficulty");

	Params::GameDifficultySubsystem_ChangeDifficulty Parms{};

	Parms.NewDifficulty = NewDifficulty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDifficultyModule.GameDifficultySubsystem.GetCurrentDifficulty
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EGameDifficulty                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGameDifficulty UGameDifficultySubsystem::GetCurrentDifficulty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDifficultySubsystem", "GetCurrentDifficulty");

	Params::GameDifficultySubsystem_GetCurrentDifficulty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

