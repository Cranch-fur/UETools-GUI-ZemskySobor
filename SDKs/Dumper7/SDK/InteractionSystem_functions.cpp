#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InteractionSystem

#include "Basic.hpp"

#include "InteractionSystem_classes.hpp"
#include "InteractionSystem_parameters.hpp"


namespace SDK
{

// Function InteractionSystem.Interaction.InteractEvent
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           InteractedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInteractionComponent*            InteractComponent                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteraction::InteractEvent(class AActor* InteractedActor, class UInteractionComponent* InteractComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Interaction", "InteractEvent");

	Params::Interaction_InteractEvent Parms{};

	Parms.InteractedActor = InteractedActor;
	Parms.InteractComponent = InteractComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionComponent.HandleConditionsUpdated
// (Final, Native, Protected)
// Parameters:
// class UInteractionCondition*            Condition                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Result                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionComponent::HandleConditionsUpdated(class UInteractionCondition* Condition, bool Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionComponent", "HandleConditionsUpdated");

	Params::InteractionComponent_HandleConditionsUpdated Parms{};

	Parms.Condition = Condition;
	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionComponent.InteractionAreaBeginOverlapResponse
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UInteractionComponent::InteractionAreaBeginOverlapResponse(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionComponent", "InteractionAreaBeginOverlapResponse");

	Params::InteractionComponent_InteractionAreaBeginOverlapResponse Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionComponent.InteractionAreaEndOverlapResponse
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionComponent::InteractionAreaEndOverlapResponse(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionComponent", "InteractionAreaEndOverlapResponse");

	Params::InteractionComponent_InteractionAreaEndOverlapResponse Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionComponent.LookOnAreaCursorEnter
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              TouchedComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionComponent::LookOnAreaCursorEnter(class UPrimitiveComponent* TouchedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionComponent", "LookOnAreaCursorEnter");

	Params::InteractionComponent_LookOnAreaCursorEnter Parms{};

	Parms.TouchedComponent = TouchedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionComponent.LookOnAreaCursorLeave
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              TouchedComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionComponent::LookOnAreaCursorLeave(class UPrimitiveComponent* TouchedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionComponent", "LookOnAreaCursorLeave");

	Params::InteractionComponent_LookOnAreaCursorLeave Parms{};

	Parms.TouchedComponent = TouchedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionComponent.OnInteractionInputHandle
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FInputActionValue&         Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UInteractionComponent::OnInteractionInputHandle(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionComponent", "OnInteractionInputHandle");

	Params::InteractionComponent_OnInteractionInputHandle Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionComponent.PlayForceFeedbackEffect
// (Native, Protected)
// Parameters:
// class AActor*                           InteractedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionComponent::PlayForceFeedbackEffect(class AActor* InteractedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionComponent", "PlayForceFeedbackEffect");

	Params::InteractionComponent_PlayForceFeedbackEffect Parms{};

	Parms.InteractedActor = InteractedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionComponent.PlayInteractionSound
// (Native, Protected)
// Parameters:
// class AActor*                           InteractedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionComponent::PlayInteractionSound(class AActor* InteractedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionComponent", "PlayInteractionSound");

	Params::InteractionComponent_PlayInteractionSound Parms{};

	Parms.InteractedActor = InteractedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionComponent.PostInteract
// (Native, Protected)
// Parameters:
// class AActor*                           InteractedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionComponent::PostInteract(class AActor* InteractedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionComponent", "PostInteract");

	Params::InteractionComponent_PostInteract Parms{};

	Parms.InteractedActor = InteractedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionComponent.ToggleOutline
// (Native, Protected)
// Parameters:
// class AActor*                           InteractedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionComponent::ToggleOutline(class AActor* InteractedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionComponent", "ToggleOutline");

	Params::InteractionComponent_ToggleOutline Parms{};

	Parms.InteractedActor = InteractedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionComponent.TryInteract
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InteractedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionComponent::TryInteract(class AActor* InteractedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionComponent", "TryInteract");

	Params::InteractionComponent_TryInteract Parms{};

	Parms.InteractedActor = InteractedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionComponent.IsInteractionAllowed
// (Native, Protected, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInteractionComponent::IsInteractionAllowed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionComponent", "IsInteractionAllowed");

	Params::InteractionComponent_IsInteractionAllowed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InteractionSystem.InteractionCondition.ChangeStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewStatus                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionCondition::ChangeStatus(bool NewStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionCondition", "ChangeStatus");

	Params::InteractionCondition_ChangeStatus Parms{};

	Parms.NewStatus = NewStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionCondition.EndCondition
// (Native, Event, Public, BlueprintEvent)

void UInteractionCondition::EndCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionCondition", "EndCondition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionCondition.StartCondition
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionCondition::StartCondition(class AActor* OwnerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionCondition", "StartCondition");

	Params::InteractionCondition_StartCondition Parms{};

	Parms.OwnerActor = OwnerActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InteractionSystem.InteractionPlayerSubsystem.Activate
// (Final, Native, Public, BlueprintCallable)

void UInteractionPlayerSubsystem::Activate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionPlayerSubsystem", "Activate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionPlayerSubsystem.Deactivate
// (Final, Native, Public, BlueprintCallable)

void UInteractionPlayerSubsystem::Deactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionPlayerSubsystem", "Deactivate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionPlayerSubsystem.IsActivated
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInteractionPlayerSubsystem::IsActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionPlayerSubsystem", "IsActivated");

	Params::InteractionPlayerSubsystem_IsActivated Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InteractionSystem.InteractionPlayerSubsystem.OnTick
// (Final, Native, Private)

void UInteractionPlayerSubsystem::OnTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionPlayerSubsystem", "OnTick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionWidget.Close
// (Final, Native, Public, BlueprintCallable)

void UInteractionWidget::Close()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionWidget", "Close");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionWidget.ShowWidget
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInteractIsActive                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionWidget::ShowWidget(bool bVisible, bool bInteractIsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionWidget", "ShowWidget");

	Params::InteractionWidget_ShowWidget Parms{};

	Parms.bVisible = bVisible;
	Parms.bInteractIsActive = bInteractIsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InteractionSystem.InteractionWidget.UpdateInteractionText
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UInteractionWidget::UpdateInteractionText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionWidget", "UpdateInteractionText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractionSystem.InteractionWidget.Interact
// (Final, Native, Public, BlueprintCallable, Const)

void UInteractionWidget::Interact() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionWidget", "Interact");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InteractionSystem.InteractionWidgetComponent.Close
// (Final, Native, Public)

void UInteractionWidgetComponent::Close()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionWidgetComponent", "Close");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

