#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InventorySystemModule

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "InventorySystemModule_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// Class InventorySystemModule.ActorsOwnedItem
// 0x0030 (0x0058 - 0x0028)
class UActorsOwnedItem : public UObject
{
public:
	TSoftObjectPtr<class AActor>                  Owner;                                             // 0x0028(0x0028)(BlueprintVisible, BlueprintReadOnly, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitialized;                                      // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnInitialized(class AActor* NewOwner);
	void Initialize(class AActor* NewOwner);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorsOwnedItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorsOwnedItem")
	}
	static class UActorsOwnedItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorsOwnedItem>();
	}
};
DUMPER7_ASSERTS_UActorsOwnedItem;

// Class InventorySystemModule.BaseEquipmentSet
// 0x0000 (0x0058 - 0x0058)
class UBaseEquipmentSet : public UActorsOwnedItem
{
public:
	bool CanBeActive();
	void Clear();
	TArray<class UEquipmentItem*> GetAvailableEquipmentItems();
	struct FEquipmentParameters GetEquipmentParameters();
	struct FEquipInfo GetItemEquipInfo(EHand Hand);
	void Reset();

	float GetAttackDistance() const;
	TSubclassOf<class UEquipmentItem> GetEquipmentItem() const;
	EEquipmentType GetEquipmentType() const;
	bool HasItemInHand(EHand Hand) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BaseEquipmentSet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BaseEquipmentSet")
	}
	static class UBaseEquipmentSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseEquipmentSet>();
	}
};
DUMPER7_ASSERTS_UBaseEquipmentSet;

// Class InventorySystemModule.MeleeEquipmentSet
// 0x00A0 (0x00F8 - 0x0058)
class UMeleeEquipmentSet : public UBaseEquipmentSet
{
public:
	TMap<EHand, TSubclassOf<class UWeaponItem>>   DefaultWeapons;                                    // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EHand, class UWeaponItem*>               EquipedWeapons;                                    // 0x00A8(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MeleeEquipmentSet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MeleeEquipmentSet")
	}
	static class UMeleeEquipmentSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeleeEquipmentSet>();
	}
};
DUMPER7_ASSERTS_UMeleeEquipmentSet;

// Class InventorySystemModule.AdditionalWeaponSet
// 0x0000 (0x00F8 - 0x00F8)
class UAdditionalWeaponSet final : public UMeleeEquipmentSet
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AdditionalWeaponSet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AdditionalWeaponSet")
	}
	static class UAdditionalWeaponSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAdditionalWeaponSet>();
	}
};
DUMPER7_ASSERTS_UAdditionalWeaponSet;

// Class InventorySystemModule.EquipmentSetInfo
// 0x0008 (0x0060 - 0x0058)
class UEquipmentSetInfo : public UActorsOwnedItem
{
public:
	class UBaseEquipmentSet*                      EquipmentSet;                                      // 0x0058(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EquipmentSetInfo")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EquipmentSetInfo")
	}
	static class UEquipmentSetInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEquipmentSetInfo>();
	}
};
DUMPER7_ASSERTS_UEquipmentSetInfo;

// Class InventorySystemModule.BaseInventoryItem
// 0x0080 (0x00D8 - 0x0058)
class UBaseInventoryItem : public UActorsOwnedItem
{
public:
	class FText                                   Name_0;                                            // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0070(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ArtIcon;                                           // 0x00B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BaseInventoryItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BaseInventoryItem")
	}
	static class UBaseInventoryItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseInventoryItem>();
	}
};
DUMPER7_ASSERTS_UBaseInventoryItem;

// Class InventorySystemModule.AppearanceItem
// 0x00C0 (0x0198 - 0x00D8)
class UAppearanceItem : public UBaseInventoryItem
{
public:
	TMap<EEquipmentSlotType, class UEquipmentSetInfo*> EquipmentSetInfoMap;                          // 0x00D8(0x0050)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           AppearanceMesh;                                    // 0x0128(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshScale;                                         // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialOverridesDataAsset*>    AppearanceMaterialOverrides;                       // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    AppearanceEffects;                                 // 0x0168(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AppearanceTags;                                    // 0x0178(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	class UEquipmentItem* SwapItem(const EEquipmentSlotType& Slot, const EHand& Hand, class UEquipmentItem* Item);

	struct FEquipInfo GetEquipInfo(const EEquipmentSlotType& Slot, const EHand& Hand) const;
	void GetEquipInfoMap(const EEquipmentSlotType& Slot, TMap<EHand, struct FEquipInfo>* ResultEquipInfoMap) const;
	class UBaseEquipmentSet* GetEquipmentSet(const EEquipmentSlotType& Slot) const;
	TArray<class UBaseEquipmentSet*> GetEquipmentSetsByClass(const TSubclassOf<class UBaseEquipmentSet>& Class_0) const;
	class UEquipmentItem* GetItem(const EEquipmentSlotType& Slot, const EHand& Hand) const;
	EEquipmentSlotType GetSlotOfEquipmentSet(class UBaseEquipmentSet* Set) const;
	bool IsContainSlot(const EEquipmentSlotType& Slot) const;
	bool IsSlotCanBeActive(const EEquipmentSlotType& Slot) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AppearanceItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AppearanceItem")
	}
	static class UAppearanceItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAppearanceItem>();
	}
};
DUMPER7_ASSERTS_UAppearanceItem;

// Class InventorySystemModule.BaseEquipCondition
// 0x0000 (0x0028 - 0x0028)
class UBaseEquipCondition : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BaseEquipCondition")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BaseEquipCondition")
	}
	static class UBaseEquipCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseEquipCondition>();
	}
};
DUMPER7_ASSERTS_UBaseEquipCondition;

// Class InventorySystemModule.AppearenceEquipCondition
// 0x0008 (0x0030 - 0x0028)
class UAppearenceEquipCondition final : public UBaseEquipCondition
{
public:
	TSubclassOf<class UAppearanceItem>            RequiredAppearance;                                // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AppearenceEquipCondition")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AppearenceEquipCondition")
	}
	static class UAppearenceEquipCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAppearenceEquipCondition>();
	}
};
DUMPER7_ASSERTS_UAppearenceEquipCondition;

// Class InventorySystemModule.BaseRangeWeaponProjectile
// 0x0010 (0x02A8 - 0x0298)
class ABaseRangeWeaponProjectile final : public AActor
{
public:
	struct FGameplayEffectSpecHandle              DamageEffectSpec;                                  // 0x0298(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BaseRangeWeaponProjectile")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BaseRangeWeaponProjectile")
	}
	static class ABaseRangeWeaponProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABaseRangeWeaponProjectile>();
	}
};
DUMPER7_ASSERTS_ABaseRangeWeaponProjectile;

// Class InventorySystemModule.BlockingTagsEquipConditions
// 0x0020 (0x0048 - 0x0028)
class UBlockingTagsEquipConditions final : public UBaseEquipCondition
{
public:
	struct FGameplayTagContainer                  BlockingGameplayTagContainer;                      // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BlockingTagsEquipConditions")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BlockingTagsEquipConditions")
	}
	static class UBlockingTagsEquipConditions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlockingTagsEquipConditions>();
	}
};
DUMPER7_ASSERTS_UBlockingTagsEquipConditions;

// Class InventorySystemModule.Consumable
// 0x0000 (0x0298 - 0x0298)
class AConsumable : public AActor
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Consumable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Consumable")
	}
	static class AConsumable* GetDefaultObj()
	{
		return GetDefaultObjImpl<AConsumable>();
	}
};
DUMPER7_ASSERTS_AConsumable;

// Class InventorySystemModule.ConsumableEquipmentSet
// 0x0020 (0x0078 - 0x0058)
class UConsumableEquipmentSet final : public UBaseEquipmentSet
{
public:
	TArray<TSubclassOf<class UConsumableItem>>    DefaultConsumables;                                // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UConsumableItem*>                Consumables;                                       // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ConsumableEquipmentSet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ConsumableEquipmentSet")
	}
	static class UConsumableEquipmentSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConsumableEquipmentSet>();
	}
};
DUMPER7_ASSERTS_UConsumableEquipmentSet;

// Class InventorySystemModule.EquipmentItem
// 0x00B0 (0x0188 - 0x00D8)
class UEquipmentItem : public UBaseInventoryItem
{
public:
	struct FEquipInfo                             EquipInfo;                                         // 0x00D8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FEquipmentParameters                   EquipmentParameters;                               // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UBaseEquipCondition*>            EquipConditions;                                   // 0x0128(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CharacterSelectionIcon;                            // 0x0138(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              EquipmentIcon;                                     // 0x0160(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool CanBeEquiped(class UInventoryComponent* InventoryComponent);
	TMap<class FString, float> GetAttributes();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EquipmentItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EquipmentItem")
	}
	static class UEquipmentItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEquipmentItem>();
	}
};
DUMPER7_ASSERTS_UEquipmentItem;

// Class InventorySystemModule.ConsumableItem
// 0x0108 (0x0290 - 0x0188)
class UConsumableItem : public UEquipmentItem
{
public:
	EPostProcessType                              PostProcess;                                       // 0x0188(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            ConsumableEffect;                                  // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Actor;                                             // 0x0198(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             StatusIcon;                                        // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConsumableUseType                            UseType;                                           // 0x01C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     CurrentAmountAttribute;                            // 0x01D0(0x0038)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     MaxAmountAttribute;                                // 0x0208(0x0038)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAttributeSet>              AttributeSetClass;                                 // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 OldAmoun, int32 NewAmount)> OnCurrentAmountChanged;          // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 OldAmoun, int32 NewAmount)> OnMaxAmountChanged;              // 0x0258(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAbilitySystemComponent> AbilitySystemComponent;                            // 0x0268(0x0028)(BlueprintVisible, ExportObject, BlueprintReadOnly, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddAmount(int32 AmountToAdd);
	void Recharge();
	void SetCurrentAmount(int32 NewAmount);

	bool CanUse() const;
	int32 GetCurrentAmount() const;
	int32 GetMaxAmount() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ConsumableItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ConsumableItem")
	}
	static class UConsumableItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConsumableItem>();
	}
};
DUMPER7_ASSERTS_UConsumableItem;

// Class InventorySystemModule.EquipmentComponent
// 0x02B8 (0x0358 - 0x00A0)
class UEquipmentComponent : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x10];                                      // 0x00A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EEquipmentSlotType                            LastActiveSlot;                                    // 0x00B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UBaseEquipmentSet* Slot)> OnActiveSlotChanged;               // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnActiveSlotChangingFinished;                      // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UAppearanceItem* NewAppearance)> OnAppearanceChanged;        // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UEquipmentComponent* EquipComp)> OnEquipCompLoad;            // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EEquipmentSlotType Slot, class UEquipmentSetInfo* Info)> OnEquipmentGranted; // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x38];                                     // 0x0108(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EHand, class UWeaponMeshComponent*>      WeaponsMeshComponents;                             // 0x0140(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class ACharacter>              OwnerCharacter;                                    // 0x0190(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UInventoryComponent>     OwnerInventoryComponent;                           // 0x01B8(0x0028)(ExportObject, InstancedReference, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UAbilitySystemComponent> AbilityComponent;                                  // 0x01E0(0x0028)(ExportObject, InstancedReference, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEquipmentSlotType                            LockedOnSlot;                                      // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayEffect*                        EquipedWeaponEffect;                               // 0x0210(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UPhysicsAsset>           PhysicsAsset;                                      // 0x0218(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, struct FGameplayTag>        BodyPartsData;                                     // 0x0240(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNaturalWeaponData>             NaturalWeapons;                                    // 0x0290(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialOverridesDataAsset> SavedAppearanceOverrideMaterials;              // 0x02A0(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C8[0x38];                                     // 0x02C8(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UGameplayAbility*, EEquipmentSlotType> ActiveAbilitiesSlotUsageMap;                   // 0x0300(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddAbilitySlotUsage(class UGameplayAbility* Ability, EEquipmentSlotType Slot);
	bool CanUseOverlapDetection();
	void ChangeActiveSlot(EEquipmentSlotType NewSlot);
	bool ChangeAppearance(class UAppearanceItem* NewAppearance);
	void ChangeOverrideSlot(EEquipmentSlotType NewOverrideSlot);
	void ChangeWeaponsVisibility(bool NewVisibility);
	void ChangeWeaponsVisibilityByHand(const TArray<EHand>& Hands, bool NewVisibility);
	bool DoChangeAppearanceInstantly(class UAppearanceItem* NewAppearance);
	bool DoChangeSlotInstantly(EEquipmentSlotType NewSlot);
	EEquipmentSlotType GetCurrentActiveAbilitySlot();
	class UBaseEquipmentSet* GetCurrentActiveEquipment();
	EEquipmentSlotType GetCurrentActiveMeleeSlot();
	float GetEffectiveAttackDistance();
	class UStaticMeshComponent* GetWeaponMeshComponent(EHand Hand);
	bool K2_GrantEquipment(EEquipmentSlotType Slot, class UEquipmentSetInfo* Info);
	bool K2_RemoveEquipment(EEquipmentSlotType Slot);
	void LockOnMeleeEquipmentSet(TSubclassOf<class UMeleeEquipmentSet> SelectedSet);
	void OnWeaponBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void RefreshCurrentWeaponSet();
	void RemoveAbilitySlotUsage(class UGameplayAbility* Ability);
	void RemoveLockOnMeleeEquipmentSet();
	void ReturnLastActiveSlot();
	void SetCurrentAppearance(class UAppearanceItem* NewAppearance);
	void SetOverlapDetection(bool bShouldDetect, TDelegate<void(class AActor* OverlapedActor)> Callback);

	void CollectGameplayDebuggerData(TArray<struct FHitResult>* DebugHitData) const;
	struct FGameplayTag GetBodyPartTypeByBoneName(const class FName BoneName) const;
	class ACharacter* GetCharacter() const;
	EEquipmentSlotType GetCurrentActiveSlot() const;
	class UAppearanceItem* GetCurrentAppearance() const;
	EEquipmentType GetCurrentEquipmentTypeInHand(EHand Hand) const;
	EEquipmentDefenceStyle GetEquipmentDefenceStyle() const;
	EEquipmentHandType GetEquipmentHandType() const;
	bool GetEquipmentSetsByClass(TSubclassOf<class UBaseEquipmentSet> SlotClass, TArray<class UBaseEquipmentSet*>* OutSets) const;
	EEquipmentType GetEquipmentTypeAtSlot(EEquipmentSlotType Slot, EHand Hand) const;
	class UBaseEquipmentSet* GetFirstEquipmentSetByClass(TSubclassOf<class UBaseEquipmentSet> SlotClass) const;
	bool GetIsNeedToShowEquipment() const;
	bool IsWeaponVisible() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EquipmentComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EquipmentComponent")
	}
	static class UEquipmentComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEquipmentComponent>();
	}
};
DUMPER7_ASSERTS_UEquipmentComponent;

// Class InventorySystemModule.EquipmentItemAdditionalAnimSettings
// 0x0000 (0x0028 - 0x0028)
class UEquipmentItemAdditionalAnimSettings : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EquipmentItemAdditionalAnimSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EquipmentItemAdditionalAnimSettings")
	}
	static class UEquipmentItemAdditionalAnimSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEquipmentItemAdditionalAnimSettings>();
	}
};
DUMPER7_ASSERTS_UEquipmentItemAdditionalAnimSettings;

// Class InventorySystemModule.InventoryComponent
// 0x0030 (0x00D0 - 0x00A0)
class UInventoryComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x18];                                      // 0x00A0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBaseInventoryItem*>             InventoryItems;                                    // 0x00B8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         Money;                                             // 0x00C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddItemToInventory(class UBaseInventoryItem* Item);
	class UBaseInventoryItem* AddItemToInventoryByClass(TSubclassOf<class UBaseInventoryItem> ItemClass);
	bool ChangeMoneyValue(int32 Value);
	TArray<class UEquipmentItem*> GetEquipmentItemsOfType(TSubclassOf<class UEquipmentItem> Class_0, EAvailableInImagery Availability, EEquipmentType Type);
	TArray<class UBaseInventoryItem*> GetInventoryItemsOfType(TSubclassOf<class UBaseInventoryItem> Type);
	int32 GetMoneyValue();
	bool RemoveItemFromInventory(class UBaseInventoryItem* Item);
	void SetInventoryItems(const TArray<class UBaseInventoryItem*>& NewInventoryItems);
	TArray<class UBaseInventoryItem*> SwapInventoryItems(const TArray<class UBaseInventoryItem*>& NewInventoryItems);

	TArray<class UBaseInventoryItem*> GetInventoryItems() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InventoryComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InventoryComponent")
	}
	static class UInventoryComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInventoryComponent>();
	}
};
DUMPER7_ASSERTS_UInventoryComponent;

// Class InventorySystemModule.MainWeaponSet
// 0x0000 (0x00F8 - 0x00F8)
class UMainWeaponSet final : public UMeleeEquipmentSet
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MainWeaponSet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MainWeaponSet")
	}
	static class UMainWeaponSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMainWeaponSet>();
	}
};
DUMPER7_ASSERTS_UMainWeaponSet;

// Class InventorySystemModule.MaterialOverridesDataAsset
// 0x0050 (0x0080 - 0x0030)
class UMaterialOverridesDataAsset final : public UDataAsset
{
public:
	TMap<class FName, TSoftObjectPtr<class UMaterialInterface>> MeshOverrides;                       // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MaterialOverridesDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MaterialOverridesDataAsset")
	}
	static class UMaterialOverridesDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialOverridesDataAsset>();
	}
};
DUMPER7_ASSERTS_UMaterialOverridesDataAsset;

// Class InventorySystemModule.RangeEquipmentSet
// 0x0050 (0x00A8 - 0x0058)
class URangeEquipmentSet final : public UBaseEquipmentSet
{
public:
	TArray<TSubclassOf<class URangeWeaponItem>>   DefaultRangeWeapons;                               // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class URangeWeaponItem*>               RangeWeapons;                                      // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class URangeEquipmentSet* RangeSet)> OnRangeEquipSetLoad;          // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class URangeWeaponItem* NewActiveWeapon, int32 Index)> OnActiveRangeWeaponChanged; // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class URangeWeaponItem* GetActiveRangeWeapon();
	void SetActiveRangeWeaponIndex(int32 Index_0);

	void GetActiveRangeWeaponIndex(int32* Index_0) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RangeEquipmentSet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RangeEquipmentSet")
	}
	static class URangeEquipmentSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<URangeEquipmentSet>();
	}
};
DUMPER7_ASSERTS_URangeEquipmentSet;

// Class InventorySystemModule.RangeWeaponItem
// 0x0180 (0x0308 - 0x0188)
class URangeWeaponItem : public UEquipmentItem
{
public:
	float                                         AttackDistance;                                    // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHand                                         WeaponHand;                                        // 0x018C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18D[0x3];                                      // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ARangeWeaponProjectile>     WeaponProjectileClass;                             // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProjectileStartSocketName;                         // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         ShotFx;                                            // 0x01A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Throwable;                                         // 0x01A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            GravityCurve;                                      // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     MaxAmmoAttribute;                                  // 0x01B8(0x0038)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     CurrenAmmoAttribute;                               // 0x01F0(0x0038)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     MaxClipCapacityAttribute;                          // 0x0228(0x0038)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     CurrenClipCapacityAttribute;                       // 0x0260(0x0038)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            DamageEffectClass;                                 // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            HeadShotDamageEffectClass;                         // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            StealthDamageEffectClass;                          // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            StealthHeadShotDamageEffectClass;                  // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurface, class UNiagaraSystem*> ImpactVFX;                                         // 0x02B8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RangeWeaponItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RangeWeaponItem")
	}
	static class URangeWeaponItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<URangeWeaponItem>();
	}
};
DUMPER7_ASSERTS_URangeWeaponItem;

// Class InventorySystemModule.RangeWeaponProjectile
// 0x0120 (0x03B8 - 0x0298)
class ARangeWeaponProjectile : public AActor
{
public:
	struct FGameplayEffectSpecHandle              DamageEffectHandle;                                // 0x0298(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn, NativeAccessSpecifierPublic)
	bool                                          ShouldStun;                                        // 0x02A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTarget;                                        // 0x02A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA[0x6];                                      // 0x02AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetPosition;                                    // 0x02B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URangeWeaponItem*                       RangeWeaponItem;                                   // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             TraceHitResult;                                    // 0x02D0(0x00E8)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, ExposeOnSpawn, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RangeWeaponProjectile")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RangeWeaponProjectile")
	}
	static class ARangeWeaponProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARangeWeaponProjectile>();
	}
};
DUMPER7_ASSERTS_ARangeWeaponProjectile;

// Class InventorySystemModule.StealthWeaponSet
// 0x0000 (0x00F8 - 0x00F8)
class UStealthWeaponSet final : public UMeleeEquipmentSet
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("StealthWeaponSet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"StealthWeaponSet")
	}
	static class UStealthWeaponSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStealthWeaponSet>();
	}
};
DUMPER7_ASSERTS_UStealthWeaponSet;

// Class InventorySystemModule.WeaponItem
// 0x0008 (0x0190 - 0x0188)
class UWeaponItem : public UEquipmentItem
{
public:
	float                                         AttackDistance;                                    // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WeaponItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WeaponItem")
	}
	static class UWeaponItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponItem>();
	}
};
DUMPER7_ASSERTS_UWeaponItem;

// Class InventorySystemModule.WeaponMeshComponent
// 0x0280 (0x08B0 - 0x0630)
class UWeaponMeshComponent final : public UStaticMeshComponent
{
public:
	class ACharacter*                             OwnerCharacter;                                    // 0x0628(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_630[0x280];                                    // 0x0630(0x0280)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WeaponMeshComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WeaponMeshComponent")
	}
	static class UWeaponMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponMeshComponent>();
	}
};
DUMPER7_ASSERTS_UWeaponMeshComponent;

}

