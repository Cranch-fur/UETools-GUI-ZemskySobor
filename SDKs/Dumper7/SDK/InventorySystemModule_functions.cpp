#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InventorySystemModule

#include "Basic.hpp"

#include "InventorySystemModule_classes.hpp"
#include "InventorySystemModule_parameters.hpp"


namespace SDK
{

// Function InventorySystemModule.ActorsOwnedItem.BP_OnInitialized
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           NewOwner                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActorsOwnedItem::BP_OnInitialized(class AActor* NewOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorsOwnedItem", "BP_OnInitialized");

	Params::ActorsOwnedItem_BP_OnInitialized Parms{};

	Parms.NewOwner = NewOwner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventorySystemModule.ActorsOwnedItem.Initialize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewOwner                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActorsOwnedItem::Initialize(class AActor* NewOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorsOwnedItem", "Initialize");

	Params::ActorsOwnedItem_Initialize Parms{};

	Parms.NewOwner = NewOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.BaseEquipmentSet.CanBeActive
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBaseEquipmentSet::CanBeActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEquipmentSet", "CanBeActive");

	Params::BaseEquipmentSet_CanBeActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.BaseEquipmentSet.Clear
// (Native, Public, BlueprintCallable)

void UBaseEquipmentSet::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEquipmentSet", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.BaseEquipmentSet.GetAvailableEquipmentItems
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UEquipmentItem*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UEquipmentItem*> UBaseEquipmentSet::GetAvailableEquipmentItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEquipmentSet", "GetAvailableEquipmentItems");

	Params::BaseEquipmentSet_GetAvailableEquipmentItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.BaseEquipmentSet.GetEquipmentParameters
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FEquipmentParameters             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEquipmentParameters UBaseEquipmentSet::GetEquipmentParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEquipmentSet", "GetEquipmentParameters");

	Params::BaseEquipmentSet_GetEquipmentParameters Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.BaseEquipmentSet.GetItemEquipInfo
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EHand                                   Hand                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEquipInfo                       ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FEquipInfo UBaseEquipmentSet::GetItemEquipInfo(EHand Hand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEquipmentSet", "GetItemEquipInfo");

	Params::BaseEquipmentSet_GetItemEquipInfo Parms{};

	Parms.Hand = Hand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.BaseEquipmentSet.Reset
// (Final, Native, Public, BlueprintCallable)

void UBaseEquipmentSet::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEquipmentSet", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.BaseEquipmentSet.GetAttackDistance
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBaseEquipmentSet::GetAttackDistance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEquipmentSet", "GetAttackDistance");

	Params::BaseEquipmentSet_GetAttackDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.BaseEquipmentSet.GetEquipmentItem
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UEquipmentItem>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UEquipmentItem> UBaseEquipmentSet::GetEquipmentItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEquipmentSet", "GetEquipmentItem");

	Params::BaseEquipmentSet_GetEquipmentItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.BaseEquipmentSet.GetEquipmentType
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EEquipmentType                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EEquipmentType UBaseEquipmentSet::GetEquipmentType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEquipmentSet", "GetEquipmentType");

	Params::BaseEquipmentSet_GetEquipmentType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.BaseEquipmentSet.HasItemInHand
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHand                                   Hand                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBaseEquipmentSet::HasItemInHand(EHand Hand) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseEquipmentSet", "HasItemInHand");

	Params::BaseEquipmentSet_HasItemInHand Parms{};

	Parms.Hand = Hand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.AppearanceItem.SwapItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const EEquipmentSlotType&               Slot                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EHand&                            Hand                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UEquipmentItem*                   Item                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UEquipmentItem*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEquipmentItem* UAppearanceItem::SwapItem(const EEquipmentSlotType& Slot, const EHand& Hand, class UEquipmentItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppearanceItem", "SwapItem");

	Params::AppearanceItem_SwapItem Parms{};

	Parms.Slot = Slot;
	Parms.Hand = Hand;
	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.AppearanceItem.GetEquipInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EEquipmentSlotType&               Slot                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EHand&                            Hand                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEquipInfo                       ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FEquipInfo UAppearanceItem::GetEquipInfo(const EEquipmentSlotType& Slot, const EHand& Hand) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppearanceItem", "GetEquipInfo");

	Params::AppearanceItem_GetEquipInfo Parms{};

	Parms.Slot = Slot;
	Parms.Hand = Hand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.AppearanceItem.GetEquipInfoMap
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EEquipmentSlotType&               Slot                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<EHand, struct FEquipInfo>*         ResultEquipInfoMap                                     (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UAppearanceItem::GetEquipInfoMap(const EEquipmentSlotType& Slot, TMap<EHand, struct FEquipInfo>* ResultEquipInfoMap) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppearanceItem", "GetEquipInfoMap");

	Params::AppearanceItem_GetEquipInfoMap Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ResultEquipInfoMap != nullptr)
		*ResultEquipInfoMap = std::move(Parms.ResultEquipInfoMap);
}


// Function InventorySystemModule.AppearanceItem.GetEquipmentSet
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EEquipmentSlotType&               Slot                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBaseEquipmentSet*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBaseEquipmentSet* UAppearanceItem::GetEquipmentSet(const EEquipmentSlotType& Slot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppearanceItem", "GetEquipmentSet");

	Params::AppearanceItem_GetEquipmentSet Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.AppearanceItem.GetEquipmentSetsByClass
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSubclassOf<class UBaseEquipmentSet>&Class_0                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UBaseEquipmentSet*>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UBaseEquipmentSet*> UAppearanceItem::GetEquipmentSetsByClass(const TSubclassOf<class UBaseEquipmentSet>& Class_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppearanceItem", "GetEquipmentSetsByClass");

	Params::AppearanceItem_GetEquipmentSetsByClass Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.AppearanceItem.GetItem
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EEquipmentSlotType&               Slot                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EHand&                            Hand                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UEquipmentItem*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEquipmentItem* UAppearanceItem::GetItem(const EEquipmentSlotType& Slot, const EHand& Hand) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppearanceItem", "GetItem");

	Params::AppearanceItem_GetItem Parms{};

	Parms.Slot = Slot;
	Parms.Hand = Hand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.AppearanceItem.GetSlotOfEquipmentSet
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBaseEquipmentSet*                Set                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEquipmentSlotType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EEquipmentSlotType UAppearanceItem::GetSlotOfEquipmentSet(class UBaseEquipmentSet* Set) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppearanceItem", "GetSlotOfEquipmentSet");

	Params::AppearanceItem_GetSlotOfEquipmentSet Parms{};

	Parms.Set = Set;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.AppearanceItem.IsContainSlot
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EEquipmentSlotType&               Slot                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppearanceItem::IsContainSlot(const EEquipmentSlotType& Slot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppearanceItem", "IsContainSlot");

	Params::AppearanceItem_IsContainSlot Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.AppearanceItem.IsSlotCanBeActive
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EEquipmentSlotType&               Slot                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppearanceItem::IsSlotCanBeActive(const EEquipmentSlotType& Slot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppearanceItem", "IsSlotCanBeActive");

	Params::AppearanceItem_IsSlotCanBeActive Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentItem.CanBeEquiped
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInventoryComponent*              InventoryComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEquipmentItem::CanBeEquiped(class UInventoryComponent* InventoryComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentItem", "CanBeEquiped");

	Params::EquipmentItem_CanBeEquiped Parms{};

	Parms.InventoryComponent = InventoryComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentItem.GetAttributes
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, float>              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, float> UEquipmentItem::GetAttributes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentItem", "GetAttributes");

	Params::EquipmentItem_GetAttributes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.ConsumableItem.AddAmount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AmountToAdd                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConsumableItem::AddAmount(int32 AmountToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConsumableItem", "AddAmount");

	Params::ConsumableItem_AddAmount Parms{};

	Parms.AmountToAdd = AmountToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.ConsumableItem.Recharge
// (Final, Native, Public, BlueprintCallable)

void UConsumableItem::Recharge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConsumableItem", "Recharge");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.ConsumableItem.SetCurrentAmount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewAmount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConsumableItem::SetCurrentAmount(int32 NewAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConsumableItem", "SetCurrentAmount");

	Params::ConsumableItem_SetCurrentAmount Parms{};

	Parms.NewAmount = NewAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.ConsumableItem.CanUse
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConsumableItem::CanUse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConsumableItem", "CanUse");

	Params::ConsumableItem_CanUse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.ConsumableItem.GetCurrentAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UConsumableItem::GetCurrentAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConsumableItem", "GetCurrentAmount");

	Params::ConsumableItem_GetCurrentAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.ConsumableItem.GetMaxAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UConsumableItem::GetMaxAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConsumableItem", "GetMaxAmount");

	Params::ConsumableItem_GetMaxAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.AddAbilitySlotUsage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 Ability                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEquipmentSlotType                      Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEquipmentComponent::AddAbilitySlotUsage(class UGameplayAbility* Ability, EEquipmentSlotType Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "AddAbilitySlotUsage");

	Params::EquipmentComponent_AddAbilitySlotUsage Parms{};

	Parms.Ability = Ability;
	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.EquipmentComponent.CanUseOverlapDetection
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEquipmentComponent::CanUseOverlapDetection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "CanUseOverlapDetection");

	Params::EquipmentComponent_CanUseOverlapDetection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.ChangeActiveSlot
// (Native, Public, BlueprintCallable)
// Parameters:
// EEquipmentSlotType                      NewSlot                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEquipmentComponent::ChangeActiveSlot(EEquipmentSlotType NewSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "ChangeActiveSlot");

	Params::EquipmentComponent_ChangeActiveSlot Parms{};

	Parms.NewSlot = NewSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.EquipmentComponent.ChangeAppearance
// (Native, Public, BlueprintCallable)
// Parameters:
// class UAppearanceItem*                  NewAppearance                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEquipmentComponent::ChangeAppearance(class UAppearanceItem* NewAppearance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "ChangeAppearance");

	Params::EquipmentComponent_ChangeAppearance Parms{};

	Parms.NewAppearance = NewAppearance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.ChangeOverrideSlot
// (Native, Public, BlueprintCallable)
// Parameters:
// EEquipmentSlotType                      NewOverrideSlot                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEquipmentComponent::ChangeOverrideSlot(EEquipmentSlotType NewOverrideSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "ChangeOverrideSlot");

	Params::EquipmentComponent_ChangeOverrideSlot Parms{};

	Parms.NewOverrideSlot = NewOverrideSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.EquipmentComponent.ChangeWeaponsVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEquipmentComponent::ChangeWeaponsVisibility(bool NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "ChangeWeaponsVisibility");

	Params::EquipmentComponent_ChangeWeaponsVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.EquipmentComponent.ChangeWeaponsVisibilityByHand
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<EHand>&                    Hands                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEquipmentComponent::ChangeWeaponsVisibilityByHand(const TArray<EHand>& Hands, bool NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "ChangeWeaponsVisibilityByHand");

	Params::EquipmentComponent_ChangeWeaponsVisibilityByHand Parms{};

	Parms.Hands = std::move(Hands);
	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.EquipmentComponent.DoChangeAppearanceInstantly
// (Native, Public, BlueprintCallable)
// Parameters:
// class UAppearanceItem*                  NewAppearance                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEquipmentComponent::DoChangeAppearanceInstantly(class UAppearanceItem* NewAppearance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "DoChangeAppearanceInstantly");

	Params::EquipmentComponent_DoChangeAppearanceInstantly Parms{};

	Parms.NewAppearance = NewAppearance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.DoChangeSlotInstantly
// (Native, Public, BlueprintCallable)
// Parameters:
// EEquipmentSlotType                      NewSlot                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEquipmentComponent::DoChangeSlotInstantly(EEquipmentSlotType NewSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "DoChangeSlotInstantly");

	Params::EquipmentComponent_DoChangeSlotInstantly Parms{};

	Parms.NewSlot = NewSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.GetCurrentActiveAbilitySlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EEquipmentSlotType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EEquipmentSlotType UEquipmentComponent::GetCurrentActiveAbilitySlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "GetCurrentActiveAbilitySlot");

	Params::EquipmentComponent_GetCurrentActiveAbilitySlot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.GetCurrentActiveEquipment
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBaseEquipmentSet*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBaseEquipmentSet* UEquipmentComponent::GetCurrentActiveEquipment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "GetCurrentActiveEquipment");

	Params::EquipmentComponent_GetCurrentActiveEquipment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.GetCurrentActiveMeleeSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EEquipmentSlotType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EEquipmentSlotType UEquipmentComponent::GetCurrentActiveMeleeSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "GetCurrentActiveMeleeSlot");

	Params::EquipmentComponent_GetCurrentActiveMeleeSlot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.GetEffectiveAttackDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UEquipmentComponent::GetEffectiveAttackDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "GetEffectiveAttackDistance");

	Params::EquipmentComponent_GetEffectiveAttackDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.GetWeaponMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EHand                                   Hand                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMeshComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMeshComponent* UEquipmentComponent::GetWeaponMeshComponent(EHand Hand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "GetWeaponMeshComponent");

	Params::EquipmentComponent_GetWeaponMeshComponent Parms{};

	Parms.Hand = Hand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.K2_GrantEquipment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EEquipmentSlotType                      Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UEquipmentSetInfo*                Info                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEquipmentComponent::K2_GrantEquipment(EEquipmentSlotType Slot, class UEquipmentSetInfo* Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "K2_GrantEquipment");

	Params::EquipmentComponent_K2_GrantEquipment Parms{};

	Parms.Slot = Slot;
	Parms.Info = Info;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.K2_RemoveEquipment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EEquipmentSlotType                      Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEquipmentComponent::K2_RemoveEquipment(EEquipmentSlotType Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "K2_RemoveEquipment");

	Params::EquipmentComponent_K2_RemoveEquipment Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.LockOnMeleeEquipmentSet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMeleeEquipmentSet>   SelectedSet                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEquipmentComponent::LockOnMeleeEquipmentSet(TSubclassOf<class UMeleeEquipmentSet> SelectedSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "LockOnMeleeEquipmentSet");

	Params::EquipmentComponent_LockOnMeleeEquipmentSet Parms{};

	Parms.SelectedSet = SelectedSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.EquipmentComponent.OnWeaponBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UEquipmentComponent::OnWeaponBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "OnWeaponBeginOverlap");

	Params::EquipmentComponent_OnWeaponBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.EquipmentComponent.RefreshCurrentWeaponSet
// (Final, Native, Public, BlueprintCallable)

void UEquipmentComponent::RefreshCurrentWeaponSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "RefreshCurrentWeaponSet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.EquipmentComponent.RemoveAbilitySlotUsage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 Ability                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEquipmentComponent::RemoveAbilitySlotUsage(class UGameplayAbility* Ability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "RemoveAbilitySlotUsage");

	Params::EquipmentComponent_RemoveAbilitySlotUsage Parms{};

	Parms.Ability = Ability;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.EquipmentComponent.RemoveLockOnMeleeEquipmentSet
// (Final, Native, Public, BlueprintCallable)

void UEquipmentComponent::RemoveLockOnMeleeEquipmentSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "RemoveLockOnMeleeEquipmentSet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.EquipmentComponent.ReturnLastActiveSlot
// (Final, Native, Public, BlueprintCallable)

void UEquipmentComponent::ReturnLastActiveSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "ReturnLastActiveSlot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.EquipmentComponent.SetCurrentAppearance
// (Native, Public, BlueprintCallable)
// Parameters:
// class UAppearanceItem*                  NewAppearance                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEquipmentComponent::SetCurrentAppearance(class UAppearanceItem* NewAppearance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "SetCurrentAppearance");

	Params::EquipmentComponent_SetCurrentAppearance Parms{};

	Parms.NewAppearance = NewAppearance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.EquipmentComponent.SetOverlapDetection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldDetect                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class AActor* OverlapedActor)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEquipmentComponent::SetOverlapDetection(bool bShouldDetect, TDelegate<void(class AActor* OverlapedActor)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "SetOverlapDetection");

	Params::EquipmentComponent_SetOverlapDetection Parms{};

	Parms.bShouldDetect = bShouldDetect;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.EquipmentComponent.CollectGameplayDebuggerData
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FHitResult>*              DebugHitData                                           (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UEquipmentComponent::CollectGameplayDebuggerData(TArray<struct FHitResult>* DebugHitData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "CollectGameplayDebuggerData");

	Params::EquipmentComponent_CollectGameplayDebuggerData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DebugHitData != nullptr)
		*DebugHitData = std::move(Parms.DebugHitData);
}


// Function InventorySystemModule.EquipmentComponent.GetBodyPartTypeByBoneName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName                       BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UEquipmentComponent::GetBodyPartTypeByBoneName(const class FName BoneName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "GetBodyPartTypeByBoneName");

	Params::EquipmentComponent_GetBodyPartTypeByBoneName Parms{};

	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.GetCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACharacter*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACharacter* UEquipmentComponent::GetCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "GetCharacter");

	Params::EquipmentComponent_GetCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.GetCurrentActiveSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EEquipmentSlotType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EEquipmentSlotType UEquipmentComponent::GetCurrentActiveSlot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "GetCurrentActiveSlot");

	Params::EquipmentComponent_GetCurrentActiveSlot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.GetCurrentAppearance
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAppearanceItem*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAppearanceItem* UEquipmentComponent::GetCurrentAppearance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "GetCurrentAppearance");

	Params::EquipmentComponent_GetCurrentAppearance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.GetCurrentEquipmentTypeInHand
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHand                                   Hand                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEquipmentType                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EEquipmentType UEquipmentComponent::GetCurrentEquipmentTypeInHand(EHand Hand) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "GetCurrentEquipmentTypeInHand");

	Params::EquipmentComponent_GetCurrentEquipmentTypeInHand Parms{};

	Parms.Hand = Hand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.GetEquipmentDefenceStyle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EEquipmentDefenceStyle                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EEquipmentDefenceStyle UEquipmentComponent::GetEquipmentDefenceStyle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "GetEquipmentDefenceStyle");

	Params::EquipmentComponent_GetEquipmentDefenceStyle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.GetEquipmentHandType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EEquipmentHandType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EEquipmentHandType UEquipmentComponent::GetEquipmentHandType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "GetEquipmentHandType");

	Params::EquipmentComponent_GetEquipmentHandType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.GetEquipmentSetsByClass
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UBaseEquipmentSet>    SlotClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UBaseEquipmentSet*>*       OutSets                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEquipmentComponent::GetEquipmentSetsByClass(TSubclassOf<class UBaseEquipmentSet> SlotClass, TArray<class UBaseEquipmentSet*>* OutSets) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "GetEquipmentSetsByClass");

	Params::EquipmentComponent_GetEquipmentSetsByClass Parms{};

	Parms.SlotClass = SlotClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSets != nullptr)
		*OutSets = std::move(Parms.OutSets);

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.GetEquipmentTypeAtSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EEquipmentSlotType                      Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHand                                   Hand                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEquipmentType                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EEquipmentType UEquipmentComponent::GetEquipmentTypeAtSlot(EEquipmentSlotType Slot, EHand Hand) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "GetEquipmentTypeAtSlot");

	Params::EquipmentComponent_GetEquipmentTypeAtSlot Parms{};

	Parms.Slot = Slot;
	Parms.Hand = Hand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.GetFirstEquipmentSetByClass
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UBaseEquipmentSet>    SlotClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBaseEquipmentSet*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBaseEquipmentSet* UEquipmentComponent::GetFirstEquipmentSetByClass(TSubclassOf<class UBaseEquipmentSet> SlotClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "GetFirstEquipmentSetByClass");

	Params::EquipmentComponent_GetFirstEquipmentSetByClass Parms{};

	Parms.SlotClass = SlotClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.GetIsNeedToShowEquipment
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEquipmentComponent::GetIsNeedToShowEquipment() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "GetIsNeedToShowEquipment");

	Params::EquipmentComponent_GetIsNeedToShowEquipment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.EquipmentComponent.IsWeaponVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEquipmentComponent::IsWeaponVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentComponent", "IsWeaponVisible");

	Params::EquipmentComponent_IsWeaponVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.InventoryComponent.AddItemToInventory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBaseInventoryItem*               Item                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryComponent::AddItemToInventory(class UBaseInventoryItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "AddItemToInventory");

	Params::InventoryComponent_AddItemToInventory Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.InventoryComponent.AddItemToInventoryByClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UBaseInventoryItem>   ItemClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBaseInventoryItem*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBaseInventoryItem* UInventoryComponent::AddItemToInventoryByClass(TSubclassOf<class UBaseInventoryItem> ItemClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "AddItemToInventoryByClass");

	Params::InventoryComponent_AddItemToInventoryByClass Parms{};

	Parms.ItemClass = ItemClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.InventoryComponent.ChangeMoneyValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryComponent::ChangeMoneyValue(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "ChangeMoneyValue");

	Params::InventoryComponent_ChangeMoneyValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.InventoryComponent.GetEquipmentItemsOfType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UEquipmentItem>       Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAvailableInImagery                     Availability                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEquipmentType                          Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UEquipmentItem*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UEquipmentItem*> UInventoryComponent::GetEquipmentItemsOfType(TSubclassOf<class UEquipmentItem> Class_0, EAvailableInImagery Availability, EEquipmentType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "GetEquipmentItemsOfType");

	Params::InventoryComponent_GetEquipmentItemsOfType Parms{};

	Parms.Class_0 = Class_0;
	Parms.Availability = Availability;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.InventoryComponent.GetInventoryItemsOfType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UBaseInventoryItem>   Type                                                   (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UBaseInventoryItem*>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UBaseInventoryItem*> UInventoryComponent::GetInventoryItemsOfType(TSubclassOf<class UBaseInventoryItem> Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "GetInventoryItemsOfType");

	Params::InventoryComponent_GetInventoryItemsOfType Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.InventoryComponent.GetMoneyValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryComponent::GetMoneyValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "GetMoneyValue");

	Params::InventoryComponent_GetMoneyValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.InventoryComponent.RemoveItemFromInventory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBaseInventoryItem*               Item                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryComponent::RemoveItemFromInventory(class UBaseInventoryItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "RemoveItemFromInventory");

	Params::InventoryComponent_RemoveItemFromInventory Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.InventoryComponent.SetInventoryItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UBaseInventoryItem*>&NewInventoryItems                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UInventoryComponent::SetInventoryItems(const TArray<class UBaseInventoryItem*>& NewInventoryItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "SetInventoryItems");

	Params::InventoryComponent_SetInventoryItems Parms{};

	Parms.NewInventoryItems = std::move(NewInventoryItems);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.InventoryComponent.SwapInventoryItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UBaseInventoryItem*>&NewInventoryItems                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UBaseInventoryItem*>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UBaseInventoryItem*> UInventoryComponent::SwapInventoryItems(const TArray<class UBaseInventoryItem*>& NewInventoryItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "SwapInventoryItems");

	Params::InventoryComponent_SwapInventoryItems Parms{};

	Parms.NewInventoryItems = std::move(NewInventoryItems);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.InventoryComponent.GetInventoryItems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UBaseInventoryItem*>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UBaseInventoryItem*> UInventoryComponent::GetInventoryItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "GetInventoryItems");

	Params::InventoryComponent_GetInventoryItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.RangeEquipmentSet.GetActiveRangeWeapon
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class URangeWeaponItem*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URangeWeaponItem* URangeEquipmentSet::GetActiveRangeWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RangeEquipmentSet", "GetActiveRangeWeapon");

	Params::RangeEquipmentSet_GetActiveRangeWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InventorySystemModule.RangeEquipmentSet.SetActiveRangeWeaponIndex
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URangeEquipmentSet::SetActiveRangeWeaponIndex(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RangeEquipmentSet", "SetActiveRangeWeaponIndex");

	Params::RangeEquipmentSet_SetActiveRangeWeaponIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InventorySystemModule.RangeEquipmentSet.GetActiveRangeWeaponIndex
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32*                                  Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URangeEquipmentSet::GetActiveRangeWeaponIndex(int32* Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RangeEquipmentSet", "GetActiveRangeWeaponIndex");

	Params::RangeEquipmentSet_GetActiveRangeWeaponIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}

}

