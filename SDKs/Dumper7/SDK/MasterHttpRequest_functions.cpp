#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MasterHttpRequest

#include "Basic.hpp"

#include "MasterHttpRequest_classes.hpp"
#include "MasterHttpRequest_parameters.hpp"


namespace SDK
{

// Function MasterHttpRequest.MasterHttpRequestBPLibrary.DecodeJson
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          Value                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMasterHttpRequestBPLibrary::DecodeJson(const class FString& JsonString, const class FString& Key, bool* Success, class FString* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterHttpRequestBPLibrary", "DecodeJson");

	Params::MasterHttpRequestBPLibrary_DecodeJson Parms{};

	Parms.JsonString = std::move(JsonString);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;

	if (Value != nullptr)
		*Value = std::move(Parms.Value);
}


// Function MasterHttpRequest.MasterHttpRequestBPLibrary.DecodeNestedJson
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FNestedJson>*             keyValuePairArray                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMasterHttpRequestBPLibrary::DecodeNestedJson(const class FString& JsonString, const class FString& Key, bool* Success, TArray<struct FNestedJson>* keyValuePairArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterHttpRequestBPLibrary", "DecodeNestedJson");

	Params::MasterHttpRequestBPLibrary_DecodeNestedJson Parms{};

	Parms.JsonString = std::move(JsonString);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;

	if (keyValuePairArray != nullptr)
		*keyValuePairArray = std::move(Parms.keyValuePairArray);
}


// Function MasterHttpRequest.MasterHttpRequestBPLibrary.MasterRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// E_RequestType_CPP                       httpMethod                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FResponseData& ResponseData)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMasterHttpRequestBPLibrary::MasterRequest(const class FString& URL, E_RequestType_CPP httpMethod, TDelegate<void(const struct FResponseData& ResponseData)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterHttpRequestBPLibrary", "MasterRequest");

	Params::MasterHttpRequestBPLibrary_MasterRequest Parms{};

	Parms.URL = std::move(URL);
	Parms.httpMethod = httpMethod;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MasterHttpRequest.MasterHttpRequestBPLibrary.MasterRequestAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// E_RequestType_CPP                       httpMethod                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FKeyValuePair>&     bodyPayload                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<struct FKeyValuePair>&     headers                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FResponseData& ResponseData)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    debugResponse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMasterHttpRequestBPLibrary::MasterRequestAsync(const class FString& URL, E_RequestType_CPP httpMethod, const TArray<struct FKeyValuePair>& bodyPayload, const TArray<struct FKeyValuePair>& headers, TDelegate<void(const struct FResponseData& ResponseData)> Callback, bool debugResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterHttpRequestBPLibrary", "MasterRequestAsync");

	Params::MasterHttpRequestBPLibrary_MasterRequestAsync Parms{};

	Parms.URL = std::move(URL);
	Parms.httpMethod = httpMethod;
	Parms.bodyPayload = std::move(bodyPayload);
	Parms.headers = std::move(headers);
	Parms.Callback = Callback;
	Parms.debugResponse = debugResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MasterHttpRequest.MasterHttpRequestBPLibrary.MasterRequestWithPayloadAndHeaders
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// E_RequestType_CPP                       httpMethod                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FKeyValuePair>&     bodyPayload                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<struct FKeyValuePair>&     headers                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FResponseData& ResponseData)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    debugResponse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMasterHttpRequestBPLibrary::MasterRequestWithPayloadAndHeaders(const class FString& URL, E_RequestType_CPP httpMethod, const TArray<struct FKeyValuePair>& bodyPayload, const TArray<struct FKeyValuePair>& headers, TDelegate<void(const struct FResponseData& ResponseData)> Callback, bool debugResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterHttpRequestBPLibrary", "MasterRequestWithPayloadAndHeaders");

	Params::MasterHttpRequestBPLibrary_MasterRequestWithPayloadAndHeaders Parms{};

	Parms.URL = std::move(URL);
	Parms.httpMethod = httpMethod;
	Parms.bodyPayload = std::move(bodyPayload);
	Parms.headers = std::move(headers);
	Parms.Callback = Callback;
	Parms.debugResponse = debugResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

