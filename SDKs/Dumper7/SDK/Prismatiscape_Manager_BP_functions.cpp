#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prismatiscape_Manager_BP

#include "Basic.hpp"

#include "Prismatiscape_Manager_BP_classes.hpp"
#include "Prismatiscape_Manager_BP_parameters.hpp"


namespace SDK
{

// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.Add Component to Wind List
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class UOldBP_Prismatiscape_Deform_Component_C*&Component                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void APrismatiscape_Manager_BP_C::Add_Component_to_Wind_List(const class UOldBP_Prismatiscape_Deform_Component_C*& Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "Add Component to Wind List");

	Params::Prismatiscape_Manager_BP_C_Add_Component_to_Wind_List Parms{};

	Parms.Component = Component;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.Add Deform Pulse At Location
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPrismatiscape_PulseStruct&PulseData                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void APrismatiscape_Manager_BP_C::Add_Deform_Pulse_At_Location(const struct FPrismatiscape_PulseStruct& PulseData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "Add Deform Pulse At Location");

	Params::Prismatiscape_Manager_BP_C_Add_Deform_Pulse_At_Location Parms{};

	Parms.PulseData = std::move(PulseData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.Add Wind Pulse At Location
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPrismatiscape_PulseStruct&PulseData                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void APrismatiscape_Manager_BP_C::Add_Wind_Pulse_At_Location(const struct FPrismatiscape_PulseStruct& PulseData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "Add Wind Pulse At Location");

	Params::Prismatiscape_Manager_BP_C_Add_Wind_Pulse_At_Location Parms{};

	Parms.PulseData = std::move(PulseData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.ApplyPrismatiscapeStyleProfile
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrismatiscape_StyleProfile_C*    Profile                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void APrismatiscape_Manager_BP_C::ApplyPrismatiscapeStyleProfile(class UPrismatiscape_StyleProfile_C* Profile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "ApplyPrismatiscapeStyleProfile");

	Params::Prismatiscape_Manager_BP_C_ApplyPrismatiscapeStyleProfile Parms{};

	Parms.Profile = Profile;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.BP_GridIndexesFromLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>*                          GridIndices                                            (Parm, OutParm)

void APrismatiscape_Manager_BP_C::BP_GridIndexesFromLocation(const struct FVector& Location, TArray<int32>* GridIndices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "BP_GridIndexesFromLocation");

	Params::Prismatiscape_Manager_BP_C_BP_GridIndexesFromLocation Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (GridIndices != nullptr)
		*GridIndices = std::move(Parms.GridIndices);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.BP_HashInteractionBubbles
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector4>&                BubblePositionAndRadius                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FVector4>&                BubbleVelocityAndStrength                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FVector4>*                PositionAndRadius                                      (Parm, OutParm)
// TArray<struct FVector4>*                VelocityAndStrength                                    (Parm, OutParm)
// TArray<int32>*                          Lengths                                                (Parm, OutParm)

void APrismatiscape_Manager_BP_C::BP_HashInteractionBubbles(TArray<struct FVector4>& BubblePositionAndRadius, TArray<struct FVector4>& BubbleVelocityAndStrength, TArray<struct FVector4>* PositionAndRadius, TArray<struct FVector4>* VelocityAndStrength, TArray<int32>* Lengths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "BP_HashInteractionBubbles");

	Params::Prismatiscape_Manager_BP_C_BP_HashInteractionBubbles Parms{};

	Parms.BubblePositionAndRadius = std::move(BubblePositionAndRadius);
	Parms.BubbleVelocityAndStrength = std::move(BubbleVelocityAndStrength);

	UObject::ProcessEvent(Func, &Parms);

	BubblePositionAndRadius = std::move(Parms.BubblePositionAndRadius);
	BubbleVelocityAndStrength = std::move(Parms.BubbleVelocityAndStrength);

	if (PositionAndRadius != nullptr)
		*PositionAndRadius = std::move(Parms.PositionAndRadius);

	if (VelocityAndStrength != nullptr)
		*VelocityAndStrength = std::move(Parms.VelocityAndStrength);

	if (Lengths != nullptr)
		*Lengths = std::move(Parms.Lengths);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.Calculate RT Positions And Offsets
// (Public, BlueprintCallable, BlueprintEvent)

void APrismatiscape_Manager_BP_C::Calculate_RT_Positions_And_Offsets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "Calculate RT Positions And Offsets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.CalculateDeformPosition
// (Public, BlueprintCallable, BlueprintEvent)

void APrismatiscape_Manager_BP_C::CalculateDeformPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "CalculateDeformPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.CalculateSurfacePosition
// (Public, BlueprintCallable, BlueprintEvent)

void APrismatiscape_Manager_BP_C::CalculateSurfacePosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "CalculateSurfacePosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.CalculateWaterPosition
// (Public, BlueprintCallable, BlueprintEvent)

void APrismatiscape_Manager_BP_C::CalculateWaterPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "CalculateWaterPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.CalculateWindPosition
// (Public, BlueprintCallable, BlueprintEvent)

void APrismatiscape_Manager_BP_C::CalculateWindPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "CalculateWindPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.DrawDeformNormals
// (Public, BlueprintCallable, BlueprintEvent)

void APrismatiscape_Manager_BP_C::DrawDeformNormals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "DrawDeformNormals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.ExecuteUbergraph_Prismatiscape_Manager_BP
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APrismatiscape_Manager_BP_C::ExecuteUbergraph_Prismatiscape_Manager_BP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "ExecuteUbergraph_Prismatiscape_Manager_BP");

	Params::Prismatiscape_Manager_BP_C_ExecuteUbergraph_Prismatiscape_Manager_BP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.Init Component To Follow
// (Public, BlueprintCallable, BlueprintEvent)

void APrismatiscape_Manager_BP_C::Init_Component_To_Follow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "Init Component To Follow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.IsInDrawDistance?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   TheFellasLocation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   We_good_                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APrismatiscape_Manager_BP_C::IsInDrawDistance_(const struct FVector& TheFellasLocation, bool* We_good_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "IsInDrawDistance?");

	Params::Prismatiscape_Manager_BP_C_IsInDrawDistance_ Parms{};

	Parms.TheFellasLocation = std::move(TheFellasLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (We_good_ != nullptr)
		*We_good_ = Parms.We_good_;
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.OnRefershj
// (BlueprintCallable, BlueprintEvent)

void APrismatiscape_Manager_BP_C::OnRefershj()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "OnRefershj");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.PostTick
// (Event, Public, BlueprintEvent)

void APrismatiscape_Manager_BP_C::PostTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "PostTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.Process Pulses
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FPrismatiscape_PulseStruct>&ThisPulseArray                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FVector4>&                StartLocAndRad                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FVector4>&                EndLocAndRad                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FVector4>&                StartVelAndStr                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FVector4>&                EndVelAndStr                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void APrismatiscape_Manager_BP_C::Process_Pulses(TArray<struct FPrismatiscape_PulseStruct>& ThisPulseArray, TArray<struct FVector4>& StartLocAndRad, TArray<struct FVector4>& EndLocAndRad, TArray<struct FVector4>& StartVelAndStr, TArray<struct FVector4>& EndVelAndStr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "Process Pulses");

	Params::Prismatiscape_Manager_BP_C_Process_Pulses Parms{};

	Parms.ThisPulseArray = std::move(ThisPulseArray);
	Parms.StartLocAndRad = std::move(StartLocAndRad);
	Parms.EndLocAndRad = std::move(EndLocAndRad);
	Parms.StartVelAndStr = std::move(StartVelAndStr);
	Parms.EndVelAndStr = std::move(EndVelAndStr);

	UObject::ProcessEvent(Func, &Parms);

	ThisPulseArray = std::move(Parms.ThisPulseArray);
	StartLocAndRad = std::move(Parms.StartLocAndRad);
	EndLocAndRad = std::move(Parms.EndLocAndRad);
	StartVelAndStr = std::move(Parms.StartVelAndStr);
	EndVelAndStr = std::move(Parms.EndVelAndStr);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.ProcessAllPulses
// (Public, BlueprintCallable, BlueprintEvent)

void APrismatiscape_Manager_BP_C::ProcessAllPulses()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "ProcessAllPulses");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.ReapplyAllStyleProfiles
// (BlueprintCallable, BlueprintEvent)

void APrismatiscape_Manager_BP_C::ReapplyAllStyleProfiles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "ReapplyAllStyleProfiles");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void APrismatiscape_Manager_BP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.ReInitNiagaraSystem
// (BlueprintCallable, BlueprintEvent)

void APrismatiscape_Manager_BP_C::ReInitNiagaraSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "ReInitNiagaraSystem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.Remove Component from Draw List
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UOldBP_Prismatiscape_Deform_Component_C*Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void APrismatiscape_Manager_BP_C::Remove_Component_from_Draw_List(class UOldBP_Prismatiscape_Deform_Component_C* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "Remove Component from Draw List");

	Params::Prismatiscape_Manager_BP_C_Remove_Component_from_Draw_List Parms{};

	Parms.Component = Component;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.ReplaceCurrentStyleProfile
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrismatiscape_StyleProfile_C*    StyleProfile                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void APrismatiscape_Manager_BP_C::ReplaceCurrentStyleProfile(class UPrismatiscape_StyleProfile_C* StyleProfile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "ReplaceCurrentStyleProfile");

	Params::Prismatiscape_Manager_BP_C_ReplaceCurrentStyleProfile Parms{};

	Parms.StyleProfile = StyleProfile;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.Set Grid Tick Variables
// (Public, BlueprintCallable, BlueprintEvent)

void APrismatiscape_Manager_BP_C::Set_Grid_Tick_Variables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "Set Grid Tick Variables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.SetInitialParams
// (Public, BlueprintCallable, BlueprintEvent)

void APrismatiscape_Manager_BP_C::SetInitialParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "SetInitialParams");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.UpdateAllVisibilities
// (Event, Public, BlueprintCallable, BlueprintEvent)

void APrismatiscape_Manager_BP_C::UpdateAllVisibilities()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "UpdateAllVisibilities");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Prismatiscape_Manager_BP.Prismatiscape_Manager_BP_C.UpdateVisibility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32&                                  VisCycle                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const TArray<class UPrismatiscapeDrawComponent*>&TargetArray                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void APrismatiscape_Manager_BP_C::UpdateVisibility(int32& VisCycle, const TArray<class UPrismatiscapeDrawComponent*>& TargetArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Prismatiscape_Manager_BP_C", "UpdateVisibility");

	Params::Prismatiscape_Manager_BP_C_UpdateVisibility Parms{};

	Parms.VisCycle = VisCycle;
	Parms.TargetArray = std::move(TargetArray);

	UObject::ProcessEvent(Func, &Parms);

	VisCycle = Parms.VisCycle;
}

}

