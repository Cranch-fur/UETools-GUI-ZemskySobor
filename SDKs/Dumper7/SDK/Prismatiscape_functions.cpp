#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prismatiscape

#include "Basic.hpp"

#include "Prismatiscape_classes.hpp"
#include "Prismatiscape_parameters.hpp"


namespace SDK
{

// Function Prismatiscape.PrismatiscapeBPLibrary.PrismatiscapeSampleFunction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPrismatiscapeBPLibrary::PrismatiscapeSampleFunction(float Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PrismatiscapeBPLibrary", "PrismatiscapeSampleFunction");

	Params::PrismatiscapeBPLibrary_PrismatiscapeSampleFunction Parms{};

	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Prismatiscape.PrismatiscapeDrawComponent.ToggleDrawing
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPrismatiscapeDrawComponent::ToggleDrawing(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeDrawComponent", "ToggleDrawing");

	Params::PrismatiscapeDrawComponent_ToggleDrawing Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Prismatiscape.PrismatiscapeDeformComponent.BP_GetDeformCapsules
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FVector4>*                StartLocationAndRadius                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector4>*                EndLocationAndRadius                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector4>*                StartVelocityAndStrength                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector4>*                EndVelocityAndStrength                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UPrismatiscapeDeformComponent::BP_GetDeformCapsules(TArray<struct FVector4>* StartLocationAndRadius, TArray<struct FVector4>* EndLocationAndRadius, TArray<struct FVector4>* StartVelocityAndStrength, TArray<struct FVector4>* EndVelocityAndStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeDeformComponent", "BP_GetDeformCapsules");

	Params::PrismatiscapeDeformComponent_BP_GetDeformCapsules Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StartLocationAndRadius != nullptr)
		*StartLocationAndRadius = std::move(Parms.StartLocationAndRadius);

	if (EndLocationAndRadius != nullptr)
		*EndLocationAndRadius = std::move(Parms.EndLocationAndRadius);

	if (StartVelocityAndStrength != nullptr)
		*StartVelocityAndStrength = std::move(Parms.StartVelocityAndStrength);

	if (EndVelocityAndStrength != nullptr)
		*EndVelocityAndStrength = std::move(Parms.EndVelocityAndStrength);
}


// Function Prismatiscape.PrismatiscapeDeformComponent.GetDeformCapsules
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FVector4>*                StartLocationAndRadius                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector4>*                EndLocationAndRadius                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector4>*                StartVelocityAndStrength                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector4>*                EndVelocityAndStrength                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UPrismatiscapeDeformComponent::GetDeformCapsules(TArray<struct FVector4>* StartLocationAndRadius, TArray<struct FVector4>* EndLocationAndRadius, TArray<struct FVector4>* StartVelocityAndStrength, TArray<struct FVector4>* EndVelocityAndStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeDeformComponent", "GetDeformCapsules");

	Params::PrismatiscapeDeformComponent_GetDeformCapsules Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (StartLocationAndRadius != nullptr)
		*StartLocationAndRadius = std::move(Parms.StartLocationAndRadius);

	if (EndLocationAndRadius != nullptr)
		*EndLocationAndRadius = std::move(Parms.EndLocationAndRadius);

	if (StartVelocityAndStrength != nullptr)
		*StartVelocityAndStrength = std::move(Parms.StartVelocityAndStrength);

	if (EndVelocityAndStrength != nullptr)
		*EndVelocityAndStrength = std::move(Parms.EndVelocityAndStrength);
}


// Function Prismatiscape.PrismatiscapeDeformComponentCharacter.GetActiveBoneProfile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FPrismatiscapeBoneChainNameArray ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FPrismatiscapeBoneChainNameArray UPrismatiscapeDeformComponentCharacter::GetActiveBoneProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeDeformComponentCharacter", "GetActiveBoneProfile");

	Params::PrismatiscapeDeformComponentCharacter_GetActiveBoneProfile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Prismatiscape.PrismatiscapeDeformComponentCharacter.SetActiveProfile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewProfileName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPrismatiscapeDeformComponentCharacter::SetActiveProfile(class FName NewProfileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeDeformComponentCharacter", "SetActiveProfile");

	Params::PrismatiscapeDeformComponentCharacter_SetActiveProfile Parms{};

	Parms.NewProfileName = NewProfileName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Prismatiscape.PrismatiscapeDeformComponentTwoSocket.CalculateVelocity
// (Native, Event, Protected, BlueprintEvent)

void UPrismatiscapeDeformComponentTwoSocket::CalculateVelocity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeDeformComponentTwoSocket", "CalculateVelocity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Prismatiscape.PrismatiscapeDeformComponentTwoSocket.SetMeshComponent
// (Final, Native, Protected)

void UPrismatiscapeDeformComponentTwoSocket::SetMeshComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeDeformComponentTwoSocket", "SetMeshComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Prismatiscape.PrismatiscapeInteractionBubbleComponent.BP_GetInteractionBubbles
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FVector4>*                LocationAndRadius                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector4>*                VelocityAndStrength                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UPrismatiscapeInteractionBubbleComponent::BP_GetInteractionBubbles(TArray<struct FVector4>* LocationAndRadius, TArray<struct FVector4>* VelocityAndStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeInteractionBubbleComponent", "BP_GetInteractionBubbles");

	Params::PrismatiscapeInteractionBubbleComponent_BP_GetInteractionBubbles Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LocationAndRadius != nullptr)
		*LocationAndRadius = std::move(Parms.LocationAndRadius);

	if (VelocityAndStrength != nullptr)
		*VelocityAndStrength = std::move(Parms.VelocityAndStrength);
}


// Function Prismatiscape.PrismatiscapeInteractionBubbleComponent.GetInteractionBubbles
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FVector4>*                LocationAndRadius                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector4>*                VelocityAndStrength                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UPrismatiscapeInteractionBubbleComponent::GetInteractionBubbles(TArray<struct FVector4>* LocationAndRadius, TArray<struct FVector4>* VelocityAndStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeInteractionBubbleComponent", "GetInteractionBubbles");

	Params::PrismatiscapeInteractionBubbleComponent_GetInteractionBubbles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LocationAndRadius != nullptr)
		*LocationAndRadius = std::move(Parms.LocationAndRadius);

	if (VelocityAndStrength != nullptr)
		*VelocityAndStrength = std::move(Parms.VelocityAndStrength);
}


// Function Prismatiscape.PrismatiscapeManager.DrawDebugShapes
// (Native, Event, Public, BlueprintEvent)

void APrismatiscapeManager::DrawDebugShapes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeManager", "DrawDebugShapes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Prismatiscape.PrismatiscapeManager.FlushAllArrays
// (Native, Event, Public, BlueprintEvent)

void APrismatiscapeManager::FlushAllArrays()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeManager", "FlushAllArrays");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Prismatiscape.PrismatiscapeManager.GatherAllShapesFromRegisteredComponents
// (Native, Event, Public, BlueprintEvent)

void APrismatiscapeManager::GatherAllShapesFromRegisteredComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeManager", "GatherAllShapesFromRegisteredComponents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Prismatiscape.PrismatiscapeManager.PostTick
// (Event, Public, BlueprintEvent)

void APrismatiscapeManager::PostTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeManager", "PostTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Prismatiscape.PrismatiscapeManager.SetFollowLocationThisFrame
// (Native, Event, Public, BlueprintEvent)

void APrismatiscapeManager::SetFollowLocationThisFrame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeManager", "SetFollowLocationThisFrame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Prismatiscape.PrismatiscapeManager.UpdateAllVisibilities
// (Native, Event, Public, BlueprintEvent)

void APrismatiscapeManager::UpdateAllVisibilities()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeManager", "UpdateAllVisibilities");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Prismatiscape.PrismatiscapeProfileBase.OnPropertyChange
// (Event, Protected, BlueprintEvent)
// Parameters:
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPrismatiscapeProfileBase::OnPropertyChange(class FName PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeProfileBase", "OnPropertyChange");

	Params::PrismatiscapeProfileBase_OnPropertyChange Parms{};

	Parms.PropertyName = PropertyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Prismatiscape.PrismatiscapeSettings.GetPrismatiscapeSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPrismatiscapeSettings*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPrismatiscapeSettings* UPrismatiscapeSettings::GetPrismatiscapeSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PrismatiscapeSettings", "GetPrismatiscapeSettings");

	Params::PrismatiscapeSettings_GetPrismatiscapeSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Prismatiscape.PrismatiscapeSettings.GetDrawDebugShapes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPrismatiscapeSettings::GetDrawDebugShapes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeSettings", "GetDrawDebugShapes");

	Params::PrismatiscapeSettings_GetDrawDebugShapes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Prismatiscape.PrismatiscapeWindComponent.BP_GetWindCapsules
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FVector4>*                StartLocationAndRadius                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector4>*                EndLocationAndRadius                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector4>*                StartVelocityAndStrength                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector4>*                EndVelocityAndStrength                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UPrismatiscapeWindComponent::BP_GetWindCapsules(TArray<struct FVector4>* StartLocationAndRadius, TArray<struct FVector4>* EndLocationAndRadius, TArray<struct FVector4>* StartVelocityAndStrength, TArray<struct FVector4>* EndVelocityAndStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeWindComponent", "BP_GetWindCapsules");

	Params::PrismatiscapeWindComponent_BP_GetWindCapsules Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StartLocationAndRadius != nullptr)
		*StartLocationAndRadius = std::move(Parms.StartLocationAndRadius);

	if (EndLocationAndRadius != nullptr)
		*EndLocationAndRadius = std::move(Parms.EndLocationAndRadius);

	if (StartVelocityAndStrength != nullptr)
		*StartVelocityAndStrength = std::move(Parms.StartVelocityAndStrength);

	if (EndVelocityAndStrength != nullptr)
		*EndVelocityAndStrength = std::move(Parms.EndVelocityAndStrength);
}


// Function Prismatiscape.PrismatiscapeWindComponent.GetWindCapsules
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FVector4>*                StartLocationAndRadius                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector4>*                EndLocationAndRadius                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector4>*                StartVelocityAndStrength                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector4>*                EndVelocityAndStrength                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UPrismatiscapeWindComponent::GetWindCapsules(TArray<struct FVector4>* StartLocationAndRadius, TArray<struct FVector4>* EndLocationAndRadius, TArray<struct FVector4>* StartVelocityAndStrength, TArray<struct FVector4>* EndVelocityAndStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeWindComponent", "GetWindCapsules");

	Params::PrismatiscapeWindComponent_GetWindCapsules Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (StartLocationAndRadius != nullptr)
		*StartLocationAndRadius = std::move(Parms.StartLocationAndRadius);

	if (EndLocationAndRadius != nullptr)
		*EndLocationAndRadius = std::move(Parms.EndLocationAndRadius);

	if (StartVelocityAndStrength != nullptr)
		*StartVelocityAndStrength = std::move(Parms.StartVelocityAndStrength);

	if (EndVelocityAndStrength != nullptr)
		*EndVelocityAndStrength = std::move(Parms.EndVelocityAndStrength);
}


// Function Prismatiscape.PrismatiscapeWorldSubsystem.GetPrismatiscapeManager
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APrismatiscapeManager*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APrismatiscapeManager* UPrismatiscapeWorldSubsystem::GetPrismatiscapeManager(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PrismatiscapeWorldSubsystem", "GetPrismatiscapeManager");

	Params::PrismatiscapeWorldSubsystem_GetPrismatiscapeManager Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Prismatiscape.PrismatiscapeWorldSubsystem.OnWorldEndPlay
// (Final, Native, Public)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSessionEnded                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCleanupResources                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPrismatiscapeWorldSubsystem::OnWorldEndPlay(class UWorld* World, bool bSessionEnded, bool bCleanupResources)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeWorldSubsystem", "OnWorldEndPlay");

	Params::PrismatiscapeWorldSubsystem_OnWorldEndPlay Parms{};

	Parms.World = World;
	Parms.bSessionEnded = bSessionEnded;
	Parms.bCleanupResources = bCleanupResources;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Prismatiscape.PrismatiscapeWorldSubsystem.SpawnManager
// (Final, Native, Public)

void UPrismatiscapeWorldSubsystem::SpawnManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrismatiscapeWorldSubsystem", "SpawnManager");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

