#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QTE_Base

#include "Basic.hpp"

#include "QTE_Base_classes.hpp"
#include "QTE_Base_parameters.hpp"


namespace SDK
{

// Function QTE_Base.QTE_Base_C.ActorLoaded
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AQTE_Base_C::ActorLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Base_C", "ActorLoaded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Base.QTE_Base_C.ActorPreSave
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AQTE_Base_C::ActorPreSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Base_C", "ActorPreSave");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Base.QTE_Base_C.ActorSaved
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AQTE_Base_C::ActorSaved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Base_C", "ActorSaved");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Base.QTE_Base_C.ComponentsToSave
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UActorComponent*>*         Components                                             (Parm, OutParm, ContainsInstancedReference)

void AQTE_Base_C::ComponentsToSave(TArray<class UActorComponent*>* Components)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Base_C", "ComponentsToSave");

	Params::QTE_Base_C_ComponentsToSave Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Components != nullptr)
		*Components = std::move(Parms.Components);
}


// Function QTE_Base.QTE_Base_C.ExecuteUbergraph_QTE_Base
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Base_C::ExecuteUbergraph_QTE_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Base_C", "ExecuteUbergraph_QTE_Base");

	Params::QTE_Base_C_ExecuteUbergraph_QTE_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Base.QTE_Base_C.GetInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString*                          Value                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AQTE_Base_C::GetInfo(class FString* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Base_C", "GetInfo");

	Params::QTE_Base_C_GetInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = std::move(Parms.Value);
}


// Function QTE_Base.QTE_Base_C.Minigameresult
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Base_C::Minigameresult(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Base_C", "Minigameresult");

	Params::QTE_Base_C_Minigameresult Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Base.QTE_Base_C.RegainControl
// (BlueprintCallable, BlueprintEvent)

void AQTE_Base_C::RegainControl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Base_C", "RegainControl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Base.QTE_Base_C.Start Game
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AQTE_Station_C*                   QTEStation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    AutoWin                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PreviewTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Base_C::Start_Game(class APawn* Player, class AQTE_Station_C* QTEStation, bool AutoWin, double PreviewTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Base_C", "Start Game");

	Params::QTE_Base_C_Start_Game Parms{};

	Parms.Player = Player;
	Parms.QTEStation = QTEStation;
	Parms.AutoWin = AutoWin;
	Parms.PreviewTime = PreviewTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Base.QTE_Base_C.StopGame
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PlayerWin                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Canceled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Base_C::StopGame(bool PlayerWin, bool Canceled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Base_C", "StopGame");

	Params::QTE_Base_C_StopGame Parms{};

	Parms.PlayerWin = PlayerWin;
	Parms.Canceled = Canceled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Base.QTE_Base_C.TakeControl
// (BlueprintCallable, BlueprintEvent)

void AQTE_Base_C::TakeControl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Base_C", "TakeControl");

	UObject::ProcessEvent(Func, nullptr);
}

}

