#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QTE_Station

#include "Basic.hpp"

#include "QTE_Station_classes.hpp"
#include "QTE_Station_parameters.hpp"


namespace SDK
{

// Function QTE_Station.QTE_Station_C.ApplyBlendSpaces
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::ApplyBlendSpaces()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "ApplyBlendSpaces");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.ApplyBlendSpacesParam
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::ApplyBlendSpacesParam(double B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "ApplyBlendSpacesParam");

	Params::QTE_Station_C_ApplyBlendSpacesParam Parms{};

	Parms.B = B;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.ApplyFinishData
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FQTE_FinishData&           FinishData                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void AQTE_Station_C::ApplyFinishData(const struct FQTE_FinishData& FinishData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "ApplyFinishData");

	Params::QTE_Station_C_ApplyFinishData Parms{};

	Parms.FinishData = std::move(FinishData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.ApplyIdleAnimations
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::ApplyIdleAnimations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "ApplyIdleAnimations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.ApplyStageTimeDilation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FQTE_Stage&                Stage                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void AQTE_Station_C::ApplyStageTimeDilation(const struct FQTE_Stage& Stage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "ApplyStageTimeDilation");

	Params::QTE_Station_C_ApplyStageTimeDilation Parms{};

	Parms.Stage = std::move(Stage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.BroadcastEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::BroadcastEvent(const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "BroadcastEvent");

	Params::QTE_Station_C_BroadcastEvent Parms{};

	Parms.Tag = std::move(Tag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.ChooseDlgComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADefaultCharacter*                OptionalDialogTarget                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UAC_DialogueSystem_C*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class UAC_DialogueSystem_C* AQTE_Station_C::ChooseDlgComponent(class ADefaultCharacter* OptionalDialogTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "ChooseDlgComponent");

	Params::QTE_Station_C_ChooseDlgComponent Parms{};

	Parms.OptionalDialogTarget = OptionalDialogTarget;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function QTE_Station.QTE_Station_C.ControlRotation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Disable_Control_Rotation                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::ControlRotation(bool Disable_Control_Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "ControlRotation");

	Params::QTE_Station_C_ControlRotation Parms{};

	Parms.Disable_Control_Rotation = Disable_Control_Rotation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.DisableCollision
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TSoftObjectPtr<class AActor>>&   Actors                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AQTE_Station_C::DisableCollision(TArray<TSoftObjectPtr<class AActor>>& Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "DisableCollision");

	Params::QTE_Station_C_DisableCollision Parms{};

	Parms.Actors = std::move(Actors);

	UObject::ProcessEvent(Func, &Parms);

	Actors = std::move(Parms.Actors);
}


// Function QTE_Station.QTE_Station_C.Enable AM Camera
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::Enable_AM_Camera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "Enable AM Camera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.Enable Pawn Control
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::Enable_Pawn_Control()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "Enable Pawn Control");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.EnableCollision
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TSoftObjectPtr<class AActor>>&   Actors                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AQTE_Station_C::EnableCollision(TArray<TSoftObjectPtr<class AActor>>& Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "EnableCollision");

	Params::QTE_Station_C_EnableCollision Parms{};

	Parms.Actors = std::move(Actors);

	UObject::ProcessEvent(Func, &Parms);

	Actors = std::move(Parms.Actors);
}


// Function QTE_Station.QTE_Station_C.End Sequence Lose
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::End_Sequence_Lose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "End Sequence Lose");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.End Sequence Win
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::End_Sequence_Win()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "End Sequence Win");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.EndStartSequence
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::EndStartSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "EndStartSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.EndTimeout
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::EndTimeout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "EndTimeout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.ExecuteUbergraph_QTE_Station
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::ExecuteUbergraph_QTE_Station(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "ExecuteUbergraph_QTE_Station");

	Params::QTE_Station_C_ExecuteUbergraph_QTE_Station Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.Finish Sequence
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   LevelSequence                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const TDelegate<void()>&                Delegate                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::Finish_Sequence(class ULevelSequence* LevelSequence, const TDelegate<void()>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "Finish Sequence");

	Params::QTE_Station_C_Finish_Sequence Parms{};

	Parms.LevelSequence = LevelSequence;
	Parms.Delegate = Delegate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.GetPrevResult
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPrevResult*                            res                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::GetPrevResult(EPrevResult* res)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "GetPrevResult");

	Params::QTE_Station_C_GetPrevResult Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (res != nullptr)
		*res = Parms.res;
}


// Function QTE_Station.QTE_Station_C.GetRounds
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  Val                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::GetRounds(int32* Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "GetRounds");

	Params::QTE_Station_C_GetRounds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Val != nullptr)
		*Val = Parms.Val;
}


// Function QTE_Station.QTE_Station_C.GiveUp
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::GiveUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "GiveUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.InitAttachableActors
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::InitAttachableActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "InitAttachableActors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.Light Channels
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bChannel0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bChannel1                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bChannel2                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::Light_Channels(bool bChannel0, bool bChannel1, bool bChannel2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "Light Channels");

	Params::QTE_Station_C_Light_Channels Parms{};

	Parms.bChannel0 = bChannel0;
	Parms.bChannel1 = bChannel1;
	Parms.bChannel2 = bChannel2;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.LinkAnimLayer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::LinkAnimLayer(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "LinkAnimLayer");

	Params::QTE_Station_C_LinkAnimLayer Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.NewFunction
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Camera_Section_Name                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Camera_Section                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Camera_to_Set                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::NewFunction(class FName Camera_Section_Name, int32 Camera_Section, int32 Camera_to_Set)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "NewFunction");

	Params::QTE_Station_C_NewFunction Parms{};

	Parms.Camera_Section_Name = Camera_Section_Name;
	Parms.Camera_Section = Camera_Section;
	Parms.Camera_to_Set = Camera_to_Set;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.NPCWin
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::NPCWin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "NPCWin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.OnHintClosed
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FName&                      HintName                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::OnHintClosed(const class FName& HintName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "OnHintClosed");

	Params::QTE_Station_C_OnHintClosed Parms{};

	Parms.HintName = HintName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.OnInteract
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InteractedActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::OnInteract(class AActor* InteractedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "OnInteract");

	Params::QTE_Station_C_OnInteract Parms{};

	Parms.InteractedActor = InteractedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.OnNPCTurn
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EQTE_WhoFirst                           WhoFirrst                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::OnNPCTurn(EQTE_WhoFirst WhoFirrst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "OnNPCTurn");

	Params::QTE_Station_C_OnNPCTurn Parms{};

	Parms.WhoFirrst = WhoFirrst;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.OnPlayerFroze
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::OnPlayerFroze()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "OnPlayerFroze");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.OnPlayerTurn
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EQTE_WhoFirst                           WhoFirst                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::OnPlayerTurn(EQTE_WhoFirst WhoFirst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "OnPlayerTurn");

	Params::QTE_Station_C_OnPlayerTurn Parms{};

	Parms.WhoFirst = WhoFirst;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.OnStageResult
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PlayerWin                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Canceled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::OnStageResult(bool PlayerWin, bool Canceled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "OnStageResult");

	Params::QTE_Station_C_OnStageResult Parms{};

	Parms.PlayerWin = PlayerWin;
	Parms.Canceled = Canceled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.OnTagChanged
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              UpdatedTag                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// bool                                    Exists                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::OnTagChanged(const struct FGameplayTag& UpdatedTag, bool Exists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "OnTagChanged");

	Params::QTE_Station_C_OnTagChanged Parms{};

	Parms.UpdatedTag = std::move(UpdatedTag);
	Parms.Exists = Exists;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.Play QTE Sequence
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::Play_QTE_Sequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "Play QTE Sequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.Play Sequence
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   LevelSequence                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    QTE_                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Armwrestling                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::Play_Sequence(class ULevelSequence* LevelSequence, bool QTE_, bool Armwrestling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "Play Sequence");

	Params::QTE_Station_C_Play_Sequence Parms{};

	Parms.LevelSequence = LevelSequence;
	Parms.QTE_ = QTE_;
	Parms.Armwrestling = Armwrestling;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.Play Stage Sequence
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::Play_Stage_Sequence(bool Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "Play Stage Sequence");

	Params::QTE_Station_C_Play_Stage_Sequence Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.Play Start Sequence
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   Sequence                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::Play_Start_Sequence(class ULevelSequence* Sequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "Play Start Sequence");

	Params::QTE_Station_C_Play_Start_Sequence Parms{};

	Parms.Sequence = Sequence;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.PlayAnimation
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FQTE_Animate>&            Animation_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AQTE_Station_C::PlayAnimation(TArray<struct FQTE_Animate>& Animation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "PlayAnimation");

	Params::QTE_Station_C_PlayAnimation Parms{};

	Parms.Animation_0 = std::move(Animation_0);

	UObject::ProcessEvent(Func, &Parms);

	Animation_0 = std::move(Parms.Animation_0);
}


// Function QTE_Station.QTE_Station_C.PlayCharacterAnimation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FQTE_Animate&              Anim                                                   (BlueprintVisible, BlueprintReadOnly, Parm)

void AQTE_Station_C::PlayCharacterAnimation(const struct FQTE_Animate& Anim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "PlayCharacterAnimation");

	Params::QTE_Station_C_PlayCharacterAnimation Parms{};

	Parms.Anim = std::move(Anim);

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.PlayCurrentStage
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::PlayCurrentStage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "PlayCurrentStage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.PlayerWin
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::PlayerWin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "PlayerWin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.PlaySound
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class USoundBase>        Sound                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AQTE_Station_C::PlaySound(TSoftObjectPtr<class USoundBase> Sound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "PlaySound");

	Params::QTE_Station_C_PlaySound Parms{};

	Parms.Sound = Sound;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.QTE ArmWrestling Play
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::QTE_ArmWrestling_Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "QTE ArmWrestling Play");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.QTE Sequence Finished
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::QTE_Sequence_Finished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "QTE Sequence Finished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.QTESpawnButtonsCombination
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FQTE_Stage&                Stage                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void AQTE_Station_C::QTESpawnButtonsCombination(const struct FQTE_Stage& Stage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "QTESpawnButtonsCombination");

	Params::QTE_Station_C_QTESpawnButtonsCombination Parms{};

	Parms.Stage = std::move(Stage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.QTESpawnButtonsHolding
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FQTE_Stage&                Stage                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void AQTE_Station_C::QTESpawnButtonsHolding(const struct FQTE_Stage& Stage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "QTESpawnButtonsHolding");

	Params::QTE_Station_C_QTESpawnButtonsHolding Parms{};

	Parms.Stage = std::move(Stage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.QTESpawnLineHitting
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FQTE_Stage&                Stage                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void AQTE_Station_C::QTESpawnLineHitting(const struct FQTE_Stage& Stage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "QTESpawnLineHitting");

	Params::QTE_Station_C_QTESpawnLineHitting Parms{};

	Parms.Stage = std::move(Stage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.QTESpawnQuickTapping
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FQTE_Stage&                Stage                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void AQTE_Station_C::QTESpawnQuickTapping(const struct FQTE_Stage& Stage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "QTESpawnQuickTapping");

	Params::QTE_Station_C_QTESpawnQuickTapping Parms{};

	Parms.Stage = std::move(Stage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.QTESpawnQuickTappingEndOverlap
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FQTE_Stage&                Stage                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void AQTE_Station_C::QTESpawnQuickTappingEndOverlap(const struct FQTE_Stage& Stage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "QTESpawnQuickTappingEndOverlap");

	Params::QTE_Station_C_QTESpawnQuickTappingEndOverlap Parms{};

	Parms.Stage = std::move(Stage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.QTESpawnThreeStones
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FQTE_Stage&                Stage                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void AQTE_Station_C::QTESpawnThreeStones(const struct FQTE_Stage& Stage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "QTESpawnThreeStones");

	Params::QTE_Station_C_QTESpawnThreeStones Parms{};

	Parms.Stage = std::move(Stage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AQTE_Station_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.ReceiveTick
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "ReceiveTick");

	Params::QTE_Station_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.RedyToNextStage
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::RedyToNextStage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "RedyToNextStage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.Reset Lose Camera
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::Reset_Lose_Camera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "Reset Lose Camera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.Reset Win Camera
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::Reset_Win_Camera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "Reset Win Camera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.ResetAttachableActors
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::ResetAttachableActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "ResetAttachableActors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.restart
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::restart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "restart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.Run
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::Run()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "Run");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.Sequence Finished
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::Sequence_Finished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "Sequence Finished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.Set Input Type
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputType                              InputType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::Set_Input_Type(EInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "Set Input Type");

	Params::QTE_Station_C_Set_Input_Type Parms{};

	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.SetAutoWin
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::SetAutoWin(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "SetAutoWin");

	Params::QTE_Station_C_SetAutoWin Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.SetCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::SetCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "SetCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.SetQTEUI
// (BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::SetQTEUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "SetQTEUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.SetShowDebug
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::SetShowDebug(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "SetShowDebug");

	Params::QTE_Station_C_SetShowDebug Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.SetupPlayerWraping
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AQTE_Station_C::SetupPlayerWraping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "SetupPlayerWraping");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QTE_Station.QTE_Station_C.StartDialogue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class ADefaultCharacter> ParticipantB                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// TSoftObjectPtr<class UDlgDialogue>      Dialogue                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AQTE_Station_C::StartDialogue(TSoftObjectPtr<class ADefaultCharacter> ParticipantB, TSoftObjectPtr<class UDlgDialogue> Dialogue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "StartDialogue");

	Params::QTE_Station_C_StartDialogue Parms{};

	Parms.ParticipantB = ParticipantB;
	Parms.Dialogue = Dialogue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.StopMovement
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<class AActor*>&            Actors                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AQTE_Station_C::StopMovement(const TArray<class AActor*>& Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "StopMovement");

	Params::QTE_Station_C_StopMovement Parms{};

	Parms.Actors = std::move(Actors);

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.Teleport
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FQTE_Teleport>&     ToTeleport                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AQTE_Station_C::Teleport(const TArray<struct FQTE_Teleport>& ToTeleport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "Teleport");

	Params::QTE_Station_C_Teleport Parms{};

	Parms.ToTeleport = std::move(ToTeleport);

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.TeleportActorWithRelativeOffset
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FTransform&                RelativeTransformOffset                                (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::TeleportActorWithRelativeOffset(class AActor* Actor, class AActor* Target, const struct FTransform& RelativeTransformOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "TeleportActorWithRelativeOffset");

	Params::QTE_Station_C_TeleportActorWithRelativeOffset Parms{};

	Parms.Actor = Actor;
	Parms.Target = Target;
	Parms.RelativeTransformOffset = std::move(RelativeTransformOffset);

	UObject::ProcessEvent(Func, &Parms);
}


// Function QTE_Station.QTE_Station_C.UnlinkAnimLayer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQTE_Station_C::UnlinkAnimLayer(float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QTE_Station_C", "UnlinkAnimLayer");

	Params::QTE_Station_C_UnlinkAnimLayer Parms{};

	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}

}

