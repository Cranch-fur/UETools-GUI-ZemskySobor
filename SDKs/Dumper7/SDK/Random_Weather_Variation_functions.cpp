#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Random_Weather_Variation

#include "Basic.hpp"

#include "Random_Weather_Variation_classes.hpp"
#include "Random_Weather_Variation_parameters.hpp"


namespace SDK
{

// Function Random_Weather_Variation.Random_Weather_Variation_C.Apply State
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRandomWeatherVariation_State&Random_Weather_State                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void URandom_Weather_Variation_C::Apply_State(const struct FRandomWeatherVariation_State& Random_Weather_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Apply State");

	Params::Random_Weather_Variation_C_Apply_State Parms{};

	Parms.Random_Weather_State = std::move(Random_Weather_State);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Create Composite Probability Map
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class UUDS_Weather_Settings_C*, double>*Out                                                    (Parm, OutParm)

void URandom_Weather_Variation_C::Create_Composite_Probability_Map(TMap<class UUDS_Weather_Settings_C*, double>* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Create Composite Probability Map");

	Params::Random_Weather_Variation_C_Create_Composite_Probability_Map Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.ExecuteUbergraph_Random_Weather_Variation
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URandom_Weather_Variation_C::ExecuteUbergraph_Random_Weather_Variation(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "ExecuteUbergraph_Random_Weather_Variation");

	Params::Random_Weather_Variation_C_ExecuteUbergraph_Random_Weather_Variation Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Get Climate Temperature Ranges
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUDS_Climate_Preset_C*            Climate_Object                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EUDS_TemperatureType                    Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       Summer_Range                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       Autumn_Range                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       Winter_Range                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       Spring_Range                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URandom_Weather_Variation_C::Get_Climate_Temperature_Ranges(class UUDS_Climate_Preset_C* Climate_Object, EUDS_TemperatureType Scale, struct FVector2D* Summer_Range, struct FVector2D* Autumn_Range, struct FVector2D* Winter_Range, struct FVector2D* Spring_Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Get Climate Temperature Ranges");

	Params::Random_Weather_Variation_C_Get_Climate_Temperature_Ranges Parms{};

	Parms.Climate_Object = Climate_Object;
	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);

	if (Summer_Range != nullptr)
		*Summer_Range = std::move(Parms.Summer_Range);

	if (Autumn_Range != nullptr)
		*Autumn_Range = std::move(Parms.Autumn_Range);

	if (Winter_Range != nullptr)
		*Winter_Range = std::move(Parms.Winter_Range);

	if (Spring_Range != nullptr)
		*Spring_Range = std::move(Parms.Spring_Range);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Get State for Saving
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRandomWeatherVariation_State*   State                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AWeather_Override_Volume_C**      Volume_0                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void URandom_Weather_Variation_C::Get_State_for_Saving(struct FRandomWeatherVariation_State* State, class AWeather_Override_Volume_C** Volume_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Get State for Saving");

	Params::Random_Weather_Variation_C_Get_State_for_Saving Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (State != nullptr)
		*State = std::move(Parms.State);

	if (Volume_0 != nullptr)
		*Volume_0 = Parms.Volume_0;
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Increment Change Timer
// (Public, BlueprintCallable, BlueprintEvent)

void URandom_Weather_Variation_C::Increment_Change_Timer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Increment Change Timer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Increment Random Weather
// (Public, BlueprintCallable, BlueprintEvent)

void URandom_Weather_Variation_C::Increment_Random_Weather()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Increment Random Weather");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Initialize
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Ultra_Dynamic_Weather_C*      UDW_0                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const TMap<class UUDS_Weather_Settings_C*, double>&Summer_Probabilities                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// const TMap<class UUDS_Weather_Settings_C*, double>&Autumn_Probabilities                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// const TMap<class UUDS_Weather_Settings_C*, double>&Winter_Probabilities                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// const TMap<class UUDS_Weather_Settings_C*, double>&Spring_Probabilities                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Start_with_Random_Type                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URandom_Weather_Variation_C::Initialize(class ABP_Ultra_Dynamic_Weather_C* UDW_0, const TMap<class UUDS_Weather_Settings_C*, double>& Summer_Probabilities, const TMap<class UUDS_Weather_Settings_C*, double>& Autumn_Probabilities, const TMap<class UUDS_Weather_Settings_C*, double>& Winter_Probabilities, const TMap<class UUDS_Weather_Settings_C*, double>& Spring_Probabilities, bool Start_with_Random_Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Initialize");

	Params::Random_Weather_Variation_C_Initialize Parms{};

	Parms.UDW_0 = UDW_0;
	Parms.Summer_Probabilities = std::move(Summer_Probabilities);
	Parms.Autumn_Probabilities = std::move(Autumn_Probabilities);
	Parms.Winter_Probabilities = std::move(Winter_Probabilities);
	Parms.Spring_Probabilities = std::move(Spring_Probabilities);
	Parms.Start_with_Random_Type = Start_with_Random_Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Make Climate Probability Map
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUDS_Climate_Preset_C*            Climate                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class UUDS_Weather_Settings_C*, double>*Probability_Map                                        (Parm, OutParm)

void URandom_Weather_Variation_C::Make_Climate_Probability_Map(class UUDS_Climate_Preset_C* Climate, int32 Season, TMap<class UUDS_Weather_Settings_C*, double>* Probability_Map)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Make Climate Probability Map");

	Params::Random_Weather_Variation_C_Make_Climate_Probability_Map Parms{};

	Parms.Climate = Climate;
	Parms.Season = Season;

	UObject::ProcessEvent(Func, &Parms);

	if (Probability_Map != nullptr)
		*Probability_Map = std::move(Parms.Probability_Map);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URandom_Weather_Variation_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "ReceiveTick");

	Params::Random_Weather_Variation_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Reset Timer
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void URandom_Weather_Variation_C::Reset_Timer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Reset Timer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Select New Random Weather Type
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Filter_Probability_List                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URandom_Weather_Variation_C::Select_New_Random_Weather_Type(bool Filter_Probability_List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Select New Random Weather Type");

	Params::Random_Weather_Variation_C_Select_New_Random_Weather_Type Parms{};

	Parms.Filter_Probability_List = Filter_Probability_List;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Random_Weather_Variation.Random_Weather_Variation_C.Start Timer to Select New Weather
// (BlueprintCallable, BlueprintEvent)

void URandom_Weather_Variation_C::Start_Timer_to_Select_New_Weather()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Random_Weather_Variation_C", "Start Timer to Select New Weather");

	UObject::ProcessEvent(Func, nullptr);
}

}

