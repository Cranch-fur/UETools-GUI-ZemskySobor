#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SubtitlesSystem

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "SubtitlesSystem_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class SubtitlesSystem.SubtitlesManager
// 0x0078 (0x00A8 - 0x0030)
class USubtitlesManager final : public UWorldSubsystem
{
public:
	TMulticastInlineDelegate<void()>              OnCurrentSubtitlesIsOver;                          // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USubtitlesWidget*                       SubtitlesWidget;                                   // 0x0040(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSubtitledSound>                SubtitlesQueue;                                    // 0x0048(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_58[0x50];                                      // 0x0058(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static float GetPhraseTypeAdditionalTime(const ESubtitlePhraseType PhraseType);
	static uint8 GetPhraseTypePriority(const ESubtitlePhraseType PhraseType);
	static class USubtitlesWidget* GetSubtitlesWidget_K2(const class UObject* WorldContext);
	static void PlaySubtitledSound(const class UObject* WorldContext, const struct FSubtitlesInfo& SubtitlesInfo, class USoundWave* Sound, class USoundAttenuation* SoundSettings, class AActor* SoundOwner, bool bSkipQueue);
	static void RegisterSubtitlesWidget(const class UObject* WorldContext, class USubtitlesWidget* NewSubtitlesWidget);
	static void SkipAllSubtitles(const class UObject* WorldContext);

	bool GetSubtitleOfType(ESubtitlePhraseType Type, struct FSubtitledSound* OutSubtitle);

	void GetSubtitlesQueue(TArray<struct FSubtitlesInfo>* OutSubtitles) const;
	class USubtitlesWidget* GetSubtitlesWidget() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SubtitlesManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SubtitlesManager")
	}
	static class USubtitlesManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubtitlesManager>();
	}
};
DUMPER7_ASSERTS_USubtitlesManager;

// Class SubtitlesSystem.SubtitlesWidget
// 0x0020 (0x02E0 - 0x02C0)
class USubtitlesWidget : public UUserWidget
{
public:
	class USizeBox*                               SizeContainer;                                     // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                           MainContainer;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWidget*>                        SubtitlesWidgets;                                  // 0x02D0(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	class UWidget* AddedSubtitle(const struct FSubtitlesInfo& SubtitlesInfo);
	void RegisterSubtitleWidget(class UWidget* SubtitleWidget);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SubtitlesWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SubtitlesWidget")
	}
	static class USubtitlesWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubtitlesWidget>();
	}
};
DUMPER7_ASSERTS_USubtitlesWidget;

}

