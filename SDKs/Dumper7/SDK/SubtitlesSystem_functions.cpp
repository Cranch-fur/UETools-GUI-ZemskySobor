#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SubtitlesSystem

#include "Basic.hpp"

#include "SubtitlesSystem_classes.hpp"
#include "SubtitlesSystem_parameters.hpp"


namespace SDK
{

// Function SubtitlesSystem.SubtitlesManager.GetPhraseTypeAdditionalTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const ESubtitlePhraseType               PhraseType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USubtitlesManager::GetPhraseTypeAdditionalTime(const ESubtitlePhraseType PhraseType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubtitlesManager", "GetPhraseTypeAdditionalTime");

	Params::SubtitlesManager_GetPhraseTypeAdditionalTime Parms{};

	Parms.PhraseType = PhraseType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubtitlesSystem.SubtitlesManager.GetPhraseTypePriority
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const ESubtitlePhraseType               PhraseType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 USubtitlesManager::GetPhraseTypePriority(const ESubtitlePhraseType PhraseType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubtitlesManager", "GetPhraseTypePriority");

	Params::SubtitlesManager_GetPhraseTypePriority Parms{};

	Parms.PhraseType = PhraseType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubtitlesSystem.SubtitlesManager.GetSubtitlesWidget_K2
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USubtitlesWidget*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USubtitlesWidget* USubtitlesManager::GetSubtitlesWidget_K2(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubtitlesManager", "GetSubtitlesWidget_K2");

	Params::SubtitlesManager_GetSubtitlesWidget_K2 Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubtitlesSystem.SubtitlesManager.PlaySubtitledSound
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSubtitlesInfo&            SubtitlesInfo                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USoundWave*                       Sound                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundAttenuation*                SoundSettings                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           SoundOwner                                             (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSkipQueue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USubtitlesManager::PlaySubtitledSound(const class UObject* WorldContext, const struct FSubtitlesInfo& SubtitlesInfo, class USoundWave* Sound, class USoundAttenuation* SoundSettings, class AActor* SoundOwner, bool bSkipQueue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubtitlesManager", "PlaySubtitledSound");

	Params::SubtitlesManager_PlaySubtitledSound Parms{};

	Parms.WorldContext = WorldContext;
	Parms.SubtitlesInfo = std::move(SubtitlesInfo);
	Parms.Sound = Sound;
	Parms.SoundSettings = SoundSettings;
	Parms.SoundOwner = SoundOwner;
	Parms.bSkipQueue = bSkipQueue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SubtitlesSystem.SubtitlesManager.RegisterSubtitlesWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USubtitlesWidget*                 NewSubtitlesWidget                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USubtitlesManager::RegisterSubtitlesWidget(const class UObject* WorldContext, class USubtitlesWidget* NewSubtitlesWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubtitlesManager", "RegisterSubtitlesWidget");

	Params::SubtitlesManager_RegisterSubtitlesWidget Parms{};

	Parms.WorldContext = WorldContext;
	Parms.NewSubtitlesWidget = NewSubtitlesWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SubtitlesSystem.SubtitlesManager.SkipAllSubtitles
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USubtitlesManager::SkipAllSubtitles(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubtitlesManager", "SkipAllSubtitles");

	Params::SubtitlesManager_SkipAllSubtitles Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SubtitlesSystem.SubtitlesManager.GetSubtitleOfType
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// ESubtitlePhraseType                     Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSubtitledSound*                 OutSubtitle                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubtitlesManager::GetSubtitleOfType(ESubtitlePhraseType Type, struct FSubtitledSound* OutSubtitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubtitlesManager", "GetSubtitleOfType");

	Params::SubtitlesManager_GetSubtitleOfType Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSubtitle != nullptr)
		*OutSubtitle = std::move(Parms.OutSubtitle);

	return Parms.ReturnValue;
}


// Function SubtitlesSystem.SubtitlesManager.GetSubtitlesQueue
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FSubtitlesInfo>*          OutSubtitles                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USubtitlesManager::GetSubtitlesQueue(TArray<struct FSubtitlesInfo>* OutSubtitles) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubtitlesManager", "GetSubtitlesQueue");

	Params::SubtitlesManager_GetSubtitlesQueue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSubtitles != nullptr)
		*OutSubtitles = std::move(Parms.OutSubtitles);
}


// Function SubtitlesSystem.SubtitlesManager.GetSubtitlesWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USubtitlesWidget*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USubtitlesWidget* USubtitlesManager::GetSubtitlesWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubtitlesManager", "GetSubtitlesWidget");

	Params::SubtitlesManager_GetSubtitlesWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SubtitlesSystem.SubtitlesWidget.AddedSubtitle
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FSubtitlesInfo&            SubtitlesInfo                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* USubtitlesWidget::AddedSubtitle(const struct FSubtitlesInfo& SubtitlesInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubtitlesWidget", "AddedSubtitle");

	Params::SubtitlesWidget_AddedSubtitle Parms{};

	Parms.SubtitlesInfo = std::move(SubtitlesInfo);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SubtitlesSystem.SubtitlesWidget.RegisterSubtitleWidget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UWidget*                          SubtitleWidget                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USubtitlesWidget::RegisterSubtitleWidget(class UWidget* SubtitleWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubtitlesWidget", "RegisterSubtitleWidget");

	Params::SubtitlesWidget_RegisterSubtitleWidget Parms{};

	Parms.SubtitleWidget = SubtitleWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

