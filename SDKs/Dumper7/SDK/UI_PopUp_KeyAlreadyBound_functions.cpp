#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_PopUp_KeyAlreadyBound

#include "Basic.hpp"

#include "UI_PopUp_KeyAlreadyBound_classes.hpp"
#include "UI_PopUp_KeyAlreadyBound_parameters.hpp"


namespace SDK
{

// Function UI_PopUp_KeyAlreadyBound.UI_PopUp_KeyAlreadyBound_C.InitMessage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      NewAction                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// const class FText&                      OldAction                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// const struct FKey&                      NewKey                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UUI_PopUp_KeyAlreadyBound_C::InitMessage(const class FText& NewAction, const class FText& OldAction, const struct FKey& NewKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PopUp_KeyAlreadyBound_C", "InitMessage");

	Params::UI_PopUp_KeyAlreadyBound_C_InitMessage Parms{};

	Parms.NewAction = std::move(NewAction);
	Parms.OldAction = std::move(OldAction);
	Parms.NewKey = std::move(NewKey);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_PopUp_KeyAlreadyBound.UI_PopUp_KeyAlreadyBound_C.OnCancel
// (Public, BlueprintCallable, BlueprintEvent)

void UUI_PopUp_KeyAlreadyBound_C::OnCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PopUp_KeyAlreadyBound_C", "OnCancel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PopUp_KeyAlreadyBound.UI_PopUp_KeyAlreadyBound_C.OnConfirm
// (Public, BlueprintCallable, BlueprintEvent)

void UUI_PopUp_KeyAlreadyBound_C::OnConfirm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PopUp_KeyAlreadyBound_C", "OnConfirm");

	UObject::ProcessEvent(Func, nullptr);
}

}

