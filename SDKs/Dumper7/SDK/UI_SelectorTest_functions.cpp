#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_SelectorTest

#include "Basic.hpp"

#include "UI_SelectorTest_classes.hpp"
#include "UI_SelectorTest_parameters.hpp"


namespace SDK
{

// Function UI_SelectorTest.UI_SelectorTest_C.BndEvt__WBP_Selector_ButtonLeft_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature
// (BlueprintEvent)

void UUI_SelectorTest_C::BndEvt__WBP_Selector_ButtonLeft_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "BndEvt__WBP_Selector_ButtonLeft_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_SelectorTest.UI_SelectorTest_C.BndEvt__WBP_Selector_ButtonRight_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature
// (BlueprintEvent)

void UUI_SelectorTest_C::BndEvt__WBP_Selector_ButtonRight_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "BndEvt__WBP_Selector_ButtonRight_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_SelectorTest.UI_SelectorTest_C.BP_OnHovered
// (Event, Protected, BlueprintEvent)

void UUI_SelectorTest_C::BP_OnHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "BP_OnHovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_SelectorTest.UI_SelectorTest_C.BP_OnOptionSelected
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_SelectorTest_C::BP_OnOptionSelected(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "BP_OnOptionSelected");

	Params::UI_SelectorTest_C_BP_OnOptionSelected Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_SelectorTest.UI_SelectorTest_C.BP_OnUnhovered
// (Event, Protected, BlueprintEvent)

void UUI_SelectorTest_C::BP_OnUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "BP_OnUnhovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_SelectorTest.UI_SelectorTest_C.ExecuteUbergraph_UI_SelectorTest
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_SelectorTest_C::ExecuteUbergraph_UI_SelectorTest(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "ExecuteUbergraph_UI_SelectorTest");

	Params::UI_SelectorTest_C_ExecuteUbergraph_UI_SelectorTest Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_SelectorTest.UI_SelectorTest_C.GetDescription
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText*                            Name_0                                                 (Parm, OutParm)
// class FText*                            Desc                                                   (Parm, OutParm)

void UUI_SelectorTest_C::GetDescription(class FText* Name_0, class FText* Desc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "GetDescription");

	Params::UI_SelectorTest_C_GetDescription Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Name_0 != nullptr)
		*Name_0 = std::move(Parms.Name_0);

	if (Desc != nullptr)
		*Desc = std::move(Parms.Desc);
}


// Function UI_SelectorTest.UI_SelectorTest_C.InitSelector
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SelectedIndex_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_SelectorTest_C::InitSelector(int32 SelectedIndex_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "InitSelector");

	Params::UI_SelectorTest_C_InitSelector Parms{};

	Parms.SelectedIndex_0 = SelectedIndex_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_SelectorTest.UI_SelectorTest_C.IsDirty
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_SelectorTest_C::IsDirty(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "IsDirty");

	Params::UI_SelectorTest_C_IsDirty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function UI_SelectorTest.UI_SelectorTest_C.OnAddedToFocusPath
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FFocusEvent&               InFocusEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UUI_SelectorTest_C::OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "OnAddedToFocusPath");

	Params::UI_SelectorTest_C_OnAddedToFocusPath Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_SelectorTest.UI_SelectorTest_C.OnCurrentTextStyleChanged
// (Event, Protected, BlueprintEvent)

void UUI_SelectorTest_C::OnCurrentTextStyleChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "OnCurrentTextStyleChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_SelectorTest.UI_SelectorTest_C.OnRemovedFromFocusPath
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FFocusEvent&               InFocusEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UUI_SelectorTest_C::OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "OnRemovedFromFocusPath");

	Params::UI_SelectorTest_C_OnRemovedFromFocusPath Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_SelectorTest.UI_SelectorTest_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_SelectorTest_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "PreConstruct");

	Params::UI_SelectorTest_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_SelectorTest.UI_SelectorTest_C.PressLeft
// (Public, BlueprintCallable, BlueprintEvent)

void UUI_SelectorTest_C::PressLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "PressLeft");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_SelectorTest.UI_SelectorTest_C.PressRight
// (Public, BlueprintCallable, BlueprintEvent)

void UUI_SelectorTest_C::PressRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "PressRight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_SelectorTest.UI_SelectorTest_C.RevertOption
// (Public, BlueprintCallable, BlueprintEvent)

void UUI_SelectorTest_C::RevertOption()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "RevertOption");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_SelectorTest.UI_SelectorTest_C.SaveOption
// (Public, BlueprintCallable, BlueprintEvent)

void UUI_SelectorTest_C::SaveOption()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "SaveOption");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_SelectorTest.UI_SelectorTest_C.SetButtonsEnabled
// (Public, BlueprintCallable, BlueprintEvent)

void UUI_SelectorTest_C::SetButtonsEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "SetButtonsEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_SelectorTest.UI_SelectorTest_C.SetCurrentSelect
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SelectedIndex_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_SelectorTest_C::SetCurrentSelect(int32 SelectedIndex_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "SetCurrentSelect");

	Params::UI_SelectorTest_C_SetCurrentSelect Parms{};

	Parms.SelectedIndex_0 = SelectedIndex_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_SelectorTest.UI_SelectorTest_C.UpdateOptions
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>&                    Options                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UUI_SelectorTest_C::UpdateOptions(TArray<class FText>& Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_SelectorTest_C", "UpdateOptions");

	Params::UI_SelectorTest_C_UpdateOptions Parms{};

	Parms.Options = std::move(Options);

	UObject::ProcessEvent(Func, &Parms);

	Options = std::move(Parms.Options);
}

}

