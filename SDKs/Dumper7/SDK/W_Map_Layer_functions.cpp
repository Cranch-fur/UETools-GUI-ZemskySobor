#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Map_Layer

#include "Basic.hpp"

#include "W_Map_Layer_classes.hpp"
#include "W_Map_Layer_parameters.hpp"


namespace SDK
{

// Function W_Map_Layer.W_Map_Layer_C.AddMarkerToUpdateQueue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseMapMark_C*                 MarkerWidget                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_Map_Layer_C::AddMarkerToUpdateQueue(class UW_BaseMapMark_C* MarkerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "AddMarkerToUpdateQueue");

	Params::W_Map_Layer_C_AddMarkerToUpdateQueue Parms{};

	Parms.MarkerWidget = MarkerWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map_Layer.W_Map_Layer_C.ClearMarkers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_Map_Layer_C::ClearMarkers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "ClearMarkers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Map_Layer.W_Map_Layer_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_Map_Layer_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Map_Layer.W_Map_Layer_C.ConvertMapToLayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector2D&                 In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_Layer_C::ConvertMapToLayer(const struct FVector2D& In, struct FVector2D* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "ConvertMapToLayer");

	Params::W_Map_Layer_C_ConvertMapToLayer Parms{};

	Parms.In = std::move(In);

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}


// Function W_Map_Layer.W_Map_Layer_C.ConvertWorldSizeToMap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  WorldSize                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 MapSize                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_Layer_C::ConvertWorldSizeToMap(double WorldSize, double* MapSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "ConvertWorldSizeToMap");

	Params::W_Map_Layer_C_ConvertWorldSizeToMap Parms{};

	Parms.WorldSize = WorldSize;

	UObject::ProcessEvent(Func, &Parms);

	if (MapSize != nullptr)
		*MapSize = Parms.MapSize;
}


// Function W_Map_Layer.W_Map_Layer_C.Create Marker Widget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStr_MapMarker&            Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UW_BaseMapMark_C**                Widget                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_Map_Layer_C::Create_Marker_Widget(const struct FStr_MapMarker& Data, class UW_BaseMapMark_C** Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "Create Marker Widget");

	Params::W_Map_Layer_C_Create_Marker_Widget Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);

	if (Widget != nullptr)
		*Widget = Parms.Widget;
}


// Function W_Map_Layer.W_Map_Layer_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_Map_Layer_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Map_Layer.W_Map_Layer_C.ExecuteUbergraph_W_Map_Layer
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_Layer_C::ExecuteUbergraph_W_Map_Layer(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "ExecuteUbergraph_W_Map_Layer");

	Params::W_Map_Layer_C_ExecuteUbergraph_W_Map_Layer Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map_Layer.W_Map_Layer_C.GetCursorMarkerWidget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UW_BaseMapMark_C**                MarkerWidget                                           (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_Map_Layer_C::GetCursorMarkerWidget(class UW_BaseMapMark_C** MarkerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "GetCursorMarkerWidget");

	Params::W_Map_Layer_C_GetCursorMarkerWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MarkerWidget != nullptr)
		*MarkerWidget = Parms.MarkerWidget;
}


// Function W_Map_Layer.W_Map_Layer_C.GetMarkersAtPosition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector2D&                 position                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTagQuery&         TagQuery                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// TArray<class UW_BaseMapMark_C*>*        Markers                                                (Parm, OutParm, ContainsInstancedReference)

void UW_Map_Layer_C::GetMarkersAtPosition(const struct FVector2D& position, double Radius, const struct FGameplayTagQuery& TagQuery, TArray<class UW_BaseMapMark_C*>* Markers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "GetMarkersAtPosition");

	Params::W_Map_Layer_C_GetMarkersAtPosition Parms{};

	Parms.position = std::move(position);
	Parms.Radius = Radius;
	Parms.TagQuery = std::move(TagQuery);

	UObject::ProcessEvent(Func, &Parms);

	if (Markers != nullptr)
		*Markers = std::move(Parms.Markers);
}


// Function W_Map_Layer.W_Map_Layer_C.GetMarkerSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FStr_MapMarker&            marker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       Size                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_Layer_C::GetMarkerSize(const struct FStr_MapMarker& marker, struct FVector2D* Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "GetMarkerSize");

	Params::W_Map_Layer_C_GetMarkerSize Parms{};

	Parms.marker = std::move(marker);

	UObject::ProcessEvent(Func, &Parms);

	if (Size != nullptr)
		*Size = std::move(Parms.Size);
}


// Function W_Map_Layer.W_Map_Layer_C.GetWidgetClassForMarker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FStr_MapMarker&            marker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UClass**                          WidgetClass                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_Map_Layer_C::GetWidgetClassForMarker(const struct FStr_MapMarker& marker, class UClass** WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "GetWidgetClassForMarker");

	Params::W_Map_Layer_C_GetWidgetClassForMarker Parms{};

	Parms.marker = std::move(marker);

	UObject::ProcessEvent(Func, &Parms);

	if (WidgetClass != nullptr)
		*WidgetClass = Parms.WidgetClass;
}


// Function W_Map_Layer.W_Map_Layer_C.GetZOrderForMarker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FStr_MapMarker&            marker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32*                                  ZOrder                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_Layer_C::GetZOrderForMarker(const struct FStr_MapMarker& marker, int32* ZOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "GetZOrderForMarker");

	Params::W_Map_Layer_C_GetZOrderForMarker Parms{};

	Parms.marker = std::move(marker);

	UObject::ProcessEvent(Func, &Parms);

	if (ZOrder != nullptr)
		*ZOrder = Parms.ZOrder;
}


// Function W_Map_Layer.W_Map_Layer_C.HandleZoom
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ZoomScale                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIncreaseScale                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_Layer_C::HandleZoom(double ZoomScale, bool bIncreaseScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "HandleZoom");

	Params::W_Map_Layer_C_HandleZoom Parms{};

	Parms.ZoomScale = ZoomScale;
	Parms.bIncreaseScale = bIncreaseScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map_Layer.W_Map_Layer_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_Layer_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "PreConstruct");

	Params::W_Map_Layer_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map_Layer.W_Map_Layer_C.QueueUpdate
// (Public, BlueprintCallable, BlueprintEvent)

void UW_Map_Layer_C::QueueUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "QueueUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Map_Layer.W_Map_Layer_C.RefreshMarkers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_Map_Layer_C::RefreshMarkers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "RefreshMarkers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Map_Layer.W_Map_Layer_C.RemoveMarker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStr_MapMarker&            marker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UW_Map_Layer_C::RemoveMarker(const struct FStr_MapMarker& marker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "RemoveMarker");

	Params::W_Map_Layer_C_RemoveMarker Parms{};

	Parms.marker = std::move(marker);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map_Layer.W_Map_Layer_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_Layer_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "Tick");

	Params::W_Map_Layer_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map_Layer.W_Map_Layer_C.Update Marker
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStr_MapMarker&            marker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UW_BaseMapMark_C**                MarkerWidget                                           (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_Map_Layer_C::Update_Marker(const struct FStr_MapMarker& marker, class UW_BaseMapMark_C** MarkerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "Update Marker");

	Params::W_Map_Layer_C_Update_Marker Parms{};

	Parms.marker = std::move(marker);

	UObject::ProcessEvent(Func, &Parms);

	if (MarkerWidget != nullptr)
		*MarkerWidget = Parms.MarkerWidget;
}


// Function W_Map_Layer.W_Map_Layer_C.UpdateMarkerOpacityOnIntersection
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseMapMark_C*                 MarkerWidget                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_Map_Layer_C::UpdateMarkerOpacityOnIntersection(class UW_BaseMapMark_C* MarkerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_Layer_C", "UpdateMarkerOpacityOnIntersection");

	Params::W_Map_Layer_C_UpdateMarkerOpacityOnIntersection Parms{};

	Parms.MarkerWidget = MarkerWidget;

	UObject::ProcessEvent(Func, &Parms);
}

}

