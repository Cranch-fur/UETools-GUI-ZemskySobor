#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Map

#include "Basic.hpp"

#include "W_Map_classes.hpp"
#include "W_Map_parameters.hpp"


namespace SDK
{

// Function W_Map.W_Map_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_Map_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Map.W_Map_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_Map_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Map.W_Map_C.DetectMouse
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_Map_C::DetectMouse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "DetectMouse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Map.W_Map_C.ExecuteUbergraph_W_Map
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::ExecuteUbergraph_W_Map(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "ExecuteUbergraph_W_Map");

	Params::W_Map_C_ExecuteUbergraph_W_Map Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.FocusMapOnPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_Map_C::FocusMapOnPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "FocusMapOnPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Map.W_Map_C.Get Gamepad Movement Speed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double*                                 Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::Get_Gamepad_Movement_Speed(double* Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "Get Gamepad Movement Speed");

	Params::W_Map_C_Get_Gamepad_Movement_Speed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;
}


// Function W_Map.W_Map_C.Get Mouse Position On Layer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector2D UW_Map_C::Get_Mouse_Position_On_Layer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "Get Mouse Position On Layer");

	Params::W_Map_C_Get_Mouse_Position_On_Layer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_Map.W_Map_C.GetCenterPositionOnLayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector2D UW_Map_C::GetCenterPositionOnLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "GetCenterPositionOnLayer");

	Params::W_Map_C_GetCenterPositionOnLayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_Map.W_Map_C.GetCursorLocationOnMap
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    OnlyLandscape                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform*                      Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::GetCursorLocationOnMap(bool OnlyLandscape, struct FTransform* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "GetCursorLocationOnMap");

	Params::W_Map_C_GetCursorLocationOnMap Parms{};

	Parms.OnlyLandscape = OnlyLandscape;

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function W_Map.W_Map_C.GetMinimapCenter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D*                       position                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::GetMinimapCenter(struct FVector2D* position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "GetMinimapCenter");

	Params::W_Map_C_GetMinimapCenter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (position != nullptr)
		*position = std::move(Parms.position);
}


// Function W_Map.W_Map_C.GetPlayerPositionOnLayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector2D UW_Map_C::GetPlayerPositionOnLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "GetPlayerPositionOnLayer");

	Params::W_Map_C_GetPlayerPositionOnLayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_Map.W_Map_C.HandleGamepadThumbstickAxisChanged
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 ThumbstickAxisValue                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::HandleGamepadThumbstickAxisChanged(const struct FVector2D& ThumbstickAxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "HandleGamepadThumbstickAxisChanged");

	Params::W_Map_C_HandleGamepadThumbstickAxisChanged Parms{};

	Parms.ThumbstickAxisValue = std::move(ThumbstickAxisValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.HandleInputChangedToGamepad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseGamepad                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::HandleInputChangedToGamepad(bool UseGamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "HandleInputChangedToGamepad");

	Params::W_Map_C_HandleInputChangedToGamepad Parms{};

	Parms.UseGamepad = UseGamepad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.HandleInputMethodChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECommonInputType                        bNewInputType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::HandleInputMethodChanged(ECommonInputType bNewInputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "HandleInputMethodChanged");

	Params::W_Map_C_HandleInputMethodChanged Parms{};

	Parms.bNewInputType = bNewInputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.HandlePlayerTagChanged
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              UpdatedTag                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// bool                                    Exists                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::HandlePlayerTagChanged(const struct FGameplayTag& UpdatedTag, bool Exists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "HandlePlayerTagChanged");

	Params::W_Map_C_HandlePlayerTagChanged Parms{};

	Parms.UpdatedTag = std::move(UpdatedTag);
	Parms.Exists = Exists;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.HandleZoomMap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ZoomDelta                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::HandleZoomMap(double ZoomDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "HandleZoomMap");

	Params::W_Map_C_HandleZoomMap Parms{};

	Parms.ZoomDelta = ZoomDelta;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.Init Image Size
// (Public, BlueprintCallable, BlueprintEvent)

void UW_Map_C::Init_Image_Size()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "Init Image Size");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Map.W_Map_C.InitMap
// (BlueprintCallable, BlueprintEvent)

void UW_Map_C::InitMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "InitMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Map.W_Map_C.IsLegendShown
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::IsLegendShown(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "IsLegendShown");

	Params::W_Map_C_IsLegendShown Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function W_Map.W_Map_C.IsMapValid
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::IsMapValid(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "IsMapValid");

	Params::W_Map_C_IsMapValid Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function W_Map.W_Map_C.LayerPositionToScreen
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector2D&                 LayerPosition                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       ScreenPosition                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::LayerPositionToScreen(const struct FVector2D& LayerPosition, struct FVector2D* ScreenPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "LayerPositionToScreen");

	Params::W_Map_C_LayerPositionToScreen Parms{};

	Parms.LayerPosition = std::move(LayerPosition);

	UObject::ProcessEvent(Func, &Parms);

	if (ScreenPosition != nullptr)
		*ScreenPosition = std::move(Parms.ScreenPosition);
}


// Function W_Map.W_Map_C.Mouse Coordinates To World Location
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector*                         WorldLocation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::Mouse_Coordinates_To_World_Location(struct FVector* WorldLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "Mouse Coordinates To World Location");

	Params::W_Map_C_Mouse_Coordinates_To_World_Location Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WorldLocation != nullptr)
		*WorldLocation = std::move(Parms.WorldLocation);
}


// Function W_Map.W_Map_C.MouseKey
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Down                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::MouseKey(const struct FKey& Key, bool Down)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "MouseKey");

	Params::W_Map_C_MouseKey Parms{};

	Parms.Key = std::move(Key);
	Parms.Down = Down;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.OnAnalogValueChanged
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FAnalogInputEvent&         InAnalogInputEvent                                     (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_Map_C::OnAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FAnalogInputEvent& InAnalogInputEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "OnAnalogValueChanged");

	Params::W_Map_C_OnAnalogValueChanged Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InAnalogInputEvent = std::move(InAnalogInputEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_Map.W_Map_C.OnMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_Map_C::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "OnMouseButtonDown");

	Params::W_Map_C_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_Map.W_Map_C.OnMouseButtonUp
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_Map_C::OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "OnMouseButtonUp");

	Params::W_Map_C_OnMouseButtonUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_Map.W_Map_C.OnMouseEnter
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_Map_C::OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "OnMouseEnter");

	Params::W_Map_C_OnMouseEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.OnMouseLeave
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_Map_C::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "OnMouseLeave");

	Params::W_Map_C_OnMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.OnMouseWheel
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_Map_C::OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "OnMouseWheel");

	Params::W_Map_C_OnMouseWheel Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_Map.W_Map_C.PostLoadDelegate_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              SaveLoadResult                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::PostLoadDelegate_Event(const bool SaveLoadResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "PostLoadDelegate_Event");

	Params::W_Map_C_PostLoadDelegate_Event Parms{};

	Parms.SaveLoadResult = SaveLoadResult;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.PostSaveDelegate_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              SaveLoadResult                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::PostSaveDelegate_Event(const bool SaveLoadResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "PostSaveDelegate_Event");

	Params::W_Map_C_PostSaveDelegate_Event Parms{};

	Parms.SaveLoadResult = SaveLoadResult;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "PreConstruct");

	Params::W_Map_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.RefrashMapLayer
// (Public, BlueprintCallable, BlueprintEvent)

void UW_Map_C::RefrashMapLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "RefrashMapLayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Map.W_Map_C.Set Layer Position
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Vec2D                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::Set_Layer_Position(const struct FVector2D& Vec2D)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "Set Layer Position");

	Params::W_Map_C_Set_Layer_Position Parms{};

	Parms.Vec2D = std::move(Vec2D);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.SetMapZoom
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Zoom                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::SetMapZoom(double Zoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "SetMapZoom");

	Params::W_Map_C_SetMapZoom Parms{};

	Parms.Zoom = Zoom;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.SetShowLegend
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::SetShowLegend(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "SetShowLegend");

	Params::W_Map_C_SetShowLegend Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.Show Map
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::Show_Map(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "Show Map");

	Params::W_Map_C_Show_Map Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.ShowLegendAnimation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::ShowLegendAnimation(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "ShowLegendAnimation");

	Params::W_Map_C_ShowLegendAnimation Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.Spawn Cursor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_Map_C::Spawn_Cursor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "Spawn Cursor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Map.W_Map_C.SpawnMapDot
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_Map_C::SpawnMapDot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "SpawnMapDot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Map.W_Map_C.TeleportOwningPlayerToCursor
// (BlueprintCallable, BlueprintEvent)

void UW_Map_C::TeleportOwningPlayerToCursor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "TeleportOwningPlayerToCursor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Map.W_Map_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "Tick");

	Params::W_Map_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.ToggleLegendVisibility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsVisible_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::ToggleLegendVisibility(bool* IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "ToggleLegendVisibility");

	Params::W_Map_C_ToggleLegendVisibility Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsVisible_0 != nullptr)
		*IsVisible_0 = Parms.IsVisible_0;
}


// Function W_Map.W_Map_C.TryTeleportToEducationPoint
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_Map_C::TryTeleportToEducationPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "TryTeleportToEducationPoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Map.W_Map_C.UpdateMapRender
// (Public, BlueprintCallable, BlueprintEvent)

void UW_Map_C::UpdateMapRender()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "UpdateMapRender");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Map.W_Map_C.UsingMap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Use                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::UsingMap(bool Use)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "UsingMap");

	Params::W_Map_C_UsingMap Parms{};

	Parms.Use = Use;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.ZoomMap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WithAnimation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::ZoomMap(const struct FVector2D& Size, bool WithAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "ZoomMap");

	Params::W_Map_C_ZoomMap Parms{};

	Parms.Size = std::move(Size);
	Parms.WithAnimation = WithAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Map.W_Map_C.ZoomMapByStep
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Step                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Map_C::ZoomMapByStep(double Step)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Map_C", "ZoomMapByStep");

	Params::W_Map_C_ZoomMapByStep Parms{};

	Parms.Step = Step;

	UObject::ProcessEvent(Func, &Parms);
}

}

