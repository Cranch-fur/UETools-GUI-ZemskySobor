#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_MinimapCompass

#include "Basic.hpp"

#include "W_MinimapCompass_classes.hpp"
#include "W_MinimapCompass_parameters.hpp"


namespace SDK
{

// Function W_MinimapCompass.W_MinimapCompass_C.ExecuteUbergraph_W_MinimapCompass
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_MinimapCompass_C::ExecuteUbergraph_W_MinimapCompass(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_MinimapCompass_C", "ExecuteUbergraph_W_MinimapCompass");

	Params::W_MinimapCompass_C_ExecuteUbergraph_W_MinimapCompass Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_MinimapCompass.W_MinimapCompass_C.FilterMarkersByMinimapRadius
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FStr_MapMarker>&          InMarkers                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FStr_MapMarker>*          OutMarkers                                             (Parm, OutParm)

void UW_MinimapCompass_C::FilterMarkersByMinimapRadius(TArray<struct FStr_MapMarker>& InMarkers, TArray<struct FStr_MapMarker>* OutMarkers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_MinimapCompass_C", "FilterMarkersByMinimapRadius");

	Params::W_MinimapCompass_C_FilterMarkersByMinimapRadius Parms{};

	Parms.InMarkers = std::move(InMarkers);

	UObject::ProcessEvent(Func, &Parms);

	InMarkers = std::move(Parms.InMarkers);

	if (OutMarkers != nullptr)
		*OutMarkers = std::move(Parms.OutMarkers);
}


// Function W_MinimapCompass.W_MinimapCompass_C.GetMarkerSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FStr_MapMarker&            marker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// double*                                 Size                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_MinimapCompass_C::GetMarkerSize(const struct FStr_MapMarker& marker, double* Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_MinimapCompass_C", "GetMarkerSize");

	Params::W_MinimapCompass_C_GetMarkerSize Parms{};

	Parms.marker = std::move(marker);

	UObject::ProcessEvent(Func, &Parms);

	if (Size != nullptr)
		*Size = Parms.Size;
}


// Function W_MinimapCompass.W_MinimapCompass_C.HandleRegisteredOverlapArea
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewAreaActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_MinimapCompass_C::HandleRegisteredOverlapArea(class AActor* NewAreaActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_MinimapCompass_C", "HandleRegisteredOverlapArea");

	Params::W_MinimapCompass_C_HandleRegisteredOverlapArea Parms{};

	Parms.NewAreaActor = NewAreaActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_MinimapCompass.W_MinimapCompass_C.Init
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_Map_C*                         MapWidget                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_MinimapCompass_C::Init(class UW_Map_C* MapWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_MinimapCompass_C", "Init");

	Params::W_MinimapCompass_C_Init Parms{};

	Parms.MapWidget = MapWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_MinimapCompass.W_MinimapCompass_C.InZone_Event
// (BlueprintCallable, BlueprintEvent)

void UW_MinimapCompass_C::InZone_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_MinimapCompass_C", "InZone_Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_MinimapCompass.W_MinimapCompass_C.OnInitialized
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_MinimapCompass_C::OnInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_MinimapCompass_C", "OnInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_MinimapCompass.W_MinimapCompass_C.OutZone_Event
// (BlueprintCallable, BlueprintEvent)

void UW_MinimapCompass_C::OutZone_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_MinimapCompass_C", "OutZone_Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_MinimapCompass.W_MinimapCompass_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_MinimapCompass_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_MinimapCompass_C", "Tick");

	Params::W_MinimapCompass_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_MinimapCompass.W_MinimapCompass_C.Update Items Location
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_MinimapCompass_C::Update_Items_Location()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_MinimapCompass_C", "Update Items Location");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_MinimapCompass.W_MinimapCompass_C.UpdateItemsCount
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_MinimapCompass_C::UpdateItemsCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_MinimapCompass_C", "UpdateItemsCount");

	UObject::ProcessEvent(Func, nullptr);
}

}

