#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: YnnkMetaFaceEnhancer

#include "Basic.hpp"

#include "YnnkMetaFaceEnhancer_classes.hpp"
#include "YnnkMetaFaceEnhancer_parameters.hpp"


namespace SDK
{

// Function YnnkMetaFaceEnhancer.AsyncAnimBuilder.OnAnimationFailed
// (Final, Native, Protected)

void UAsyncAnimBuilder::OnAnimationFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncAnimBuilder", "OnAnimationFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkMetaFaceEnhancer.AsyncAnimBuilder.OnAnimationReady
// (Final, Native, Protected)

void UAsyncAnimBuilder::OnAnimationReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncAnimBuilder", "OnAnimationReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkMetaFaceEnhancer.AsyncAnimBuilder.Stop
// (Final, Native, Public, BlueprintCallable)

void UAsyncAnimBuilder::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncAnimBuilder", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkMetaFaceEnhancer.AsyncAnimBuilder.IsWorking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAsyncAnimBuilder::IsWorking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncAnimBuilder", "IsWorking");

	Params::AsyncAnimBuilder_IsWorking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkMetaFaceEnhancer.MFFunctionLibrary.BuildFacialAnimationData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UYnnkVoiceLipsyncData*&           LipsyncData                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateLipSync                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateFacialAnimation                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FMHFacialAnimation& LipsyncAnimation, const struct FMHFacialAnimation& FacialAnimation)>&CallbackEvent                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMFFunctionLibrary::BuildFacialAnimationData(class UYnnkVoiceLipsyncData*& LipsyncData, bool bCreateLipSync, bool bCreateFacialAnimation, const TDelegate<void(const struct FMHFacialAnimation& LipsyncAnimation, const struct FMHFacialAnimation& FacialAnimation)>& CallbackEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MFFunctionLibrary", "BuildFacialAnimationData");

	Params::MFFunctionLibrary_BuildFacialAnimationData Parms{};

	Parms.LipsyncData = LipsyncData;
	Parms.bCreateLipSync = bCreateLipSync;
	Parms.bCreateFacialAnimation = bCreateFacialAnimation;
	Parms.CallbackEvent = CallbackEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	LipsyncData = Parms.LipsyncData;

	return Parms.ReturnValue;
}


// Function YnnkMetaFaceEnhancer.MFFunctionLibrary.CopyFacialFrameToClipboard
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TMap<class FName, float>&         InData                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<class FString>&            FilterCurves                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMFFunctionLibrary::CopyFacialFrameToClipboard(const TMap<class FName, float>& InData, const TArray<class FString>& FilterCurves)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MFFunctionLibrary", "CopyFacialFrameToClipboard");

	Params::MFFunctionLibrary_CopyFacialFrameToClipboard Parms{};

	Parms.InData = std::move(InData);
	Parms.FilterCurves = std::move(FilterCurves);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkMetaFaceEnhancer.MFFunctionLibrary.FacialAnimation_CurveValueAtTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMHFacialAnimation&              Animation                                              (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             Curve                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMFFunctionLibrary::FacialAnimation_CurveValueAtTime(struct FMHFacialAnimation& Animation, class FName Curve, float PlayTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MFFunctionLibrary", "FacialAnimation_CurveValueAtTime");

	Params::MFFunctionLibrary_FacialAnimation_CurveValueAtTime Parms{};

	Parms.Animation = std::move(Animation);
	Parms.Curve = Curve;
	Parms.PlayTime = PlayTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Animation = std::move(Parms.Animation);

	return Parms.ReturnValue;
}


// Function YnnkMetaFaceEnhancer.MFFunctionLibrary.FacialAnimation_GetDescription
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMHFacialAnimation&              Animation                                              (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMFFunctionLibrary::FacialAnimation_GetDescription(struct FMHFacialAnimation& Animation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MFFunctionLibrary", "FacialAnimation_GetDescription");

	Params::MFFunctionLibrary_FacialAnimation_GetDescription Parms{};

	Parms.Animation = std::move(Animation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Animation = std::move(Parms.Animation);

	return Parms.ReturnValue;
}


// Function YnnkMetaFaceEnhancer.MFFunctionLibrary.FacialAnimation_Initialize
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMHFacialAnimation&              Animation                                              (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<class FName, struct FSimpleFloatCurve>&InAnimationData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Intensity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInFadeOnPause                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InFadePauseDuration                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InFadeTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMFFunctionLibrary::FacialAnimation_Initialize(struct FMHFacialAnimation& Animation, const TMap<class FName, struct FSimpleFloatCurve>& InAnimationData, float Intensity, bool bInFadeOnPause, float InFadePauseDuration, float InFadeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MFFunctionLibrary", "FacialAnimation_Initialize");

	Params::MFFunctionLibrary_FacialAnimation_Initialize Parms{};

	Parms.Animation = std::move(Animation);
	Parms.InAnimationData = std::move(InAnimationData);
	Parms.Intensity = Intensity;
	Parms.bInFadeOnPause = bInFadeOnPause;
	Parms.InFadePauseDuration = InFadePauseDuration;
	Parms.InFadeTime = InFadeTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Animation = std::move(Parms.Animation);
}


// Function YnnkMetaFaceEnhancer.MFFunctionLibrary.FacialAnimation_Play
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMHFacialAnimation&              Animation                                              (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMFFunctionLibrary::FacialAnimation_Play(struct FMHFacialAnimation& Animation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MFFunctionLibrary", "FacialAnimation_Play");

	Params::MFFunctionLibrary_FacialAnimation_Play Parms{};

	Parms.Animation = std::move(Animation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Animation = std::move(Parms.Animation);
}


// Function YnnkMetaFaceEnhancer.MFFunctionLibrary.FacialAnimation_Stop
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMHFacialAnimation&              Animation                                              (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMFFunctionLibrary::FacialAnimation_Stop(struct FMHFacialAnimation& Animation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MFFunctionLibrary", "FacialAnimation_Stop");

	Params::MFFunctionLibrary_FacialAnimation_Stop Parms{};

	Parms.Animation = std::move(Animation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Animation = std::move(Parms.Animation);
}


// Function YnnkMetaFaceEnhancer.MFFunctionLibrary.FacialAnimation_Tick
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMHFacialAnimation&              Animation                                              (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   PlayTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UYnnkLipsyncController*           LipSyncController                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMFFunctionLibrary::FacialAnimation_Tick(struct FMHFacialAnimation& Animation, float PlayTime, class UYnnkLipsyncController* LipSyncController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MFFunctionLibrary", "FacialAnimation_Tick");

	Params::MFFunctionLibrary_FacialAnimation_Tick Parms{};

	Parms.Animation = std::move(Animation);
	Parms.PlayTime = PlayTime;
	Parms.LipSyncController = LipSyncController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Animation = std::move(Parms.Animation);
}


// Function YnnkMetaFaceEnhancer.MFFunctionLibrary.InitializeYnnkMetaFace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Parent                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNeuralProcessWrapper*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNeuralProcessWrapper* UMFFunctionLibrary::InitializeYnnkMetaFace(class UObject* Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MFFunctionLibrary", "InitializeYnnkMetaFace");

	Params::MFFunctionLibrary_InitializeYnnkMetaFace Parms{};

	Parms.Parent = Parent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkMetaFaceEnhancer.MFFunctionLibrary.MakeHeadRotatorFromAnimFrame
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const TMap<class FName, float>&         AnimationFrame                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   OffsetRoll                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OffsetPitch                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OffsetYaw                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UMFFunctionLibrary::MakeHeadRotatorFromAnimFrame(const TMap<class FName, float>& AnimationFrame, float OffsetRoll, float OffsetPitch, float OffsetYaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MFFunctionLibrary", "MakeHeadRotatorFromAnimFrame");

	Params::MFFunctionLibrary_MakeHeadRotatorFromAnimFrame Parms{};

	Parms.AnimationFrame = std::move(AnimationFrame);
	Parms.OffsetRoll = OffsetRoll;
	Parms.OffsetPitch = OffsetPitch;
	Parms.OffsetYaw = OffsetYaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkMetaFaceEnhancer.MFFunctionLibrary.PrepareYnnkMetaFaceModel
// (Final, Native, Static, Public, BlueprintCallable)

void UMFFunctionLibrary::PrepareYnnkMetaFaceModel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MFFunctionLibrary", "PrepareYnnkMetaFaceModel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkMetaFaceEnhancer.NeuralProcessWrapper.Initialize
// (Final, Native, Public)

void UNeuralProcessWrapper::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeuralProcessWrapper", "Initialize");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkMetaFaceEnhancer.NeuralProcessWrapper.IsEmotionsModelReady
// (Final, Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeuralProcessWrapper::IsEmotionsModelReady() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeuralProcessWrapper", "IsEmotionsModelReady");

	Params::NeuralProcessWrapper_IsEmotionsModelReady Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkMetaFaceEnhancer.NeuralProcessWrapper.IsLipsyncModelReady
// (Final, Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeuralProcessWrapper::IsLipsyncModelReady() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeuralProcessWrapper", "IsLipsyncModelReady");

	Params::NeuralProcessWrapper_IsLipsyncModelReady Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkMetaFaceEnhancer.NeuralProcessWrapper.IsValid
// (Final, Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNeuralProcessWrapper::IsValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NeuralProcessWrapper", "IsValid");

	Params::NeuralProcessWrapper_IsValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkMetaFaceEnhancer.YnnkMetaFaceController.BuildFacialAnimationData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UYnnkVoiceLipsyncData*            LipsyncData                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateLipSync                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateFacialAnimation                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UYnnkMetaFaceController::BuildFacialAnimationData(class UYnnkVoiceLipsyncData* LipsyncData, bool bCreateLipSync, bool bCreateFacialAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkMetaFaceController", "BuildFacialAnimationData");

	Params::YnnkMetaFaceController_BuildFacialAnimationData Parms{};

	Parms.LipsyncData = LipsyncData;
	Parms.bCreateLipSync = bCreateLipSync;
	Parms.bCreateFacialAnimation = bCreateFacialAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkMetaFaceEnhancer.YnnkMetaFaceController.DisconnectFromRemoteBuilder
// (Final, Native, Public, BlueprintCallable)

void UYnnkMetaFaceController::DisconnectFromRemoteBuilder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkMetaFaceController", "DisconnectFromRemoteBuilder");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkMetaFaceEnhancer.YnnkMetaFaceController.FillEyeAnimationCurves
// (Final, Native, Protected)

void UYnnkMetaFaceController::FillEyeAnimationCurves()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkMetaFaceController", "FillEyeAnimationCurves");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkMetaFaceEnhancer.YnnkMetaFaceController.InitializeRemoteAnimationBuilder
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UYnnkRemoteClient**               RemoteConnectionClient                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    IPv4                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Port                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UYnnkMetaFaceController::InitializeRemoteAnimationBuilder(class UYnnkRemoteClient** RemoteConnectionClient, const class FString& IPv4, int32 Port)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkMetaFaceController", "InitializeRemoteAnimationBuilder");

	Params::YnnkMetaFaceController_InitializeRemoteAnimationBuilder Parms{};

	Parms.IPv4 = std::move(IPv4);
	Parms.Port = Port;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RemoteConnectionClient != nullptr)
		*RemoteConnectionClient = Parms.RemoteConnectionClient;

	return Parms.ReturnValue;
}


// Function YnnkMetaFaceEnhancer.YnnkMetaFaceController.OnAsyncBuilder_AnimationCreated
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const TMap<class FName, struct FSimpleFloatCurve>&LipsyncData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<class FName, struct FSimpleFloatCurve>&FacialAnimationData                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UYnnkMetaFaceController::OnAsyncBuilder_AnimationCreated(const TMap<class FName, struct FSimpleFloatCurve>& LipsyncData, const TMap<class FName, struct FSimpleFloatCurve>& FacialAnimationData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkMetaFaceController", "OnAsyncBuilder_AnimationCreated");

	Params::YnnkMetaFaceController_OnAsyncBuilder_AnimationCreated Parms{};

	Parms.LipsyncData = std::move(LipsyncData);
	Parms.FacialAnimationData = std::move(FacialAnimationData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkMetaFaceEnhancer.YnnkMetaFaceController.OnAsyncBuilder_RequestInterrupted
// (Final, Native, Protected)

void UYnnkMetaFaceController::OnAsyncBuilder_RequestInterrupted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkMetaFaceController", "OnAsyncBuilder_RequestInterrupted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkMetaFaceEnhancer.YnnkMetaFaceController.OnLipsyncController_SpeakingInterrupted
// (Final, Native, Protected)
// Parameters:
// class UYnnkVoiceLipsyncData*            PhraseAsset                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkMetaFaceController::OnLipsyncController_SpeakingInterrupted(class UYnnkVoiceLipsyncData* PhraseAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkMetaFaceController", "OnLipsyncController_SpeakingInterrupted");

	Params::YnnkMetaFaceController_OnLipsyncController_SpeakingInterrupted Parms{};

	Parms.PhraseAsset = PhraseAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkMetaFaceEnhancer.YnnkMetaFaceController.OnLipsyncController_StartSpeaking
// (Final, Native, Protected)
// Parameters:
// class UYnnkVoiceLipsyncData*            PhraseAsset                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkMetaFaceController::OnLipsyncController_StartSpeaking(class UYnnkVoiceLipsyncData* PhraseAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkMetaFaceController", "OnLipsyncController_StartSpeaking");

	Params::YnnkMetaFaceController_OnLipsyncController_StartSpeaking Parms{};

	Parms.PhraseAsset = PhraseAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkMetaFaceEnhancer.YnnkMetaFaceController.OnRemoteClient_ResponseReceived
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Command                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    JsonPacket                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkMetaFaceController::OnRemoteClient_ResponseReceived(int32 RequestID, const class FString& Command, const class FString& JsonPacket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkMetaFaceController", "OnRemoteClient_ResponseReceived");

	Params::YnnkMetaFaceController_OnRemoteClient_ResponseReceived Parms{};

	Parms.RequestID = RequestID;
	Parms.Command = std::move(Command);
	Parms.JsonPacket = std::move(JsonPacket);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkMetaFaceEnhancer.YnnkMetaFaceController.SetEyesMovementEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsEnabled                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkMetaFaceController::SetEyesMovementEnabled(bool bNewIsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkMetaFaceController", "SetEyesMovementEnabled");

	Params::YnnkMetaFaceController_SetEyesMovementEnabled Parms{};

	Parms.bNewIsEnabled = bNewIsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkMetaFaceEnhancer.YnnkMetaFaceController.SetEyesTarget
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   TargetLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  TargetComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkMetaFaceController::SetEyesTarget(const struct FVector& TargetLocation, class USceneComponent* TargetComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkMetaFaceController", "SetEyesTarget");

	Params::YnnkMetaFaceController_SetEyesTarget Parms{};

	Parms.TargetLocation = std::move(TargetLocation);
	Parms.TargetComponent = TargetComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkMetaFaceEnhancer.YnnkMetaFaceController.SetUseRemoteAnimationBuilder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsEnabled                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UYnnkMetaFaceController::SetUseRemoteAnimationBuilder(bool bNewIsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkMetaFaceController", "SetUseRemoteAnimationBuilder");

	Params::YnnkMetaFaceController_SetUseRemoteAnimationBuilder Parms{};

	Parms.bNewIsEnabled = bNewIsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkMetaFaceEnhancer.YnnkMetaFaceController.Speak
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UYnnkVoiceLipsyncData*            VoiceLipsyncData                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkMetaFaceController::Speak(class UYnnkVoiceLipsyncData* VoiceLipsyncData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkMetaFaceController", "Speak");

	Params::YnnkMetaFaceController_Speak Parms{};

	Parms.VoiceLipsyncData = VoiceLipsyncData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkMetaFaceEnhancer.YnnkMetaFaceController.SpeakEx
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UYnnkVoiceLipsyncData*            VoiceLipsyncData                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundWave*                       Sound                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SoundOffset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkMetaFaceController::SpeakEx(class UYnnkVoiceLipsyncData* VoiceLipsyncData, class USoundWave* Sound, float SoundOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkMetaFaceController", "SpeakEx");

	Params::YnnkMetaFaceController_SpeakEx Parms{};

	Parms.VoiceLipsyncData = VoiceLipsyncData;
	Parms.Sound = Sound;
	Parms.SoundOffset = SoundOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkMetaFaceEnhancer.YnnkMetaFaceController.GetRemoteConnectionClient
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UYnnkRemoteClient*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UYnnkRemoteClient* UYnnkMetaFaceController::GetRemoteConnectionClient() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkMetaFaceController", "GetRemoteConnectionClient");

	Params::YnnkMetaFaceController_GetRemoteConnectionClient Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkMetaFaceEnhancer.YnnkMetaFaceController.HasValidAnimation
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UYnnkVoiceLipsyncData*      LipsyncData                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bLipsyncIsValid                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bFacialAnimationIsValid                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkMetaFaceController::HasValidAnimation(const class UYnnkVoiceLipsyncData* LipsyncData, bool* bLipsyncIsValid, bool* bFacialAnimationIsValid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkMetaFaceController", "HasValidAnimation");

	Params::YnnkMetaFaceController_HasValidAnimation Parms{};

	Parms.LipsyncData = LipsyncData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bLipsyncIsValid != nullptr)
		*bLipsyncIsValid = Parms.bLipsyncIsValid;

	if (bFacialAnimationIsValid != nullptr)
		*bFacialAnimationIsValid = Parms.bFacialAnimationIsValid;
}


// Function YnnkMetaFaceEnhancer.YnnkMetaFaceController.IsInitialized
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UYnnkMetaFaceController::IsInitialized() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkMetaFaceController", "IsInitialized");

	Params::YnnkMetaFaceController_IsInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

