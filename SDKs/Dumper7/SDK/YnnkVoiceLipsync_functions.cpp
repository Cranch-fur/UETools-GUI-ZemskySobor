#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: YnnkVoiceLipsync

#include "Basic.hpp"

#include "YnnkVoiceLipsync_classes.hpp"
#include "YnnkVoiceLipsync_parameters.hpp"


namespace SDK
{

// Function YnnkVoiceLipsync.AsyncRecognizer.AsyncRecognizeAudio
// (Final, Native, Public, HasOutParams)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    InRawPCMData                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// uint32                                  InSampleRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   BitRate                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ID, const TArray<struct FSingeWordData>& Data)>&InCallbackEvent                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAsyncRecognizer::AsyncRecognizeAudio(int32 ID, const TArray<uint8>& InRawPCMData, uint32 InSampleRate, uint8 BitRate, float Duration, const TDelegate<void(int32 ID, const TArray<struct FSingeWordData>& Data)>& InCallbackEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncRecognizer", "AsyncRecognizeAudio");

	Params::AsyncRecognizer_AsyncRecognizeAudio Parms{};

	Parms.ID = ID;
	Parms.InRawPCMData = std::move(InRawPCMData);
	Parms.InSampleRate = InSampleRate;
	Parms.BitRate = BitRate;
	Parms.Duration = Duration;
	Parms.InCallbackEvent = InCallbackEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.AsyncRecognizer.AsyncRecognizeAudioAndGenerateAsset
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<uint8>&                    InRawPCMData                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// uint32                                  InSampleRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   BitRate                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundWave*                       OutSoundWave                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class UYnnkVoiceLipsyncData* VoiceLipsyncData, bool bResult, const class FString& Subtitles)>&InCallbackEvent                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAsyncRecognizer::AsyncRecognizeAudioAndGenerateAsset(const TArray<uint8>& InRawPCMData, uint32 InSampleRate, uint8 BitRate, float Duration, class USoundWave* OutSoundWave, const TDelegate<void(class UYnnkVoiceLipsyncData* VoiceLipsyncData, bool bResult, const class FString& Subtitles)>& InCallbackEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncRecognizer", "AsyncRecognizeAudioAndGenerateAsset");

	Params::AsyncRecognizer_AsyncRecognizeAudioAndGenerateAsset Parms{};

	Parms.InRawPCMData = std::move(InRawPCMData);
	Parms.InSampleRate = InSampleRate;
	Parms.BitRate = BitRate;
	Parms.Duration = Duration;
	Parms.OutSoundWave = OutSoundWave;
	Parms.InCallbackEvent = InCallbackEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.AsyncRecognizer.AsyncRecognizeQueue
// (Final, Native, Public)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UYnnkVoiceLipsyncData*            Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAsyncRecognizer::AsyncRecognizeQueue(int32 ID, class UYnnkVoiceLipsyncData* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncRecognizer", "AsyncRecognizeQueue");

	Params::AsyncRecognizer_AsyncRecognizeQueue Parms{};

	Parms.ID = ID;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.AsyncRecognizer.NextFromQueue_Internal
// (Final, Native, Protected)
// Parameters:
// int32                                   CompletedIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bResult                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAsyncRecognizer::NextFromQueue_Internal(int32 CompletedIndex, bool bResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncRecognizer", "NextFromQueue_Internal");

	Params::AsyncRecognizer_NextFromQueue_Internal Parms{};

	Parms.CompletedIndex = CompletedIndex;
	Parms.bResult = bResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.AsyncRecognizer.RecognizeFromQueue_Internal
// (Final, Native, Protected)

void UAsyncRecognizer::RecognizeFromQueue_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncRecognizer", "RecognizeFromQueue_Internal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.AsyncRecognizer.RecognizePCMData_Internal
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const TArray<uint8>&                    InRawPCMData                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// uint32                                  InSampleRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   BitRate                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAsyncRecognizer::RecognizePCMData_Internal(const TArray<uint8>& InRawPCMData, uint32 InSampleRate, uint8 BitRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncRecognizer", "RecognizePCMData_Internal");

	Params::AsyncRecognizer_RecognizePCMData_Internal Parms{};

	Parms.InRawPCMData = std::move(InRawPCMData);
	Parms.InSampleRate = InSampleRate;
	Parms.BitRate = BitRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.AsyncRecognizer.Stop
// (Final, Native, Public, BlueprintCallable)

void UAsyncRecognizer::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncRecognizer", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.AsyncRecognizer.IsWorking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAsyncRecognizer::IsWorking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncRecognizer", "IsWorking");

	Params::AsyncRecognizer_IsWorking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.RecognizePCMData.RecognizeRuntimeSoundWave
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InWorldContext                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundWave*                       InSoundAsset                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterruptActiveRequest                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URecognizePCMData*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URecognizePCMData* URecognizePCMData::RecognizeRuntimeSoundWave(class UObject* InWorldContext, class USoundWave* InSoundAsset, bool bInterruptActiveRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RecognizePCMData", "RecognizeRuntimeSoundWave");

	Params::RecognizePCMData_RecognizeRuntimeSoundWave Parms{};

	Parms.InWorldContext = InWorldContext;
	Parms.InSoundAsset = InSoundAsset;
	Parms.bInterruptActiveRequest = bInterruptActiveRequest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.RecognizePCMData.RecognizeUncompressedPCMData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          InWorldContext                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    InPCMData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InSampleRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterruptActiveRequest                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URecognizePCMData*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URecognizePCMData* URecognizePCMData::RecognizeUncompressedPCMData(class UObject* InWorldContext, const TArray<uint8>& InPCMData, int32 InSampleRate, bool bInterruptActiveRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RecognizePCMData", "RecognizeUncompressedPCMData");

	Params::RecognizePCMData_RecognizeUncompressedPCMData Parms{};

	Parms.InWorldContext = InWorldContext;
	Parms.InPCMData = std::move(InPCMData);
	Parms.InSampleRate = InSampleRate;
	Parms.bInterruptActiveRequest = bInterruptActiveRequest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.RecognizePCMData.OnAsyncRequestResult
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FSingeWordData>&    Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void URecognizePCMData::OnAsyncRequestResult(int32 ID, const TArray<struct FSingeWordData>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RecognizePCMData", "OnAsyncRequestResult");

	Params::RecognizePCMData_OnAsyncRequestResult Parms{};

	Parms.ID = ID;
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.RemoteRecognizeSoundWave.RemoteRecognizeAudioData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UYnnkRemoteClient*                RemoteConnectionClient                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    InPCMData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InSampleRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URemoteRecognizeSoundWave*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URemoteRecognizeSoundWave* URemoteRecognizeSoundWave::RemoteRecognizeAudioData(class UYnnkRemoteClient* RemoteConnectionClient, const TArray<uint8>& InPCMData, int32 InSampleRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RemoteRecognizeSoundWave", "RemoteRecognizeAudioData");

	Params::RemoteRecognizeSoundWave_RemoteRecognizeAudioData Parms{};

	Parms.RemoteConnectionClient = RemoteConnectionClient;
	Parms.InPCMData = std::move(InPCMData);
	Parms.InSampleRate = InSampleRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.RemoteRecognizeSoundWave.RemoteRecognizeSoundWave
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UYnnkRemoteClient*                RemoteConnectionClient                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundWave*                       InSoundAsset                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URemoteRecognizeSoundWave*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URemoteRecognizeSoundWave* URemoteRecognizeSoundWave::RemoteRecognizeSoundWave(class UYnnkRemoteClient* RemoteConnectionClient, class USoundWave* InSoundAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RemoteRecognizeSoundWave", "RemoteRecognizeSoundWave");

	Params::RemoteRecognizeSoundWave_RemoteRecognizeSoundWave Parms{};

	Parms.RemoteConnectionClient = RemoteConnectionClient;
	Parms.InSoundAsset = InSoundAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.RemoteRecognizeSoundWave.OnRemoteRequestResult
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FSingeWordData>&    OutSentence                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    Subtitles                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URemoteRecognizeSoundWave::OnRemoteRequestResult(int32 RequestID, const TArray<struct FSingeWordData>& OutSentence, const class FString& Subtitles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RemoteRecognizeSoundWave", "OnRemoteRequestResult");

	Params::RemoteRecognizeSoundWave_OnRemoteRequestResult Parms{};

	Parms.RequestID = RequestID;
	Parms.OutSentence = std::move(OutSentence);
	Parms.Subtitles = std::move(Subtitles);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.StreamLipsyncGenerator.FinalizeStream
// (Final, Native, Public, BlueprintCallable)

void UStreamLipsyncGenerator::FinalizeStream()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamLipsyncGenerator", "FinalizeStream");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.StreamLipsyncGenerator.StartStream
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStreamLipsyncGenerator::StartStream()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamLipsyncGenerator", "StartStream");

	Params::StreamLipsyncGenerator_StartStream Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.StreamLipsyncGenerator.StreamData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UStreamLipsyncGenerator::StreamData(const TArray<uint8>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamLipsyncGenerator", "StreamData");

	Params::StreamLipsyncGenerator_StreamData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.StreamLipsyncGenerator.IsStreaming
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStreamLipsyncGenerator::IsStreaming() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamLipsyncGenerator", "IsStreaming");

	Params::StreamLipsyncGenerator_IsStreaming Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.StreamVoiceRecognizeComponent.FinalizeAudioRecognition
// (Final, Native, Private)
// Parameters:
// const class FString&                    JsonData                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFinalized                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStreamVoiceRecognizeComponent::FinalizeAudioRecognition(const class FString& JsonData, bool bFinalized)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamVoiceRecognizeComponent", "FinalizeAudioRecognition");

	Params::StreamVoiceRecognizeComponent_FinalizeAudioRecognition Parms{};

	Parms.JsonData = std::move(JsonData);
	Parms.bFinalized = bFinalized;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.StreamVoiceRecognizeComponent.StartCapture
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString*                          Message                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStreamVoiceRecognizeComponent::StartCapture(class FString* Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamVoiceRecognizeComponent", "StartCapture");

	Params::StreamVoiceRecognizeComponent_StartCapture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Message != nullptr)
		*Message = std::move(Parms.Message);

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.StreamVoiceRecognizeComponent.StopCapture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bResetVosk                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStreamVoiceRecognizeComponent::StopCapture(bool bResetVosk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamVoiceRecognizeComponent", "StopCapture");

	Params::StreamVoiceRecognizeComponent_StopCapture Parms{};

	Parms.bResetVosk = bResetVosk;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.StreamVoiceRecognizeComponent.ReadJsonData
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// bool                                    bFinalResult                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    JsonData                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutWord                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStreamVoiceRecognizeComponent::ReadJsonData(bool bFinalResult, const class FString& JsonData, class FString* OutWord) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamVoiceRecognizeComponent", "ReadJsonData");

	Params::StreamVoiceRecognizeComponent_ReadJsonData Parms{};

	Parms.bFinalResult = bFinalResult;
	Parms.JsonData = std::move(JsonData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWord != nullptr)
		*OutWord = std::move(Parms.OutWord);
}


// Function YnnkVoiceLipsync.YnnkLipsyncController.InitializeAnimationTargets
// (Final, Native, Protected)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UYnnkLipsyncController::InitializeAnimationTargets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkLipsyncController", "InitializeAnimationTargets");

	Params::YnnkLipsyncController_InitializeAnimationTargets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkLipsyncController.OnSpeakerFinished
// (Final, Native, Protected)

void UYnnkLipsyncController::OnSpeakerFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkLipsyncController", "OnSpeakerFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkLipsyncController.OnSpeakerPlaybackPercent
// (Final, Native, Protected)
// Parameters:
// const class USoundWave*                 PlayingSoundWave                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             PlaybackPercent                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkLipsyncController::OnSpeakerPlaybackPercent(const class USoundWave* PlayingSoundWave, const float PlaybackPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkLipsyncController", "OnSpeakerPlaybackPercent");

	Params::YnnkLipsyncController_OnSpeakerPlaybackPercent Parms{};

	Parms.PlayingSoundWave = PlayingSoundWave;
	Parms.PlaybackPercent = PlaybackPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkLipsyncController.OnSpeakerSingleEnvelope
// (Final, Native, Protected)
// Parameters:
// const class USoundWave*                 PlayingSoundWave                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             EnvelopeValue                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkLipsyncController::OnSpeakerSingleEnvelope(const class USoundWave* PlayingSoundWave, const float EnvelopeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkLipsyncController", "OnSpeakerSingleEnvelope");

	Params::YnnkLipsyncController_OnSpeakerSingleEnvelope Parms{};

	Parms.PlayingSoundWave = PlayingSoundWave;
	Parms.EnvelopeValue = EnvelopeValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkLipsyncController.PrepareSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundWave*                       Sound                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkLipsyncController::PrepareSound(class USoundWave* Sound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkLipsyncController", "PrepareSound");

	Params::YnnkLipsyncController_PrepareSound Parms{};

	Parms.Sound = Sound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkLipsyncController.SetSpeaker
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAudioComponent*                  NewSpeaker                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkLipsyncController::SetSpeaker(class UAudioComponent* NewSpeaker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkLipsyncController", "SetSpeaker");

	Params::YnnkLipsyncController_SetSpeaker Parms{};

	Parms.NewSpeaker = NewSpeaker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkLipsyncController.Speak
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UYnnkVoiceLipsyncData*            VoiceLipsyncData                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkLipsyncController::Speak(class UYnnkVoiceLipsyncData* VoiceLipsyncData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkLipsyncController", "Speak");

	Params::YnnkLipsyncController_Speak Parms{};

	Parms.VoiceLipsyncData = VoiceLipsyncData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkLipsyncController.SpeakEx
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundBase*                       Voice                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UYnnkVoiceLipsyncData*            VoiceLipsyncData                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SoundOffset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkLipsyncController::SpeakEx(class USoundBase* Voice, class UYnnkVoiceLipsyncData* VoiceLipsyncData, float SoundOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkLipsyncController", "SpeakEx");

	Params::YnnkLipsyncController_SpeakEx Parms{};

	Parms.Voice = Voice;
	Parms.VoiceLipsyncData = VoiceLipsyncData;
	Parms.SoundOffset = SoundOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkLipsyncController.StopSpeaking
// (Final, Native, Public, BlueprintCallable)

void UYnnkLipsyncController::StopSpeaking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkLipsyncController", "StopSpeaking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkLipsyncController.GetCurrentViseme
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EYnnkViseme                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EYnnkViseme UYnnkLipsyncController::GetCurrentViseme() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkLipsyncController", "GetCurrentViseme");

	Params::YnnkLipsyncController_GetCurrentViseme Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkLipsyncController.IsSpeaking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UYnnkLipsyncController::IsSpeaking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkLipsyncController", "IsSpeaking");

	Params::YnnkLipsyncController_IsSpeaking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkLipsyncController.LogDebugData
// (Final, Native, Public, Const)

void UYnnkLipsyncController::LogDebugData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkLipsyncController", "LogDebugData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.AppendCurveAnimations
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TMap<class FName, struct FSimpleFloatCurve>&A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<class FName, struct FSimpleFloatCurve>&B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<class FName, struct FSimpleFloatCurve>*Result                                                 (Parm, OutParm, NativeAccessSpecifierPublic)

void UYnnkLipSyncFunctionLibrary::AppendCurveAnimations(const TMap<class FName, struct FSimpleFloatCurve>& A, const TMap<class FName, struct FSimpleFloatCurve>& B, TMap<class FName, struct FSimpleFloatCurve>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "AppendCurveAnimations");

	Params::YnnkLipSyncFunctionLibrary_AppendCurveAnimations Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.AppendCurveSet
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TMap<class FName, float>&         A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<class FName, float>&         B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<class FName, float>*               Result                                                 (Parm, OutParm, NativeAccessSpecifierPublic)

void UYnnkLipSyncFunctionLibrary::AppendCurveSet(const TMap<class FName, float>& A, const TMap<class FName, float>& B, TMap<class FName, float>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "AppendCurveSet");

	Params::YnnkLipSyncFunctionLibrary_AppendCurveSet Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.AsyncLoadFromPCMData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    PCMData                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SampleRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   BitRate                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateSoundWave                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterruptLastRequest                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundWave**                      OutSoundWave                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ID, const TArray<struct FSingeWordData>& Data)>&CallbackEvent                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncRecognizer**                AsyncRecognizer                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UYnnkLipSyncFunctionLibrary::AsyncLoadFromPCMData(const TArray<uint8>& PCMData, int32 SampleRate, uint8 BitRate, float Duration, bool bCreateSoundWave, bool bInterruptLastRequest, class USoundWave** OutSoundWave, const TDelegate<void(int32 ID, const TArray<struct FSingeWordData>& Data)>& CallbackEvent, class UAsyncRecognizer** AsyncRecognizer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "AsyncLoadFromPCMData");

	Params::YnnkLipSyncFunctionLibrary_AsyncLoadFromPCMData Parms{};

	Parms.PCMData = std::move(PCMData);
	Parms.SampleRate = SampleRate;
	Parms.BitRate = BitRate;
	Parms.Duration = Duration;
	Parms.bCreateSoundWave = bCreateSoundWave;
	Parms.bInterruptLastRequest = bInterruptLastRequest;
	Parms.CallbackEvent = CallbackEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSoundWave != nullptr)
		*OutSoundWave = Parms.OutSoundWave;

	if (AsyncRecognizer != nullptr)
		*AsyncRecognizer = Parms.AsyncRecognizer;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.ConnectToRecognitionServer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    IPv4                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Port                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLogData                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UYnnkRemoteClient*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UYnnkRemoteClient* UYnnkLipSyncFunctionLibrary::ConnectToRecognitionServer(const class FString& IPv4, int32 Port, bool bLogData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "ConnectToRecognitionServer");

	Params::YnnkLipSyncFunctionLibrary_ConnectToRecognitionServer Parms{};

	Parms.IPv4 = std::move(IPv4);
	Parms.Port = Port;
	Parms.bLogData = bLogData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.CreateLipsyncDataFromWavFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class UYnnkVoiceLipsyncData* VoiceLipsyncData, bool bResult, const class FString& Subtitles)>&CallbackEvent                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterruptLastRequest                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutErrors                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UYnnkLipSyncFunctionLibrary::CreateLipsyncDataFromWavFile(class UObject* WorldContext, const class FString& Filename, const TDelegate<void(class UYnnkVoiceLipsyncData* VoiceLipsyncData, bool bResult, const class FString& Subtitles)>& CallbackEvent, bool bInterruptLastRequest, class FString* OutErrors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "CreateLipsyncDataFromWavFile");

	Params::YnnkLipSyncFunctionLibrary_CreateLipsyncDataFromWavFile Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Filename = std::move(Filename);
	Parms.CallbackEvent = CallbackEvent;
	Parms.bInterruptLastRequest = bInterruptLastRequest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutErrors != nullptr)
		*OutErrors = std::move(Parms.OutErrors);

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.CreateTranscriptedTextFromFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ID, const TArray<struct FSingeWordData>& Data)>&CallbackEvent                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterruptLastRequest                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundWave**                      LoadedAudio                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncRecognizer**                AsyncRecognizer                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UYnnkLipSyncFunctionLibrary::CreateTranscriptedTextFromFile(const class FString& Filename, const TDelegate<void(int32 ID, const TArray<struct FSingeWordData>& Data)>& CallbackEvent, bool bInterruptLastRequest, class USoundWave** LoadedAudio, class UAsyncRecognizer** AsyncRecognizer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "CreateTranscriptedTextFromFile");

	Params::YnnkLipSyncFunctionLibrary_CreateTranscriptedTextFromFile Parms{};

	Parms.Filename = std::move(Filename);
	Parms.CallbackEvent = CallbackEvent;
	Parms.bInterruptLastRequest = bInterruptLastRequest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LoadedAudio != nullptr)
		*LoadedAudio = Parms.LoadedAudio;

	if (AsyncRecognizer != nullptr)
		*AsyncRecognizer = Parms.AsyncRecognizer;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.CreateTranscriptedTextFromSpeechAsset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USoundWave*                       SpeechAudio                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseRawPCMData                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 ID, const TArray<struct FSingeWordData>& Data)>&CallbackEvent                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterruptLastRequest                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UYnnkLipSyncFunctionLibrary::CreateTranscriptedTextFromSpeechAsset(class USoundWave* SpeechAudio, bool bUseRawPCMData, const TDelegate<void(int32 ID, const TArray<struct FSingeWordData>& Data)>& CallbackEvent, bool bInterruptLastRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "CreateTranscriptedTextFromSpeechAsset");

	Params::YnnkLipSyncFunctionLibrary_CreateTranscriptedTextFromSpeechAsset Parms{};

	Parms.SpeechAudio = SpeechAudio;
	Parms.bUseRawPCMData = bUseRawPCMData;
	Parms.CallbackEvent = CallbackEvent;
	Parms.bInterruptLastRequest = bInterruptLastRequest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.CreateTranscriptionDictionary
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DictFile_ARPAbet                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    StartAt                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TargetFileName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkLipSyncFunctionLibrary::CreateTranscriptionDictionary(const class FString& DictFile_ARPAbet, const class FString& StartAt, const class FString& TargetFileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "CreateTranscriptionDictionary");

	Params::YnnkLipSyncFunctionLibrary_CreateTranscriptionDictionary Parms{};

	Parms.DictFile_ARPAbet = std::move(DictFile_ARPAbet);
	Parms.StartAt = std::move(StartAt);
	Parms.TargetFileName = std::move(TargetFileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.ExpandCurveToBaseCurves
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSimpleFloatCurve&         InCurve                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TSet<class FName>&                AnimationTargets                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class UPoseAsset*                 PoseAsset                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, struct FSimpleFloatCurve>*OutCurves                                              (Parm, OutParm, NativeAccessSpecifierPublic)

void UYnnkLipSyncFunctionLibrary::ExpandCurveToBaseCurves(const struct FSimpleFloatCurve& InCurve, const TSet<class FName>& AnimationTargets, const class UPoseAsset* PoseAsset, TMap<class FName, struct FSimpleFloatCurve>* OutCurves)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "ExpandCurveToBaseCurves");

	Params::YnnkLipSyncFunctionLibrary_ExpandCurveToBaseCurves Parms{};

	Parms.InCurve = std::move(InCurve);
	Parms.AnimationTargets = std::move(AnimationTargets);
	Parms.PoseAsset = PoseAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCurves != nullptr)
		*OutCurves = std::move(Parms.OutCurves);
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.ExpandPoseAnimationToCurves
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TMap<class FName, struct FSimpleFloatCurve>&InAnimation                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class UPoseAsset*                 PoseAsset                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, struct FSimpleFloatCurve>*OutAnimation                                           (Parm, OutParm, NativeAccessSpecifierPublic)
// const class FString&                    CurveNameFilter                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CombineKeysPrecision                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOptimizeKeys                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkLipSyncFunctionLibrary::ExpandPoseAnimationToCurves(const TMap<class FName, struct FSimpleFloatCurve>& InAnimation, const class UPoseAsset* PoseAsset, TMap<class FName, struct FSimpleFloatCurve>* OutAnimation, const class FString& CurveNameFilter, float CombineKeysPrecision, bool bOptimizeKeys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "ExpandPoseAnimationToCurves");

	Params::YnnkLipSyncFunctionLibrary_ExpandPoseAnimationToCurves Parms{};

	Parms.InAnimation = std::move(InAnimation);
	Parms.PoseAsset = PoseAsset;
	Parms.CurveNameFilter = std::move(CurveNameFilter);
	Parms.CombineKeysPrecision = CombineKeysPrecision;
	Parms.bOptimizeKeys = bOptimizeKeys;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAnimation != nullptr)
		*OutAnimation = std::move(Parms.OutAnimation);
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.GetCurvesSetDuration
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TMap<class FName, struct FSimpleFloatCurve>&CurvesAnimation                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UYnnkLipSyncFunctionLibrary::GetCurvesSetDuration(const TMap<class FName, struct FSimpleFloatCurve>& CurvesAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "GetCurvesSetDuration");

	Params::YnnkLipSyncFunctionLibrary_GetCurvesSetDuration Parms{};

	Parms.CurvesAnimation = std::move(CurvesAnimation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.GetLipsyncGenerationLangualge
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UYnnkLipSyncFunctionLibrary::GetLipsyncGenerationLangualge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "GetLipsyncGenerationLangualge");

	Params::YnnkLipSyncFunctionLibrary_GetLipsyncGenerationLangualge Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.GetSimpleCurveValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSimpleFloatCurve&               Curve                                                  (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UYnnkLipSyncFunctionLibrary::GetSimpleCurveValue(struct FSimpleFloatCurve& Curve, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "GetSimpleCurveValue");

	Params::YnnkLipSyncFunctionLibrary_GetSimpleCurveValue Parms{};

	Parms.Curve = std::move(Curve);
	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Curve = std::move(Parms.Curve);

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.LoadWaveFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>*                          OutPCMData                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32*                                  SampleRate                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8*                                  BitRate                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8*                                  Channels                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  Duration                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UYnnkLipSyncFunctionLibrary::LoadWaveFile(const class FString& Filename, TArray<uint8>* OutPCMData, int32* SampleRate, uint8* BitRate, uint8* Channels, float* Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "LoadWaveFile");

	Params::YnnkLipSyncFunctionLibrary_LoadWaveFile Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPCMData != nullptr)
		*OutPCMData = std::move(Parms.OutPCMData);

	if (SampleRate != nullptr)
		*SampleRate = Parms.SampleRate;

	if (BitRate != nullptr)
		*BitRate = Parms.BitRate;

	if (Channels != nullptr)
		*Channels = Parms.Channels;

	if (Duration != nullptr)
		*Duration = Parms.Duration;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.LoadWaveFileToSoundWave
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Outer_0                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundWave**                      OutSoundWave                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UYnnkLipSyncFunctionLibrary::LoadWaveFileToSoundWave(const class FString& Filename, class UObject* Outer_0, class USoundWave** OutSoundWave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "LoadWaveFileToSoundWave");

	Params::YnnkLipSyncFunctionLibrary_LoadWaveFileToSoundWave Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Outer_0 = Outer_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSoundWave != nullptr)
		*OutSoundWave = Parms.OutSoundWave;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.MultiplyCurvesSet
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TMap<class FName, float>&         A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Multiplier                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, float>*               Result                                                 (Parm, OutParm, NativeAccessSpecifierPublic)

void UYnnkLipSyncFunctionLibrary::MultiplyCurvesSet(const TMap<class FName, float>& A, float Multiplier, TMap<class FName, float>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "MultiplyCurvesSet");

	Params::YnnkLipSyncFunctionLibrary_MultiplyCurvesSet Parms{};

	Parms.A = std::move(A);
	Parms.Multiplier = Multiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.MultiplyCurvesSets
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TMap<class FName, float>&         A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<class FName, float>&         B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<class FName, float>*               Result                                                 (Parm, OutParm, NativeAccessSpecifierPublic)

void UYnnkLipSyncFunctionLibrary::MultiplyCurvesSets(const TMap<class FName, float>& A, const TMap<class FName, float>& B, TMap<class FName, float>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "MultiplyCurvesSets");

	Params::YnnkLipSyncFunctionLibrary_MultiplyCurvesSets Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.PowerCurvesSet
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TMap<class FName, float>&         A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, float>*               Result                                                 (Parm, OutParm, NativeAccessSpecifierPublic)

void UYnnkLipSyncFunctionLibrary::PowerCurvesSet(const TMap<class FName, float>& A, float B, TMap<class FName, float>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "PowerCurvesSet");

	Params::YnnkLipSyncFunctionLibrary_PowerCurvesSet Parms{};

	Parms.A = std::move(A);
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.RecognizeRawAudioData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    PCMData                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// uint8                                   BitRate                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSingeWordData>*          OutRecognizedData                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UYnnkLipSyncFunctionLibrary::RecognizeRawAudioData(const TArray<uint8>& PCMData, uint8 BitRate, TArray<struct FSingeWordData>* OutRecognizedData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "RecognizeRawAudioData");

	Params::YnnkLipSyncFunctionLibrary_RecognizeRawAudioData Parms{};

	Parms.PCMData = std::move(PCMData);
	Parms.BitRate = BitRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRecognizedData != nullptr)
		*OutRecognizedData = std::move(Parms.OutRecognizedData);
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.ResetVoskVoiceRecognizer
// (Final, Native, Static, Public, BlueprintCallable)

void UYnnkLipSyncFunctionLibrary::ResetVoskVoiceRecognizer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "ResetVoskVoiceRecognizer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.SaveSoundWaveToFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USoundWave*                       Wave                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkLipSyncFunctionLibrary::SaveSoundWaveToFile(class USoundWave* Wave, const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "SaveSoundWaveToFile");

	Params::YnnkLipSyncFunctionLibrary_SaveSoundWaveToFile Parms{};

	Parms.Wave = Wave;
	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.SetYnnkAudioSampleRate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   NewSampleRate                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkLipSyncFunctionLibrary::SetYnnkAudioSampleRate(int32 NewSampleRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "SetYnnkAudioSampleRate");

	Params::YnnkLipSyncFunctionLibrary_SetYnnkAudioSampleRate Parms{};

	Parms.NewSampleRate = NewSampleRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkLipSyncFunctionLibrary.SubstractCurvesSet
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TMap<class FName, float>&         A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<class FName, float>&         B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<class FName, float>*               Result                                                 (Parm, OutParm, NativeAccessSpecifierPublic)

void UYnnkLipSyncFunctionLibrary::SubstractCurvesSet(const TMap<class FName, float>& A, const TMap<class FName, float>& B, TMap<class FName, float>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkLipSyncFunctionLibrary", "SubstractCurvesSet");

	Params::YnnkLipSyncFunctionLibrary_SubstractCurvesSet Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function YnnkVoiceLipsync.YnnkRemoteClient.ConnectToServer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    IP                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Port                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UYnnkRemoteClient::ConnectToServer(const class FString& IP, int32 Port)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkRemoteClient", "ConnectToServer");

	Params::YnnkRemoteClient_ConnectToServer Parms{};

	Parms.IP = std::move(IP);
	Parms.Port = Port;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkRemoteClient.Disconnect
// (Final, Native, Public, BlueprintCallable)

void UYnnkRemoteClient::Disconnect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkRemoteClient", "Disconnect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkRemoteClient.GenerateFacialAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UYnnkVoiceLipsyncData*      LipsyncData                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLipSync                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFacialAnimation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UYnnkRemoteClient::GenerateFacialAnimation(const class UYnnkVoiceLipsyncData* LipsyncData, bool bLipSync, bool bFacialAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkRemoteClient", "GenerateFacialAnimation");

	Params::YnnkRemoteClient_GenerateFacialAnimation Parms{};

	Parms.LipsyncData = LipsyncData;
	Parms.bLipSync = bLipSync;
	Parms.bFacialAnimation = bFacialAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkRemoteClient.RecognizeAudioData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    PCMData                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SampleRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 RequestID, const TArray<struct FSingeWordData>& OutSentence, const class FString& Subtitles)>&CallbackEvent                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UYnnkRemoteClient::RecognizeAudioData(const TArray<uint8>& PCMData, int32 SampleRate, const TDelegate<void(int32 RequestID, const TArray<struct FSingeWordData>& OutSentence, const class FString& Subtitles)>& CallbackEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkRemoteClient", "RecognizeAudioData");

	Params::YnnkRemoteClient_RecognizeAudioData Parms{};

	Parms.PCMData = std::move(PCMData);
	Parms.SampleRate = SampleRate;
	Parms.CallbackEvent = CallbackEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkRemoteClient.RecognizeSoundWave
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USoundWave*                       SoundAsset                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 RequestID, const TArray<struct FSingeWordData>& OutSentence, const class FString& Subtitles)>&CallbackEvent                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UYnnkRemoteClient::RecognizeSoundWave(class USoundWave* SoundAsset, const TDelegate<void(int32 RequestID, const TArray<struct FSingeWordData>& OutSentence, const class FString& Subtitles)>& CallbackEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkRemoteClient", "RecognizeSoundWave");

	Params::YnnkRemoteClient_RecognizeSoundWave Parms{};

	Parms.SoundAsset = SoundAsset;
	Parms.CallbackEvent = CallbackEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkRemoteClient.RequestInitConnection
// (Final, Native, Public, BlueprintCallable)

void UYnnkRemoteClient::RequestInitConnection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkRemoteClient", "RequestInitConnection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkRemoteClient.IsConnected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UYnnkRemoteClient::IsConnected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkRemoteClient", "IsConnected");

	Params::YnnkRemoteClient_IsConnected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkRemoteClient.IsInitialized
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UYnnkRemoteClient::IsInitialized() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkRemoteClient", "IsInitialized");

	Params::YnnkRemoteClient_IsInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkRemoteClient.PingServer
// (Final, Native, Public, BlueprintCallable, Const)

void UYnnkRemoteClient::PingServer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkRemoteClient", "PingServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkVoiceLipsyncData.CreateVoiceLipsyncData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Parent                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FSingeWordData>&    Sentence                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USoundWave*                       VoiceSound                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UYnnkVoiceLipsyncData*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UYnnkVoiceLipsyncData* UYnnkVoiceLipsyncData::CreateVoiceLipsyncData(class UObject* Parent, const TArray<struct FSingeWordData>& Sentence, class USoundWave* VoiceSound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkVoiceLipsyncData", "CreateVoiceLipsyncData");

	Params::YnnkVoiceLipsyncData_CreateVoiceLipsyncData Parms{};

	Parms.Parent = Parent;
	Parms.Sentence = std::move(Sentence);
	Parms.VoiceSound = VoiceSound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkVoiceLipsyncData.CreateVoiceLipsyncDataEx
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Parent                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FSingeWordData>&    Sentence                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USoundWave*                       VoiceSound                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStretchCurves                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceGeneratePhonemes                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UYnnkVoiceLipsyncData*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UYnnkVoiceLipsyncData* UYnnkVoiceLipsyncData::CreateVoiceLipsyncDataEx(class UObject* Parent, const TArray<struct FSingeWordData>& Sentence, class USoundWave* VoiceSound, bool bStretchCurves, bool bForceGeneratePhonemes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("YnnkVoiceLipsyncData", "CreateVoiceLipsyncDataEx");

	Params::YnnkVoiceLipsyncData_CreateVoiceLipsyncDataEx Parms{};

	Parms.Parent = Parent;
	Parms.Sentence = std::move(Sentence);
	Parms.VoiceSound = VoiceSound;
	Parms.bStretchCurves = bStretchCurves;
	Parms.bForceGeneratePhonemes = bForceGeneratePhonemes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkVoiceLipsyncData.ConvertAnimationToBaseCurves
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UPoseAsset*                 PoseAsset                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<EYnnkViseme, struct FCompositeCurvesWrapper>&AnimationTargets                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   SmoothAlpha                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYnnkVoiceLipsyncData::ConvertAnimationToBaseCurves(const class UPoseAsset* PoseAsset, const TMap<EYnnkViseme, struct FCompositeCurvesWrapper>& AnimationTargets, float SmoothAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkVoiceLipsyncData", "ConvertAnimationToBaseCurves");

	Params::YnnkVoiceLipsyncData_ConvertAnimationToBaseCurves Parms{};

	Parms.PoseAsset = PoseAsset;
	Parms.AnimationTargets = std::move(AnimationTargets);
	Parms.SmoothAlpha = SmoothAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkVoiceLipsyncData.CreateCurves
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FSingeWordData>&    Sentence                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UYnnkVoiceLipsyncData::CreateCurves(const TArray<struct FSingeWordData>& Sentence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkVoiceLipsyncData", "CreateCurves");

	Params::YnnkVoiceLipsyncData_CreateCurves Parms{};

	Parms.Sentence = std::move(Sentence);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkVoiceLipsyncData.GetCurveValue
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FSimpleFloatCurve&               Curve                                                  (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UYnnkVoiceLipsyncData::GetCurveValue(struct FSimpleFloatCurve& Curve, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkVoiceLipsyncData", "GetCurveValue");

	Params::YnnkVoiceLipsyncData_GetCurveValue Parms{};

	Parms.Curve = std::move(Curve);
	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Curve = std::move(Parms.Curve);

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkVoiceLipsyncData.ResetToStart
// (Final, Native, Public, BlueprintCallable)

void UYnnkVoiceLipsyncData::ResetToStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkVoiceLipsyncData", "ResetToStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function YnnkVoiceLipsync.YnnkVoiceLipsyncData.ContainsData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UYnnkVoiceLipsyncData::ContainsData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkVoiceLipsyncData", "ContainsData");

	Params::YnnkVoiceLipsyncData_ContainsData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkVoiceLipsyncData.GetAnimationStartTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UYnnkVoiceLipsyncData::GetAnimationStartTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkVoiceLipsyncData", "GetAnimationStartTime");

	Params::YnnkVoiceLipsyncData_GetAnimationStartTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function YnnkVoiceLipsync.YnnkVoiceLipsyncData.GetDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UYnnkVoiceLipsyncData::GetDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YnnkVoiceLipsyncData", "GetDuration");

	Params::YnnkVoiceLipsyncData_GetDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

